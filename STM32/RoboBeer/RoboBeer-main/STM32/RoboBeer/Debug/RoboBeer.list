
RoboBeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d59c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  0800d788  0800d788  0001d788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddd0  0800ddd0  000207e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ddd0  0800ddd0  000207e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ddd0  0800ddd0  000207e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddd0  0800ddd0  0001ddd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddd4  0800ddd4  0001ddd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007e4  20000000  0800ddd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200007e4  0800e5bc  000207e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c80  0800e5bc  00020c80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144a4  00000000  00000000  0002080d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000379c  00000000  00000000  00034cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00038450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  00039848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed98  00000000  00000000  0003aab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a64f  00000000  00000000  00059848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a49eb  00000000  00000000  00073e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006968  00000000  00000000  001188d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200007e4 	.word	0x200007e4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d76c 	.word	0x0800d76c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200007e8 	.word	0x200007e8
 8000224:	0800d76c 	.word	0x0800d76c

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_fmul>:
 800024c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000250:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000254:	bf1e      	ittt	ne
 8000256:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800025a:	ea92 0f0c 	teqne	r2, ip
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d06f      	beq.n	8000344 <__aeabi_fmul+0xf8>
 8000264:	441a      	add	r2, r3
 8000266:	ea80 0c01 	eor.w	ip, r0, r1
 800026a:	0240      	lsls	r0, r0, #9
 800026c:	bf18      	it	ne
 800026e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000272:	d01e      	beq.n	80002b2 <__aeabi_fmul+0x66>
 8000274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000278:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800027c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000280:	fba0 3101 	umull	r3, r1, r0, r1
 8000284:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000288:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800028c:	bf3e      	ittt	cc
 800028e:	0049      	lslcc	r1, r1, #1
 8000290:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000294:	005b      	lslcc	r3, r3, #1
 8000296:	ea40 0001 	orr.w	r0, r0, r1
 800029a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800029e:	2afd      	cmp	r2, #253	; 0xfd
 80002a0:	d81d      	bhi.n	80002de <__aeabi_fmul+0x92>
 80002a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002aa:	bf08      	it	eq
 80002ac:	f020 0001 	biceq.w	r0, r0, #1
 80002b0:	4770      	bx	lr
 80002b2:	f090 0f00 	teq	r0, #0
 80002b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002ba:	bf08      	it	eq
 80002bc:	0249      	lsleq	r1, r1, #9
 80002be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002c6:	3a7f      	subs	r2, #127	; 0x7f
 80002c8:	bfc2      	ittt	gt
 80002ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002d2:	4770      	bxgt	lr
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	f04f 0300 	mov.w	r3, #0
 80002dc:	3a01      	subs	r2, #1
 80002de:	dc5d      	bgt.n	800039c <__aeabi_fmul+0x150>
 80002e0:	f112 0f19 	cmn.w	r2, #25
 80002e4:	bfdc      	itt	le
 80002e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002ea:	4770      	bxle	lr
 80002ec:	f1c2 0200 	rsb	r2, r2, #0
 80002f0:	0041      	lsls	r1, r0, #1
 80002f2:	fa21 f102 	lsr.w	r1, r1, r2
 80002f6:	f1c2 0220 	rsb	r2, r2, #32
 80002fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80002fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000302:	f140 0000 	adc.w	r0, r0, #0
 8000306:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800030a:	bf08      	it	eq
 800030c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000310:	4770      	bx	lr
 8000312:	f092 0f00 	teq	r2, #0
 8000316:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800031a:	bf02      	ittt	eq
 800031c:	0040      	lsleq	r0, r0, #1
 800031e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000322:	3a01      	subeq	r2, #1
 8000324:	d0f9      	beq.n	800031a <__aeabi_fmul+0xce>
 8000326:	ea40 000c 	orr.w	r0, r0, ip
 800032a:	f093 0f00 	teq	r3, #0
 800032e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000332:	bf02      	ittt	eq
 8000334:	0049      	lsleq	r1, r1, #1
 8000336:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800033a:	3b01      	subeq	r3, #1
 800033c:	d0f9      	beq.n	8000332 <__aeabi_fmul+0xe6>
 800033e:	ea41 010c 	orr.w	r1, r1, ip
 8000342:	e78f      	b.n	8000264 <__aeabi_fmul+0x18>
 8000344:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000348:	ea92 0f0c 	teq	r2, ip
 800034c:	bf18      	it	ne
 800034e:	ea93 0f0c 	teqne	r3, ip
 8000352:	d00a      	beq.n	800036a <__aeabi_fmul+0x11e>
 8000354:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000358:	bf18      	it	ne
 800035a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800035e:	d1d8      	bne.n	8000312 <__aeabi_fmul+0xc6>
 8000360:	ea80 0001 	eor.w	r0, r0, r1
 8000364:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000368:	4770      	bx	lr
 800036a:	f090 0f00 	teq	r0, #0
 800036e:	bf17      	itett	ne
 8000370:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000374:	4608      	moveq	r0, r1
 8000376:	f091 0f00 	teqne	r1, #0
 800037a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800037e:	d014      	beq.n	80003aa <__aeabi_fmul+0x15e>
 8000380:	ea92 0f0c 	teq	r2, ip
 8000384:	d101      	bne.n	800038a <__aeabi_fmul+0x13e>
 8000386:	0242      	lsls	r2, r0, #9
 8000388:	d10f      	bne.n	80003aa <__aeabi_fmul+0x15e>
 800038a:	ea93 0f0c 	teq	r3, ip
 800038e:	d103      	bne.n	8000398 <__aeabi_fmul+0x14c>
 8000390:	024b      	lsls	r3, r1, #9
 8000392:	bf18      	it	ne
 8000394:	4608      	movne	r0, r1
 8000396:	d108      	bne.n	80003aa <__aeabi_fmul+0x15e>
 8000398:	ea80 0001 	eor.w	r0, r0, r1
 800039c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a8:	4770      	bx	lr
 80003aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003b2:	4770      	bx	lr

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_dmul>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8de 	bleq	8000908 <__aeabi_dmul+0x1dc>
 800074c:	442c      	add	r4, r5
 800074e:	ea81 0603 	eor.w	r6, r1, r3
 8000752:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000756:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800075a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800075e:	bf18      	it	ne
 8000760:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800076c:	d038      	beq.n	80007e0 <__aeabi_dmul+0xb4>
 800076e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	fbe1 e502 	umlal	lr, r5, r1, r2
 800077a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800077e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000782:	f04f 0600 	mov.w	r6, #0
 8000786:	fbe1 5603 	umlal	r5, r6, r1, r3
 800078a:	f09c 0f00 	teq	ip, #0
 800078e:	bf18      	it	ne
 8000790:	f04e 0e01 	orrne.w	lr, lr, #1
 8000794:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000798:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800079c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007a0:	d204      	bcs.n	80007ac <__aeabi_dmul+0x80>
 80007a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007a6:	416d      	adcs	r5, r5
 80007a8:	eb46 0606 	adc.w	r6, r6, r6
 80007ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007c4:	bf88      	it	hi
 80007c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007ca:	d81e      	bhi.n	800080a <__aeabi_dmul+0xde>
 80007cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007d0:	bf08      	it	eq
 80007d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007d6:	f150 0000 	adcs.w	r0, r0, #0
 80007da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007e4:	ea46 0101 	orr.w	r1, r6, r1
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007f4:	bfc2      	ittt	gt
 80007f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000804:	f04f 0e00 	mov.w	lr, #0
 8000808:	3c01      	subs	r4, #1
 800080a:	f300 80ab 	bgt.w	8000964 <__aeabi_dmul+0x238>
 800080e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000812:	bfde      	ittt	le
 8000814:	2000      	movle	r0, #0
 8000816:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800081a:	bd70      	pople	{r4, r5, r6, pc}
 800081c:	f1c4 0400 	rsb	r4, r4, #0
 8000820:	3c20      	subs	r4, #32
 8000822:	da35      	bge.n	8000890 <__aeabi_dmul+0x164>
 8000824:	340c      	adds	r4, #12
 8000826:	dc1b      	bgt.n	8000860 <__aeabi_dmul+0x134>
 8000828:	f104 0414 	add.w	r4, r4, #20
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f305 	lsl.w	r3, r0, r5
 8000834:	fa20 f004 	lsr.w	r0, r0, r4
 8000838:	fa01 f205 	lsl.w	r2, r1, r5
 800083c:	ea40 0002 	orr.w	r0, r0, r2
 8000840:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000844:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	fa21 f604 	lsr.w	r6, r1, r4
 8000850:	eb42 0106 	adc.w	r1, r2, r6
 8000854:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000858:	bf08      	it	eq
 800085a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f1c4 040c 	rsb	r4, r4, #12
 8000864:	f1c4 0520 	rsb	r5, r4, #32
 8000868:	fa00 f304 	lsl.w	r3, r0, r4
 800086c:	fa20 f005 	lsr.w	r0, r0, r5
 8000870:	fa01 f204 	lsl.w	r2, r1, r4
 8000874:	ea40 0002 	orr.w	r0, r0, r2
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000880:	f141 0100 	adc.w	r1, r1, #0
 8000884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000888:	bf08      	it	eq
 800088a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f1c4 0520 	rsb	r5, r4, #32
 8000894:	fa00 f205 	lsl.w	r2, r0, r5
 8000898:	ea4e 0e02 	orr.w	lr, lr, r2
 800089c:	fa20 f304 	lsr.w	r3, r0, r4
 80008a0:	fa01 f205 	lsl.w	r2, r1, r5
 80008a4:	ea43 0302 	orr.w	r3, r3, r2
 80008a8:	fa21 f004 	lsr.w	r0, r1, r4
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b0:	fa21 f204 	lsr.w	r2, r1, r4
 80008b4:	ea20 0002 	bic.w	r0, r0, r2
 80008b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008c0:	bf08      	it	eq
 80008c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	f094 0f00 	teq	r4, #0
 80008cc:	d10f      	bne.n	80008ee <__aeabi_dmul+0x1c2>
 80008ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008d2:	0040      	lsls	r0, r0, #1
 80008d4:	eb41 0101 	adc.w	r1, r1, r1
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf08      	it	eq
 80008de:	3c01      	subeq	r4, #1
 80008e0:	d0f7      	beq.n	80008d2 <__aeabi_dmul+0x1a6>
 80008e2:	ea41 0106 	orr.w	r1, r1, r6
 80008e6:	f095 0f00 	teq	r5, #0
 80008ea:	bf18      	it	ne
 80008ec:	4770      	bxne	lr
 80008ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008f2:	0052      	lsls	r2, r2, #1
 80008f4:	eb43 0303 	adc.w	r3, r3, r3
 80008f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008fc:	bf08      	it	eq
 80008fe:	3d01      	subeq	r5, #1
 8000900:	d0f7      	beq.n	80008f2 <__aeabi_dmul+0x1c6>
 8000902:	ea43 0306 	orr.w	r3, r3, r6
 8000906:	4770      	bx	lr
 8000908:	ea94 0f0c 	teq	r4, ip
 800090c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000910:	bf18      	it	ne
 8000912:	ea95 0f0c 	teqne	r5, ip
 8000916:	d00c      	beq.n	8000932 <__aeabi_dmul+0x206>
 8000918:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000922:	d1d1      	bne.n	80008c8 <__aeabi_dmul+0x19c>
 8000924:	ea81 0103 	eor.w	r1, r1, r3
 8000928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000936:	bf06      	itte	eq
 8000938:	4610      	moveq	r0, r2
 800093a:	4619      	moveq	r1, r3
 800093c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000940:	d019      	beq.n	8000976 <__aeabi_dmul+0x24a>
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	d102      	bne.n	800094e <__aeabi_dmul+0x222>
 8000948:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800094c:	d113      	bne.n	8000976 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	d105      	bne.n	8000960 <__aeabi_dmul+0x234>
 8000954:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000958:	bf1c      	itt	ne
 800095a:	4610      	movne	r0, r2
 800095c:	4619      	movne	r1, r3
 800095e:	d10a      	bne.n	8000976 <__aeabi_dmul+0x24a>
 8000960:	ea81 0103 	eor.w	r1, r1, r3
 8000964:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000968:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800096c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000970:	f04f 0000 	mov.w	r0, #0
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800097a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800097e:	bd70      	pop	{r4, r5, r6, pc}

08000980 <__aeabi_ddiv>:
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000986:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800098a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800098e:	bf1d      	ittte	ne
 8000990:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000994:	ea94 0f0c 	teqne	r4, ip
 8000998:	ea95 0f0c 	teqne	r5, ip
 800099c:	f000 f8a7 	bleq	8000aee <__aeabi_ddiv+0x16e>
 80009a0:	eba4 0405 	sub.w	r4, r4, r5
 80009a4:	ea81 0e03 	eor.w	lr, r1, r3
 80009a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009b0:	f000 8088 	beq.w	8000ac4 <__aeabi_ddiv+0x144>
 80009b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009d8:	429d      	cmp	r5, r3
 80009da:	bf08      	it	eq
 80009dc:	4296      	cmpeq	r6, r2
 80009de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009e6:	d202      	bcs.n	80009ee <__aeabi_ddiv+0x6e>
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	1ab6      	subs	r6, r6, r2
 80009f0:	eb65 0503 	sbc.w	r5, r5, r3
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a02:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0a:	bf22      	ittt	cs
 8000a0c:	1ab6      	subcs	r6, r6, r2
 8000a0e:	4675      	movcs	r5, lr
 8000a10:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a22:	bf22      	ittt	cs
 8000a24:	1ab6      	subcs	r6, r6, r2
 8000a26:	4675      	movcs	r5, lr
 8000a28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a32:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3a:	bf22      	ittt	cs
 8000a3c:	1ab6      	subcs	r6, r6, r2
 8000a3e:	4675      	movcs	r5, lr
 8000a40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a44:	085b      	lsrs	r3, r3, #1
 8000a46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a52:	bf22      	ittt	cs
 8000a54:	1ab6      	subcs	r6, r6, r2
 8000a56:	4675      	movcs	r5, lr
 8000a58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a60:	d018      	beq.n	8000a94 <__aeabi_ddiv+0x114>
 8000a62:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a7e:	d1c0      	bne.n	8000a02 <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	d10b      	bne.n	8000a9e <__aeabi_ddiv+0x11e>
 8000a86:	ea41 0100 	orr.w	r1, r1, r0
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a92:	e7b6      	b.n	8000a02 <__aeabi_ddiv+0x82>
 8000a94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a98:	bf04      	itt	eq
 8000a9a:	4301      	orreq	r1, r0
 8000a9c:	2000      	moveq	r0, #0
 8000a9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000aa2:	bf88      	it	hi
 8000aa4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aa8:	f63f aeaf 	bhi.w	800080a <__aeabi_dmul+0xde>
 8000aac:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ab0:	bf04      	itt	eq
 8000ab2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ab6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aba:	f150 0000 	adcs.w	r0, r0, #0
 8000abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ac8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000acc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ad0:	bfc2      	ittt	gt
 8000ad2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ad6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ada:	bd70      	popgt	{r4, r5, r6, pc}
 8000adc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae0:	f04f 0e00 	mov.w	lr, #0
 8000ae4:	3c01      	subs	r4, #1
 8000ae6:	e690      	b.n	800080a <__aeabi_dmul+0xde>
 8000ae8:	ea45 0e06 	orr.w	lr, r5, r6
 8000aec:	e68d      	b.n	800080a <__aeabi_dmul+0xde>
 8000aee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000af2:	ea94 0f0c 	teq	r4, ip
 8000af6:	bf08      	it	eq
 8000af8:	ea95 0f0c 	teqeq	r5, ip
 8000afc:	f43f af3b 	beq.w	8000976 <__aeabi_dmul+0x24a>
 8000b00:	ea94 0f0c 	teq	r4, ip
 8000b04:	d10a      	bne.n	8000b1c <__aeabi_ddiv+0x19c>
 8000b06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b0a:	f47f af34 	bne.w	8000976 <__aeabi_dmul+0x24a>
 8000b0e:	ea95 0f0c 	teq	r5, ip
 8000b12:	f47f af25 	bne.w	8000960 <__aeabi_dmul+0x234>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e72c      	b.n	8000976 <__aeabi_dmul+0x24a>
 8000b1c:	ea95 0f0c 	teq	r5, ip
 8000b20:	d106      	bne.n	8000b30 <__aeabi_ddiv+0x1b0>
 8000b22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b26:	f43f aefd 	beq.w	8000924 <__aeabi_dmul+0x1f8>
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	e722      	b.n	8000976 <__aeabi_dmul+0x24a>
 8000b30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b34:	bf18      	it	ne
 8000b36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b3a:	f47f aec5 	bne.w	80008c8 <__aeabi_dmul+0x19c>
 8000b3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b42:	f47f af0d 	bne.w	8000960 <__aeabi_dmul+0x234>
 8000b46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b4a:	f47f aeeb 	bne.w	8000924 <__aeabi_dmul+0x1f8>
 8000b4e:	e712      	b.n	8000976 <__aeabi_dmul+0x24a>

08000b50 <__gedf2>:
 8000b50:	f04f 3cff 	mov.w	ip, #4294967295
 8000b54:	e006      	b.n	8000b64 <__cmpdf2+0x4>
 8000b56:	bf00      	nop

08000b58 <__ledf2>:
 8000b58:	f04f 0c01 	mov.w	ip, #1
 8000b5c:	e002      	b.n	8000b64 <__cmpdf2+0x4>
 8000b5e:	bf00      	nop

08000b60 <__cmpdf2>:
 8000b60:	f04f 0c01 	mov.w	ip, #1
 8000b64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	bf18      	it	ne
 8000b76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b7a:	d01b      	beq.n	8000bb4 <__cmpdf2+0x54>
 8000b7c:	b001      	add	sp, #4
 8000b7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b82:	bf0c      	ite	eq
 8000b84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b88:	ea91 0f03 	teqne	r1, r3
 8000b8c:	bf02      	ittt	eq
 8000b8e:	ea90 0f02 	teqeq	r0, r2
 8000b92:	2000      	moveq	r0, #0
 8000b94:	4770      	bxeq	lr
 8000b96:	f110 0f00 	cmn.w	r0, #0
 8000b9a:	ea91 0f03 	teq	r1, r3
 8000b9e:	bf58      	it	pl
 8000ba0:	4299      	cmppl	r1, r3
 8000ba2:	bf08      	it	eq
 8000ba4:	4290      	cmpeq	r0, r2
 8000ba6:	bf2c      	ite	cs
 8000ba8:	17d8      	asrcs	r0, r3, #31
 8000baa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bae:	f040 0001 	orr.w	r0, r0, #1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bbc:	d102      	bne.n	8000bc4 <__cmpdf2+0x64>
 8000bbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bc2:	d107      	bne.n	8000bd4 <__cmpdf2+0x74>
 8000bc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bcc:	d1d6      	bne.n	8000b7c <__cmpdf2+0x1c>
 8000bce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bd2:	d0d3      	beq.n	8000b7c <__cmpdf2+0x1c>
 8000bd4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_cdrcmple>:
 8000bdc:	4684      	mov	ip, r0
 8000bde:	4610      	mov	r0, r2
 8000be0:	4662      	mov	r2, ip
 8000be2:	468c      	mov	ip, r1
 8000be4:	4619      	mov	r1, r3
 8000be6:	4663      	mov	r3, ip
 8000be8:	e000      	b.n	8000bec <__aeabi_cdcmpeq>
 8000bea:	bf00      	nop

08000bec <__aeabi_cdcmpeq>:
 8000bec:	b501      	push	{r0, lr}
 8000bee:	f7ff ffb7 	bl	8000b60 <__cmpdf2>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	bf48      	it	mi
 8000bf6:	f110 0f00 	cmnmi.w	r0, #0
 8000bfa:	bd01      	pop	{r0, pc}

08000bfc <__aeabi_dcmpeq>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff fff4 	bl	8000bec <__aeabi_cdcmpeq>
 8000c04:	bf0c      	ite	eq
 8000c06:	2001      	moveq	r0, #1
 8000c08:	2000      	movne	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmplt>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffea 	bl	8000bec <__aeabi_cdcmpeq>
 8000c18:	bf34      	ite	cc
 8000c1a:	2001      	movcc	r0, #1
 8000c1c:	2000      	movcs	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmple>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffe0 	bl	8000bec <__aeabi_cdcmpeq>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpge>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffce 	bl	8000bdc <__aeabi_cdrcmple>
 8000c40:	bf94      	ite	ls
 8000c42:	2001      	movls	r0, #1
 8000c44:	2000      	movhi	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpgt>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff ffc4 	bl	8000bdc <__aeabi_cdrcmple>
 8000c54:	bf34      	ite	cc
 8000c56:	2001      	movcc	r0, #1
 8000c58:	2000      	movcs	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_dcmpun>:
 8000c60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c68:	d102      	bne.n	8000c70 <__aeabi_dcmpun+0x10>
 8000c6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c6e:	d10a      	bne.n	8000c86 <__aeabi_dcmpun+0x26>
 8000c70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c78:	d102      	bne.n	8000c80 <__aeabi_dcmpun+0x20>
 8000c7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c7e:	d102      	bne.n	8000c86 <__aeabi_dcmpun+0x26>
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	f04f 0001 	mov.w	r0, #1
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2iz>:
 8000c8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c94:	d215      	bcs.n	8000cc2 <__aeabi_d2iz+0x36>
 8000c96:	d511      	bpl.n	8000cbc <__aeabi_d2iz+0x30>
 8000c98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ca0:	d912      	bls.n	8000cc8 <__aeabi_d2iz+0x3c>
 8000ca2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000caa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000cb6:	bf18      	it	ne
 8000cb8:	4240      	negne	r0, r0
 8000cba:	4770      	bx	lr
 8000cbc:	f04f 0000 	mov.w	r0, #0
 8000cc0:	4770      	bx	lr
 8000cc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cc6:	d105      	bne.n	8000cd4 <__aeabi_d2iz+0x48>
 8000cc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	bf08      	it	eq
 8000cce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cd2:	4770      	bx	lr
 8000cd4:	f04f 0000 	mov.w	r0, #0
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__aeabi_d2uiz>:
 8000cdc:	004a      	lsls	r2, r1, #1
 8000cde:	d211      	bcs.n	8000d04 <__aeabi_d2uiz+0x28>
 8000ce0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ce4:	d211      	bcs.n	8000d0a <__aeabi_d2uiz+0x2e>
 8000ce6:	d50d      	bpl.n	8000d04 <__aeabi_d2uiz+0x28>
 8000ce8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cf0:	d40e      	bmi.n	8000d10 <__aeabi_d2uiz+0x34>
 8000cf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000d02:	4770      	bx	lr
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	4770      	bx	lr
 8000d0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d0e:	d102      	bne.n	8000d16 <__aeabi_d2uiz+0x3a>
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	4770      	bx	lr
 8000d16:	f04f 0000 	mov.w	r0, #0
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_d2f>:
 8000d1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d24:	bf24      	itt	cs
 8000d26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d2e:	d90d      	bls.n	8000d4c <__aeabi_d2f+0x30>
 8000d30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d50:	d121      	bne.n	8000d96 <__aeabi_d2f+0x7a>
 8000d52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d56:	bfbc      	itt	lt
 8000d58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	4770      	bxlt	lr
 8000d5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d66:	f1c2 0218 	rsb	r2, r2, #24
 8000d6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000d6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d72:	fa20 f002 	lsr.w	r0, r0, r2
 8000d76:	bf18      	it	ne
 8000d78:	f040 0001 	orrne.w	r0, r0, #1
 8000d7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d88:	ea40 000c 	orr.w	r0, r0, ip
 8000d8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d94:	e7cc      	b.n	8000d30 <__aeabi_d2f+0x14>
 8000d96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d9a:	d107      	bne.n	8000dac <__aeabi_d2f+0x90>
 8000d9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000da0:	bf1e      	ittt	ne
 8000da2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bxne	lr
 8000dac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000db0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <__aeabi_frsub>:
 8000dbc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	e002      	b.n	8000dc8 <__addsf3>
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_fsub>:
 8000dc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dc8 <__addsf3>:
 8000dc8:	0042      	lsls	r2, r0, #1
 8000dca:	bf1f      	itttt	ne
 8000dcc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dd0:	ea92 0f03 	teqne	r2, r3
 8000dd4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dd8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ddc:	d06a      	beq.n	8000eb4 <__addsf3+0xec>
 8000dde:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000de2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000de6:	bfc1      	itttt	gt
 8000de8:	18d2      	addgt	r2, r2, r3
 8000dea:	4041      	eorgt	r1, r0
 8000dec:	4048      	eorgt	r0, r1
 8000dee:	4041      	eorgt	r1, r0
 8000df0:	bfb8      	it	lt
 8000df2:	425b      	neglt	r3, r3
 8000df4:	2b19      	cmp	r3, #25
 8000df6:	bf88      	it	hi
 8000df8:	4770      	bxhi	lr
 8000dfa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e06:	bf18      	it	ne
 8000e08:	4240      	negne	r0, r0
 8000e0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e16:	bf18      	it	ne
 8000e18:	4249      	negne	r1, r1
 8000e1a:	ea92 0f03 	teq	r2, r3
 8000e1e:	d03f      	beq.n	8000ea0 <__addsf3+0xd8>
 8000e20:	f1a2 0201 	sub.w	r2, r2, #1
 8000e24:	fa41 fc03 	asr.w	ip, r1, r3
 8000e28:	eb10 000c 	adds.w	r0, r0, ip
 8000e2c:	f1c3 0320 	rsb	r3, r3, #32
 8000e30:	fa01 f103 	lsl.w	r1, r1, r3
 8000e34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e38:	d502      	bpl.n	8000e40 <__addsf3+0x78>
 8000e3a:	4249      	negs	r1, r1
 8000e3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e44:	d313      	bcc.n	8000e6e <__addsf3+0xa6>
 8000e46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e4a:	d306      	bcc.n	8000e5a <__addsf3+0x92>
 8000e4c:	0840      	lsrs	r0, r0, #1
 8000e4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e52:	f102 0201 	add.w	r2, r2, #1
 8000e56:	2afe      	cmp	r2, #254	; 0xfe
 8000e58:	d251      	bcs.n	8000efe <__addsf3+0x136>
 8000e5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e62:	bf08      	it	eq
 8000e64:	f020 0001 	biceq.w	r0, r0, #1
 8000e68:	ea40 0003 	orr.w	r0, r0, r3
 8000e6c:	4770      	bx	lr
 8000e6e:	0049      	lsls	r1, r1, #1
 8000e70:	eb40 0000 	adc.w	r0, r0, r0
 8000e74:	3a01      	subs	r2, #1
 8000e76:	bf28      	it	cs
 8000e78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e7c:	d2ed      	bcs.n	8000e5a <__addsf3+0x92>
 8000e7e:	fab0 fc80 	clz	ip, r0
 8000e82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e86:	ebb2 020c 	subs.w	r2, r2, ip
 8000e8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e8e:	bfaa      	itet	ge
 8000e90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e94:	4252      	neglt	r2, r2
 8000e96:	4318      	orrge	r0, r3
 8000e98:	bfbc      	itt	lt
 8000e9a:	40d0      	lsrlt	r0, r2
 8000e9c:	4318      	orrlt	r0, r3
 8000e9e:	4770      	bx	lr
 8000ea0:	f092 0f00 	teq	r2, #0
 8000ea4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ea8:	bf06      	itte	eq
 8000eaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000eae:	3201      	addeq	r2, #1
 8000eb0:	3b01      	subne	r3, #1
 8000eb2:	e7b5      	b.n	8000e20 <__addsf3+0x58>
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d021      	beq.n	8000f08 <__addsf3+0x140>
 8000ec4:	ea92 0f03 	teq	r2, r3
 8000ec8:	d004      	beq.n	8000ed4 <__addsf3+0x10c>
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	bf08      	it	eq
 8000ed0:	4608      	moveq	r0, r1
 8000ed2:	4770      	bx	lr
 8000ed4:	ea90 0f01 	teq	r0, r1
 8000ed8:	bf1c      	itt	ne
 8000eda:	2000      	movne	r0, #0
 8000edc:	4770      	bxne	lr
 8000ede:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ee2:	d104      	bne.n	8000eee <__addsf3+0x126>
 8000ee4:	0040      	lsls	r0, r0, #1
 8000ee6:	bf28      	it	cs
 8000ee8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ef2:	bf3c      	itt	cc
 8000ef4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ef8:	4770      	bxcc	lr
 8000efa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000efe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f0c:	bf16      	itet	ne
 8000f0e:	4608      	movne	r0, r1
 8000f10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f14:	4601      	movne	r1, r0
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	bf06      	itte	eq
 8000f1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f1e:	ea90 0f01 	teqeq	r0, r1
 8000f22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f26:	4770      	bx	lr

08000f28 <__aeabi_ui2f>:
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e004      	b.n	8000f38 <__aeabi_i2f+0x8>
 8000f2e:	bf00      	nop

08000f30 <__aeabi_i2f>:
 8000f30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f34:	bf48      	it	mi
 8000f36:	4240      	negmi	r0, r0
 8000f38:	ea5f 0c00 	movs.w	ip, r0
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f44:	4601      	mov	r1, r0
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	e01c      	b.n	8000f86 <__aeabi_l2f+0x2a>

08000f4c <__aeabi_ul2f>:
 8000f4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f50:	bf08      	it	eq
 8000f52:	4770      	bxeq	lr
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e00a      	b.n	8000f70 <__aeabi_l2f+0x14>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_l2f>:
 8000f5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f60:	bf08      	it	eq
 8000f62:	4770      	bxeq	lr
 8000f64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f68:	d502      	bpl.n	8000f70 <__aeabi_l2f+0x14>
 8000f6a:	4240      	negs	r0, r0
 8000f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f70:	ea5f 0c01 	movs.w	ip, r1
 8000f74:	bf02      	ittt	eq
 8000f76:	4684      	moveq	ip, r0
 8000f78:	4601      	moveq	r1, r0
 8000f7a:	2000      	moveq	r0, #0
 8000f7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f80:	bf08      	it	eq
 8000f82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f8a:	fabc f28c 	clz	r2, ip
 8000f8e:	3a08      	subs	r2, #8
 8000f90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f94:	db10      	blt.n	8000fb8 <__aeabi_l2f+0x5c>
 8000f96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fa0:	f1c2 0220 	rsb	r2, r2, #32
 8000fa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fa8:	fa20 f202 	lsr.w	r2, r0, r2
 8000fac:	eb43 0002 	adc.w	r0, r3, r2
 8000fb0:	bf08      	it	eq
 8000fb2:	f020 0001 	biceq.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	f102 0220 	add.w	r2, r2, #32
 8000fbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fc0:	f1c2 0220 	rsb	r2, r2, #32
 8000fc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000fcc:	eb43 0002 	adc.w	r0, r3, r2
 8000fd0:	bf08      	it	eq
 8000fd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fd6:	4770      	bx	lr

08000fd8 <__gesf2>:
 8000fd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fdc:	e006      	b.n	8000fec <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__lesf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	e002      	b.n	8000fec <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__cmpsf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	bf18      	it	ne
 8000ffe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001002:	d011      	beq.n	8001028 <__cmpsf2+0x40>
 8001004:	b001      	add	sp, #4
 8001006:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100a:	bf18      	it	ne
 800100c:	ea90 0f01 	teqne	r0, r1
 8001010:	bf58      	it	pl
 8001012:	ebb2 0003 	subspl.w	r0, r2, r3
 8001016:	bf88      	it	hi
 8001018:	17c8      	asrhi	r0, r1, #31
 800101a:	bf38      	it	cc
 800101c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001020:	bf18      	it	ne
 8001022:	f040 0001 	orrne.w	r0, r0, #1
 8001026:	4770      	bx	lr
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	d102      	bne.n	8001034 <__cmpsf2+0x4c>
 800102e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001032:	d105      	bne.n	8001040 <__cmpsf2+0x58>
 8001034:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001038:	d1e4      	bne.n	8001004 <__cmpsf2+0x1c>
 800103a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103e:	d0e1      	beq.n	8001004 <__cmpsf2+0x1c>
 8001040:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__aeabi_cfrcmple>:
 8001048:	4684      	mov	ip, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4661      	mov	r1, ip
 800104e:	e7ff      	b.n	8001050 <__aeabi_cfcmpeq>

08001050 <__aeabi_cfcmpeq>:
 8001050:	b50f      	push	{r0, r1, r2, r3, lr}
 8001052:	f7ff ffc9 	bl	8000fe8 <__cmpsf2>
 8001056:	2800      	cmp	r0, #0
 8001058:	bf48      	it	mi
 800105a:	f110 0f00 	cmnmi.w	r0, #0
 800105e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001060 <__aeabi_fcmpeq>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff fff4 	bl	8001050 <__aeabi_cfcmpeq>
 8001068:	bf0c      	ite	eq
 800106a:	2001      	moveq	r0, #1
 800106c:	2000      	movne	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmplt>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffea 	bl	8001050 <__aeabi_cfcmpeq>
 800107c:	bf34      	ite	cc
 800107e:	2001      	movcc	r0, #1
 8001080:	2000      	movcs	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmple>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffe0 	bl	8001050 <__aeabi_cfcmpeq>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpge>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffd2 	bl	8001048 <__aeabi_cfrcmple>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpgt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffc8 	bl	8001048 <__aeabi_cfrcmple>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_f2iz>:
 80010c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010cc:	d30f      	bcc.n	80010ee <__aeabi_f2iz+0x2a>
 80010ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d6:	d90d      	bls.n	80010f4 <__aeabi_f2iz+0x30>
 80010d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e4:	fa23 f002 	lsr.w	r0, r3, r2
 80010e8:	bf18      	it	ne
 80010ea:	4240      	negne	r0, r0
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr
 80010f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f8:	d101      	bne.n	80010fe <__aeabi_f2iz+0x3a>
 80010fa:	0242      	lsls	r2, r0, #9
 80010fc:	d105      	bne.n	800110a <__aeabi_f2iz+0x46>
 80010fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001102:	bf08      	it	eq
 8001104:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001108:	4770      	bx	lr
 800110a:	f04f 0000 	mov.w	r0, #0
 800110e:	4770      	bx	lr

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fd77 	bl	8000c10 <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff faed 	bl	800072c <__aeabi_dmul>
 8001152:	f7ff fdc3 	bl	8000cdc <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff fa6e 	bl	8000638 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff fae4 	bl	800072c <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7ff f926 	bl	80003bc <__aeabi_dsub>
 8001170:	f7ff fdb4 	bl	8000cdc <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <InitMCC>:
extern int speedD;
extern int speedG;


void InitMCC()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <InitMCC+0x2c>)
 8001188:	f005 febc 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800118c:	2104      	movs	r1, #4
 800118e:	4807      	ldr	r0, [pc, #28]	; (80011ac <InitMCC+0x2c>)
 8001190:	f005 feb8 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001194:	2108      	movs	r1, #8
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <InitMCC+0x2c>)
 8001198:	f005 feb4 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800119c:	210c      	movs	r1, #12
 800119e:	4803      	ldr	r0, [pc, #12]	; (80011ac <InitMCC+0x2c>)
 80011a0:	f005 feb0 	bl	8006f04 <HAL_TIM_PWM_Start>
	Stop();
 80011a4:	f000 f888 	bl	80012b8 <Stop>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200009e4 	.word	0x200009e4

080011b0 <Avancer>:

void Avancer(int vitesse)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2bc8      	cmp	r3, #200	; 0xc8
 80011bc:	dc02      	bgt.n	80011c4 <Avancer+0x14>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da01      	bge.n	80011c8 <Avancer+0x18>
 80011c4:	f001 ff0c 	bl	8002fe0 <Error_Handler>
	TIM1->CCR1=vitesse;
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <Avancer+0x38>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=0;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <Avancer+0x38>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=vitesse;
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <Avancer+0x38>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4=0;
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <Avancer+0x38>)
 80011dc:	2200      	movs	r2, #0
 80011de:	641a      	str	r2, [r3, #64]	; 0x40

}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40012c00 	.word	0x40012c00

080011ec <AvancerPI>:

void AvancerPI(int moteur, int vitesse)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2bc8      	cmp	r3, #200	; 0xc8
 80011fa:	dc02      	bgt.n	8001202 <AvancerPI+0x16>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da01      	bge.n	8001206 <AvancerPI+0x1a>
 8001202:	f001 feed 	bl	8002fe0 <Error_Handler>
	if (moteur)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <AvancerPI+0x2e>
	{
		TIM1->CCR1=0;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <AvancerPI+0x44>)
 800120e:	2200      	movs	r2, #0
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=vitesse;
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <AvancerPI+0x44>)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6393      	str	r3, [r2, #56]	; 0x38
	else
	{
		TIM1->CCR3=0;
		TIM1->CCR4=vitesse;
	}
}
 8001218:	e005      	b.n	8001226 <AvancerPI+0x3a>
		TIM1->CCR3=0;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <AvancerPI+0x44>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <AvancerPI+0x44>)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40012c00 	.word	0x40012c00

08001234 <Reculer>:

void Reculer(int vitesse)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2bc8      	cmp	r3, #200	; 0xc8
 8001240:	dc02      	bgt.n	8001248 <Reculer+0x14>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	da01      	bge.n	800124c <Reculer+0x18>
 8001248:	f001 feca 	bl	8002fe0 <Error_Handler>
	TIM1->CCR1=0;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Reculer+0x38>)
 800124e:	2200      	movs	r2, #0
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=vitesse;
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <Reculer+0x38>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3=0;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <Reculer+0x38>)
 800125a:	2200      	movs	r2, #0
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=vitesse;
 800125e:	4a03      	ldr	r2, [pc, #12]	; (800126c <Reculer+0x38>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40012c00 	.word	0x40012c00

08001270 <ReculerPI>:

void ReculerPI(int moteur, int vitesse)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2bc8      	cmp	r3, #200	; 0xc8
 800127e:	dc02      	bgt.n	8001286 <ReculerPI+0x16>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	da01      	bge.n	800128a <ReculerPI+0x1a>
 8001286:	f001 feab 	bl	8002fe0 <Error_Handler>
	if (moteur)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <ReculerPI+0x2e>
	{
		TIM1->CCR1=vitesse;
 8001290:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <ReculerPI+0x44>)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <ReculerPI+0x44>)
 8001298:	2200      	movs	r2, #0
 800129a:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		TIM1->CCR3=vitesse;
		TIM1->CCR4=0;
	}
}
 800129c:	e005      	b.n	80012aa <ReculerPI+0x3a>
		TIM1->CCR3=vitesse;
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <ReculerPI+0x44>)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CCR4=0;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <ReculerPI+0x44>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40012c00 	.word	0x40012c00

080012b8 <Stop>:

void Stop(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	TIM1->CCR1=MAX_ARR;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <Stop+0x24>)
 80012be:	22c8      	movs	r2, #200	; 0xc8
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=MAX_ARR;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <Stop+0x24>)
 80012c4:	22c8      	movs	r2, #200	; 0xc8
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3=MAX_ARR;
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <Stop+0x24>)
 80012ca:	22c8      	movs	r2, #200	; 0xc8
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4=MAX_ARR;
 80012ce:	4b03      	ldr	r3, [pc, #12]	; (80012dc <Stop+0x24>)
 80012d0:	22c8      	movs	r2, #200	; 0xc8
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40012c00 	.word	0x40012c00

080012e0 <Tourner>:

//sens = 1 tourner a droite
//sens = 0 tourner a gauche
void Tourner(int sens, int vitesse)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	if(vitesse > MAX_ARR || vitesse < 0) Error_Handler();
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2bc8      	cmp	r3, #200	; 0xc8
 80012ee:	dc02      	bgt.n	80012f6 <Tourner+0x16>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da01      	bge.n	80012fa <Tourner+0x1a>
 80012f6:	f001 fe73 	bl	8002fe0 <Error_Handler>
	if(sens)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00c      	beq.n	800131a <Tourner+0x3a>
	{
		TIM1->CCR1=vitesse;
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <Tourner+0x68>)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=0;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <Tourner+0x68>)
 8001308:	2200      	movs	r2, #0
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <Tourner+0x68>)
 800130e:	2200      	movs	r2, #0
 8001310:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4=vitesse;
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <Tourner+0x68>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
			TIM1->CCR3=vitesse;
			TIM1->CCR4=0;
	}
	else Error_Handler();

}
 8001318:	e011      	b.n	800133e <Tourner+0x5e>
	else if(!sens)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10c      	bne.n	800133a <Tourner+0x5a>
		    TIM1->CCR1=0;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <Tourner+0x68>)
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=vitesse;
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <Tourner+0x68>)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3=vitesse;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <Tourner+0x68>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR4=0;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <Tourner+0x68>)
 8001334:	2200      	movs	r2, #0
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001338:	e001      	b.n	800133e <Tourner+0x5e>
	else Error_Handler();
 800133a:	f001 fe51 	bl	8002fe0 <Error_Handler>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40012c00 	.word	0x40012c00

0800134c <ReadEncodeur>:

void ReadEncodeur()
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	tickD = Mid_Period_TIM2 - (TIM2->CNT);
 8001350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 800135a:	337f      	adds	r3, #127	; 0x7f
 800135c:	461a      	mov	r2, r3
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <ReadEncodeur+0x40>)
 8001360:	601a      	str	r2, [r3, #0]
	TIM2->CNT = Mid_Period_TIM2;
 8001362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001366:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
	tickG = (TIM5->CNT) - Mid_Period_TIM5;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <ReadEncodeur+0x44>)
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001374:	3b7f      	subs	r3, #127	; 0x7f
 8001376:	461a      	mov	r2, r3
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <ReadEncodeur+0x48>)
 800137a:	601a      	str	r2, [r3, #0]
	TIM5->CNT = Mid_Period_TIM5;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <ReadEncodeur+0x44>)
 800137e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000908 	.word	0x20000908
 8001390:	40000c00 	.word	0x40000c00
 8001394:	20000910 	.word	0x20000910

08001398 <PIController_Init>:
 * @param struct pi
 *
 * @return None
 */
void PIController_Init(PIController *pi)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

	pi->integrator = 0.0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
	pi->prevError  = 0.0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]

	pi->out = 0.0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

	pi->Kp = 1.0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013be:	601a      	str	r2, [r3, #0]
	pi->Ki = 0.5;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80013c6:	605a      	str	r2, [r3, #4]

	pi->limMin_output = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
	pi->limMax_output = MAX_ARR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <PIController_Init+0x74>)
 80013d4:	60da      	str	r2, [r3, #12]

		/* Integrator limits */
	pi->limMin_integrator = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
	pi->limMax_integrator = MAX_ARR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <PIController_Init+0x74>)
 80013e2:	615a      	str	r2, [r3, #20]

		/* Sample time (in seconds) */
	pi->T = 0.1; // 10Hz frequence Tim1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <PIController_Init+0x78>)
 80013e8:	619a      	str	r2, [r3, #24]

		/* Controller "memory" */
	pi->integrator = 0.0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
	pi->prevError = 0.0;		/* Required for integrator */
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]

		/* Controller output */
	pi->out = 0.0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	43480000 	.word	0x43480000
 8001410:	3dcccccd 	.word	0x3dcccccd

08001414 <PIController_Update>:
 * @param measurement
 *
 * @return None
 */
float PIController_Update(PIController *pi, float consigne, float measurement)
{
 8001414:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]

    float error = consigne - measurement;
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f7ff fccd 	bl	8000dc4 <__aeabi_fsub>
 800142a:	4603      	mov	r3, r0
 800142c:	617b      	str	r3, [r7, #20]

    float proportional = pi->Kp * error;	//Proportional
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	6978      	ldr	r0, [r7, #20]
 8001436:	f7fe ff09 	bl	800024c <__aeabi_fmul>
 800143a:	4603      	mov	r3, r0
 800143c:	613b      	str	r3, [r7, #16]

    pi->integrator = pi->integrator + 0.5 * pi->Ki * pi->T * (error + pi->prevError);	//Integrator
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f91a 	bl	800067c <__aeabi_f2d>
 8001448:	4604      	mov	r4, r0
 800144a:	460d      	mov	r5, r1
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f913 	bl	800067c <__aeabi_f2d>
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <PIController_Update+0x154>)
 800145c:	f7ff f966 	bl	800072c <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4690      	mov	r8, r2
 8001466:	4699      	mov	r9, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f905 	bl	800067c <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4640      	mov	r0, r8
 8001478:	4649      	mov	r1, r9
 800147a:	f7ff f957 	bl	800072c <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4690      	mov	r8, r2
 8001484:	4699      	mov	r9, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	6979      	ldr	r1, [r7, #20]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc9b 	bl	8000dc8 <__addsf3>
 8001492:	4603      	mov	r3, r0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f8f1 	bl	800067c <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4640      	mov	r0, r8
 80014a0:	4649      	mov	r1, r9
 80014a2:	f7ff f943 	bl	800072c <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe ff87 	bl	80003c0 <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fc2f 	bl	8000d1c <__aeabi_d2f>
 80014be:	4602      	mov	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	61da      	str	r2, [r3, #28]

    if (pi->integrator > pi->limMax_integrator) pi->integrator = pi->limMax_integrator; //anti-wind-up par ecretage
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4610      	mov	r0, r2
 80014d0:	f7ff fdee 	bl	80010b0 <__aeabi_fcmpgt>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <PIController_Update+0xd0>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	61da      	str	r2, [r3, #28]
 80014e2:	e00e      	b.n	8001502 <PIController_Update+0xee>
    else if (pi->integrator < pi->limMin_integrator) pi->integrator = pi->limMin_integrator;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	69da      	ldr	r2, [r3, #28]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f7ff fdc0 	bl	8001074 <__aeabi_fcmplt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <PIController_Update+0xee>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	61da      	str	r2, [r3, #28]


    pi->out = proportional + pi->integrator;	//Output
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fc5d 	bl	8000dc8 <__addsf3>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	625a      	str	r2, [r3, #36]	; 0x24

    if (pi->out > pi->limMax_output) pi->out = pi->limMax_output;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff fdc5 	bl	80010b0 <__aeabi_fcmpgt>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <PIController_Update+0x122>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
 8001534:	e00e      	b.n	8001554 <PIController_Update+0x140>
    else if (pi->out < pi->limMin_output) pi->out = pi->limMin_output;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	4619      	mov	r1, r3
 8001540:	4610      	mov	r0, r2
 8001542:	f7ff fd97 	bl	8001074 <__aeabi_fcmplt>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <PIController_Update+0x140>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

    pi->prevError       = error;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	621a      	str	r2, [r3, #32]

    return pi->out;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001568:	3fe00000 	.word	0x3fe00000

0800156c <raspGetChar>:
extern uint8_t uartTxBufferRasp[UART_TX_BUFFER_SIZE];
extern uint8_t stringSizeRasp;


uint8_t raspGetChar(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	71fb      	strb	r3, [r7, #7]
	char* token;

	cmdBufferRasp[idxCmdRasp++] = uartRxBufferRasp[0];
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <raspGetChar+0x9c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	b2d1      	uxtb	r1, r2
 800157e:	4a22      	ldr	r2, [pc, #136]	; (8001608 <raspGetChar+0x9c>)
 8001580:	7011      	strb	r1, [r2, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <raspGetChar+0xa0>)
 8001586:	7819      	ldrb	r1, [r3, #0]
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <raspGetChar+0xa4>)
 800158a:	5499      	strb	r1, [r3, r2]
	HAL_UART_Transmit(&huart2, uartRxBufferRasp, 1, HAL_MAX_DELAY);
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	2201      	movs	r2, #1
 8001592:	491e      	ldr	r1, [pc, #120]	; (800160c <raspGetChar+0xa0>)
 8001594:	481f      	ldr	r0, [pc, #124]	; (8001614 <raspGetChar+0xa8>)
 8001596:	f006 fe49 	bl	800822c <HAL_UART_Transmit>

	if(idxCmdRasp == NB_CARACT)
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <raspGetChar+0x9c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	d12d      	bne.n	80015fe <raspGetChar+0x92>
		{
			HAL_UART_Transmit(&huart2, newlineRasp, sizeof(newlineRasp), HAL_MAX_DELAY);
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	2203      	movs	r2, #3
 80015a8:	491b      	ldr	r1, [pc, #108]	; (8001618 <raspGetChar+0xac>)
 80015aa:	481a      	ldr	r0, [pc, #104]	; (8001614 <raspGetChar+0xa8>)
 80015ac:	f006 fe3e 	bl	800822c <HAL_UART_Transmit>
			cmdBufferRasp[idxCmdRasp] = '\0';
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <raspGetChar+0x9c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <raspGetChar+0xa4>)
 80015b8:	2100      	movs	r1, #0
 80015ba:	5499      	strb	r1, [r3, r2]
			argcRasp = 0;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <raspGetChar+0xb0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
			token = (char*)strtok(cmdBufferRasp, " ");
 80015c2:	4917      	ldr	r1, [pc, #92]	; (8001620 <raspGetChar+0xb4>)
 80015c4:	4812      	ldr	r0, [pc, #72]	; (8001610 <raspGetChar+0xa4>)
 80015c6:	f009 f8a5 	bl	800a714 <strtok>
 80015ca:	6038      	str	r0, [r7, #0]
			while(token!=NULL){
 80015cc:	e00f      	b.n	80015ee <raspGetChar+0x82>
				argvRasp[argcRasp++] = token;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <raspGetChar+0xb0>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	b2d1      	uxtb	r1, r2
 80015d6:	4a11      	ldr	r2, [pc, #68]	; (800161c <raspGetChar+0xb0>)
 80015d8:	7011      	strb	r1, [r2, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <raspGetChar+0xb8>)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				token = (char*)strtok(NULL, " ");
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <raspGetChar+0xb4>)
 80015e6:	2000      	movs	r0, #0
 80015e8:	f009 f894 	bl	800a714 <strtok>
 80015ec:	6038      	str	r0, [r7, #0]
			while(token!=NULL){
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ec      	bne.n	80015ce <raspGetChar+0x62>
			}

			idxCmdRasp = 0;
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <raspGetChar+0x9c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
			newCmdReady = 1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
		}

	return newCmdReady;
 80015fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000840 	.word	0x20000840
 800160c:	20000be0 	.word	0x20000be0
 8001610:	20000800 	.word	0x20000800
 8001614:	20000c28 	.word	0x20000c28
 8001618:	20000020 	.word	0x20000020
 800161c:	20000868 	.word	0x20000868
 8001620:	0800d788 	.word	0x0800d788
 8001624:	20000844 	.word	0x20000844

08001628 <raspErrorReceive>:

void raspErrorReceive(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, errlect, sizeof(errlect), HAL_MAX_DELAY);
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	221d      	movs	r2, #29
 8001632:	4903      	ldr	r1, [pc, #12]	; (8001640 <raspErrorReceive+0x18>)
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <raspErrorReceive+0x1c>)
 8001636:	f006 fdf9 	bl	800822c <HAL_UART_Transmit>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000000 	.word	0x20000000
 8001644:	20000c28 	.word	0x20000c28

08001648 <raspExec>:
/**
  * @brief  Call function depends of the value of argcRasp and argvRasp
  * @retval None
  */
void raspExec(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af02      	add	r7, sp, #8
	if(strcmp(argvRasp[0],"FM")==0 && strcmp(argvRasp[5],"RT")==0)
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <raspExec+0x94>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4923      	ldr	r1, [pc, #140]	; (80016e0 <raspExec+0x98>)
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fde7 	bl	8000228 <strcmp>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d136      	bne.n	80016ce <raspExec+0x86>
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <raspExec+0x94>)
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	491f      	ldr	r1, [pc, #124]	; (80016e4 <raspExec+0x9c>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fdde 	bl	8000228 <strcmp>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d12d      	bne.n	80016ce <raspExec+0x86>
	{
		action = atoi(argvRasp[1]);
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <raspExec+0x94>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	f007 fac2 	bl	8008c00 <atoi>
 800167c:	4603      	mov	r3, r0
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <raspExec+0xa0>)
 8001680:	6013      	str	r3, [r2, #0]
		sens = atoi(argvRasp[2]);
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <raspExec+0x94>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	4618      	mov	r0, r3
 8001688:	f007 faba 	bl	8008c00 <atoi>
 800168c:	4603      	mov	r3, r0
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <raspExec+0xa4>)
 8001690:	6013      	str	r3, [r2, #0]
		couleur = atoi(argvRasp[3]);
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <raspExec+0x94>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	4618      	mov	r0, r3
 8001698:	f007 fab2 	bl	8008c00 <atoi>
 800169c:	4603      	mov	r3, r0
 800169e:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <raspExec+0xa8>)
 80016a0:	6013      	str	r3, [r2, #0]
		TOF_dist = atoi(argvRasp[4]);
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <raspExec+0x94>)
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f007 faaa 	bl	8008c00 <atoi>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <raspExec+0xac>)
 80016b0:	6013      	str	r3, [r2, #0]
		printf("%d %d %d %d\r\n", action, sens, couleur, TOF_dist);
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <raspExec+0xa0>)
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <raspExec+0xa4>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <raspExec+0xa8>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <raspExec+0xac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4603      	mov	r3, r0
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <raspExec+0xb0>)
 80016c8:	f008 f94c 	bl	8009964 <iprintf>
 80016cc:	e002      	b.n	80016d4 <raspExec+0x8c>
	}

	else{
		raspErrorReceive();
 80016ce:	f7ff ffab 	bl	8001628 <raspErrorReceive>
	}

}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000844 	.word	0x20000844
 80016e0:	0800d78c 	.word	0x0800d78c
 80016e4:	0800d790 	.word	0x0800d790
 80016e8:	2000010c 	.word	0x2000010c
 80016ec:	20000918 	.word	0x20000918
 80016f0:	2000091c 	.word	0x2000091c
 80016f4:	20000920 	.word	0x20000920
 80016f8:	0800d794 	.word	0x0800d794

080016fc <ControlServo>:
 *
 * @param angle : must be between 0 and 1024-1
 *
 * @output : 0 if all is OK, 1 if angle is not an allowed value
 */
int ControlServo(int angle){
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	if ((angle <= SERVO_MAX_VALUE) && (angle >= SERVO_MIN_VALUE))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f640 0298 	movw	r2, #2200	; 0x898
 800170a:	4293      	cmp	r3, r2
 800170c:	dc08      	bgt.n	8001720 <ControlServo+0x24>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001714:	db04      	blt.n	8001720 <ControlServo+0x24>
	{
		TIM3 -> CCR1 = angle;
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <ControlServo+0x30>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6353      	str	r3, [r2, #52]	; 0x34
		return 0;
 800171c:	2300      	movs	r3, #0
 800171e:	e000      	b.n	8001722 <ControlServo+0x26>
	}
	else
	{
		return 1;
 8001720:	2301      	movs	r3, #1
	}
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40000400 	.word	0x40000400

08001730 <Debut_Test>:
#define DELAY 1000
#define OFFSET_OUVERTURE_PINCE 1150
#define MM2TICK 5//convert distance in mm in encoder tick variable (d=2.pi.(75/2)=235.6 et inc = 16*75 = 1200 ==> 1200/235.6 = 5

void Debut_Test()
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	start = (start+1)%2;
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <Debut_Test+0x34>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	bfb8      	it	lt
 8001742:	425b      	neglt	r3, r3
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <Debut_Test+0x34>)
 8001746:	6013      	str	r3, [r2, #0]
	X_odo = 0;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <Debut_Test+0x38>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
	Y_odo = 0;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <Debut_Test+0x3c>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
	dist = 0;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <Debut_Test+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	2000086c 	.word	0x2000086c
 8001768:	20000900 	.word	0x20000900
 800176c:	20000904 	.word	0x20000904
 8001770:	200008fc 	.word	0x200008fc

08001774 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <MX_ADC1_Init+0x74>)
 8001786:	4a19      	ldr	r2, [pc, #100]	; (80017ec <MX_ADC1_Init+0x78>)
 8001788:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_ADC1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_ADC1_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MX_ADC1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_ADC1_Init+0x74>)
 800179e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_ADC1_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_ADC1_Init+0x74>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_ADC1_Init+0x74>)
 80017b2:	f002 fd83 	bl	80042bc <HAL_ADC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80017bc:	f001 fc10 	bl	8002fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017c0:	2304      	movs	r3, #4
 80017c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_ADC1_Init+0x74>)
 80017d2:	f002 fe5d 	bl	8004490 <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017dc:	f001 fc00 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000870 	.word	0x20000870
 80017ec:	40012400 	.word	0x40012400

080017f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <HAL_ADC_MspInit+0x98>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d137      	bne.n	8001880 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_ADC_MspInit+0x9c>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_ADC_MspInit+0x9c>)
 8001816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_ADC_MspInit+0x9c>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_ADC_MspInit+0x9c>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_ADC_MspInit+0x9c>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_ADC_MspInit+0x9c>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_ADC_MspInit+0x9c>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_ADC_MspInit+0x9c>)
 8001846:	f043 0308 	orr.w	r3, r3, #8
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_ADC_MspInit+0x9c>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = MOTOR_1_ADC1_CURRENT_SENSOR_Pin|MOTOR_2_ADC1_CURRENT_SENSOR_Pin|BDT_1_Pin|BDT_2_Pin;
 8001858:	23f0      	movs	r3, #240	; 0xf0
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185c:	2303      	movs	r3, #3
 800185e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	4619      	mov	r1, r3
 8001866:	480a      	ldr	r0, [pc, #40]	; (8001890 <HAL_ADC_MspInit+0xa0>)
 8001868:	f003 f99c 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BDT_3_Pin|BDT_4_Pin;
 800186c:	2303      	movs	r3, #3
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001870:	2303      	movs	r3, #3
 8001872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 0318 	add.w	r3, r7, #24
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <HAL_ADC_MspInit+0xa4>)
 800187c:	f003 f992 	bl	8004ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001880:	bf00      	nop
 8001882:	3728      	adds	r7, #40	; 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40012400 	.word	0x40012400
 800188c:	40021000 	.word	0x40021000
 8001890:	40010800 	.word	0x40010800
 8001894:	40010c00 	.word	0x40010c00

08001898 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 fd09 	bl	80022b8 <initSensor>
 80018a6:	4603      	mov	r3, r0

} /* tofInit() */
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(uint8_t ucAddr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp[2];

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 80018ba:	1dfa      	adds	r2, r7, #7
 80018bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	2152      	movs	r1, #82	; 0x52
 80018c6:	480c      	ldr	r0, [pc, #48]	; (80018f8 <readReg16+0x48>)
 80018c8:	f003 fd8a 	bl	80053e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, ucTemp, 2, 1000);
 80018cc:	f107 020c 	add.w	r2, r7, #12
 80018d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2302      	movs	r3, #2
 80018d8:	2153      	movs	r1, #83	; 0x53
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <readReg16+0x48>)
 80018dc:	f003 fe7e 	bl	80055dc <HAL_I2C_Master_Receive>

	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 80018e0:	7b3b      	ldrb	r3, [r7, #12]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	7b7b      	ldrb	r3, [r7, #13]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	b29b      	uxth	r3, r3
} /* readReg16() */
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200008a8 	.word	0x200008a8

080018fc <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(uint8_t ucAddr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp;

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001906:	1dfa      	adds	r2, r7, #7
 8001908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	2152      	movs	r1, #82	; 0x52
 8001912:	4809      	ldr	r0, [pc, #36]	; (8001938 <readReg+0x3c>)
 8001914:	f003 fd64 	bl	80053e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8001918:	f107 020f 	add.w	r2, r7, #15
 800191c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	2153      	movs	r1, #83	; 0x53
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <readReg+0x3c>)
 8001928:	f003 fe58 	bl	80055dc <HAL_I2C_Master_Receive>
	return ucTemp;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200008a8 	.word	0x200008a8

0800193c <readMulti>:

static void readMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af02      	add	r7, sp, #8
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	4613      	mov	r3, r2
 800194a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 800194c:	1dfa      	adds	r2, r7, #7
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2301      	movs	r3, #1
 8001956:	2152      	movs	r1, #82	; 0x52
 8001958:	4807      	ldr	r0, [pc, #28]	; (8001978 <readMulti+0x3c>)
 800195a:	f003 fd41 	bl	80053e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, pBuf, iCount, 1000);
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001964:	9200      	str	r2, [sp, #0]
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	2153      	movs	r1, #83	; 0x53
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <readMulti+0x3c>)
 800196c:	f003 fe36 	bl	80055dc <HAL_I2C_Master_Receive>
} /* readMulti() */
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200008a8 	.word	0x200008a8

0800197c <writeMulti>:

static void writeMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 800197c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001980:	b087      	sub	sp, #28
 8001982:	af02      	add	r7, sp, #8
 8001984:	4603      	mov	r3, r0
 8001986:	6039      	str	r1, [r7, #0]
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	4613      	mov	r3, r2
 800198c:	80bb      	strh	r3, [r7, #4]
 800198e:	466b      	mov	r3, sp
 8001990:	461e      	mov	r6, r3
	uint8_t ucTemp[iCount+1];
 8001992:	88bb      	ldrh	r3, [r7, #4]
 8001994:	1c59      	adds	r1, r3, #1
 8001996:	1e4b      	subs	r3, r1, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	460a      	mov	r2, r1
 800199c:	2300      	movs	r3, #0
 800199e:	4690      	mov	r8, r2
 80019a0:	4699      	mov	r9, r3
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019b6:	460a      	mov	r2, r1
 80019b8:	2300      	movs	r3, #0
 80019ba:	4614      	mov	r4, r2
 80019bc:	461d      	mov	r5, r3
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	00eb      	lsls	r3, r5, #3
 80019c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019cc:	00e2      	lsls	r2, r4, #3
 80019ce:	460b      	mov	r3, r1
 80019d0:	3307      	adds	r3, #7
 80019d2:	08db      	lsrs	r3, r3, #3
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	ebad 0d03 	sub.w	sp, sp, r3
 80019da:	ab02      	add	r3, sp, #8
 80019dc:	3300      	adds	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]

	ucTemp[0] = ucAddr;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	701a      	strb	r2, [r3, #0]
	memcpy(&ucTemp[1], pBuf, iCount);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3301      	adds	r3, #1
 80019ea:	88ba      	ldrh	r2, [r7, #4]
 80019ec:	6839      	ldr	r1, [r7, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f007 f934 	bl	8008c5c <memcpy>
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, iCount+1, 1000);
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	2152      	movs	r1, #82	; 0x52
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <writeMulti+0x9c>)
 8001a06:	f003 fceb 	bl	80053e0 <HAL_I2C_Master_Transmit>
 8001a0a:	46b5      	mov	sp, r6
} /* writeMulti() */
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a16:	bf00      	nop
 8001a18:	200008a8 	.word	0x200008a8

08001a1c <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(uint8_t ucAddr, uint16_t usValue)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4603      	mov	r3, r0
 8001a24:	460a      	mov	r2, r1
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp[4];

	ucTemp[0] = ucAddr;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (uint8_t)(usValue >> 8); // MSB first
 8001a30:	88bb      	ldrh	r3, [r7, #4]
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (uint8_t)usValue;
 8001a3a:	88bb      	ldrh	r3, [r7, #4]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 3, 1000);
 8001a40:	f107 020c 	add.w	r2, r7, #12
 8001a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	2152      	movs	r1, #82	; 0x52
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <writeReg16+0x40>)
 8001a50:	f003 fcc6 	bl	80053e0 <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200008a8 	.word	0x200008a8

08001a60 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(uint8_t ucAddr, uint8_t ucValue)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	4603      	mov	r3, r0
 8001a68:	460a      	mov	r2, r1
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	71bb      	strb	r3, [r7, #6]
	uint8_t ucTemp[2];

	ucTemp[0] = ucAddr;
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 8001a74:	79bb      	ldrb	r3, [r7, #6]
 8001a76:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 2, 1000);
 8001a78:	f107 020c 	add.w	r2, r7, #12
 8001a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2302      	movs	r3, #2
 8001a84:	2152      	movs	r1, #82	; 0x52
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <writeReg+0x34>)
 8001a88:	f003 fcaa 	bl	80053e0 <HAL_I2C_Master_Transmit>
} /* writeReg() */
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200008a8 	.word	0x200008a8

08001a98 <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(uint8_t *ucList)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = *ucList++; // count is the first element in the list
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	73fb      	strb	r3, [r7, #15]


	while (ucCount)
 8001aaa:	e00e      	b.n	8001aca <writeRegList+0x32>
	{
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucList, 2, 1000);
 8001aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	2152      	movs	r1, #82	; 0x52
 8001ab8:	4808      	ldr	r0, [pc, #32]	; (8001adc <writeRegList+0x44>)
 8001aba:	f003 fc91 	bl	80053e0 <HAL_I2C_Master_Transmit>
		ucList += 2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	607b      	str	r3, [r7, #4]
		ucCount--;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ed      	bne.n	8001aac <writeRegList+0x14>
	}
} /* writeRegList() */
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200008a8 	.word	0x200008a8

08001ae0 <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(uint8_t *pCount, uint8_t *pTypeIsAperture)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
int iTimeout;
uint8_t ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 8001aea:	482d      	ldr	r0, [pc, #180]	; (8001ba0 <getSpadInfo+0xc0>)
 8001aec:	f7ff ffd4 	bl	8001a98 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001af0:	2083      	movs	r0, #131	; 0x83
 8001af2:	f7ff ff03 	bl	80018fc <readReg>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4619      	mov	r1, r3
 8001b00:	2083      	movs	r0, #131	; 0x83
 8001b02:	f7ff ffad 	bl	8001a60 <writeReg>
  writeRegList(ucSPAD1);
 8001b06:	4827      	ldr	r0, [pc, #156]	; (8001ba4 <getSpadInfo+0xc4>)
 8001b08:	f7ff ffc6 	bl	8001a98 <writeRegList>
  iTimeout = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 8001b10:	e00b      	b.n	8001b2a <getSpadInfo+0x4a>
  {
    if (readReg(0x83) != 0x00) break;
 8001b12:	2083      	movs	r0, #131	; 0x83
 8001b14:	f7ff fef2 	bl	80018fc <readReg>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <getSpadInfo+0x52>
    iTimeout++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3301      	adds	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 8001b24:	2005      	movs	r0, #5
 8001b26:	f002 fba5 	bl	8004274 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b31      	cmp	r3, #49	; 0x31
 8001b2e:	ddf0      	ble.n	8001b12 <getSpadInfo+0x32>
 8001b30:	e000      	b.n	8001b34 <getSpadInfo+0x54>
    if (readReg(0x83) != 0x00) break;
 8001b32:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b32      	cmp	r3, #50	; 0x32
 8001b38:	d101      	bne.n	8001b3e <getSpadInfo+0x5e>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e02b      	b.n	8001b96 <getSpadInfo+0xb6>
  }
  writeReg(0x83,0x01);
 8001b3e:	2101      	movs	r1, #1
 8001b40:	2083      	movs	r0, #131	; 0x83
 8001b42:	f7ff ff8d 	bl	8001a60 <writeReg>
  ucTemp = readReg(0x92);
 8001b46:	2092      	movs	r0, #146	; 0x92
 8001b48:	f7ff fed8 	bl	80018fc <readReg>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2081      	movs	r0, #129	; 0x81
 8001b6c:	f7ff ff78 	bl	8001a60 <writeReg>
  writeReg(0xff,0x06);
 8001b70:	2106      	movs	r1, #6
 8001b72:	20ff      	movs	r0, #255	; 0xff
 8001b74:	f7ff ff74 	bl	8001a60 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 8001b78:	2083      	movs	r0, #131	; 0x83
 8001b7a:	f7ff febf 	bl	80018fc <readReg>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	2083      	movs	r0, #131	; 0x83
 8001b8a:	f7ff ff69 	bl	8001a60 <writeReg>
  writeRegList(ucSPAD2);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <getSpadInfo+0xc8>)
 8001b90:	f7ff ff82 	bl	8001a98 <writeRegList>

  return 1;
 8001b94:	2301      	movs	r3, #1
} /* getSpadInfo() */
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000038 	.word	0x20000038
 8001ba4:	20000044 	.word	0x20000044
 8001ba8:	20000050 	.word	0x20000050

08001bac <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	0a12      	lsrs	r2, r2, #8
 8001bbe:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	b29b      	uxth	r3, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
	...

08001bd4 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460a      	mov	r2, r1
 8001bde:	80fb      	strh	r3, [r7, #6]
 8001be0:	4613      	mov	r3, r2
 8001be2:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001be4:	797b      	ldrb	r3, [r7, #5]
 8001be6:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <timeoutMclksToMicroseconds+0x48>)
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <timeoutMclksToMicroseconds+0x4c>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	099b      	lsrs	r3, r3, #6
 8001bf8:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <timeoutMclksToMicroseconds+0x4c>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	099b      	lsrs	r3, r3, #6
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	003a2f00 	.word	0x003a2f00
 8001c20:	10624dd3 	.word	0x10624dd3

08001c24 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <timeoutMicrosecondsToMclks+0x44>)
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <timeoutMicrosecondsToMclks+0x48>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	099b      	lsrs	r3, r3, #6
 8001c44:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c4c:	fb03 f202 	mul.w	r2, r3, r2
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	085b      	lsrs	r3, r3, #1
 8001c54:	441a      	add	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	003a2f00 	.word	0x003a2f00
 8001c6c:	10624dd3 	.word	0x10624dd3

08001c70 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d018      	beq.n	8001cba <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001c8e:	e005      	b.n	8001c9c <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001c96:	897b      	ldrh	r3, [r7, #10]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f4      	bne.n	8001c90 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001ca6:	897b      	ldrh	r3, [r7, #10]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	e000      	b.n	8001cbc <encodeTimeout+0x4c>
  }
  else { return 0; }
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	6039      	str	r1, [r7, #0]
 8001cd0:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001cd2:	2050      	movs	r0, #80	; 0x50
 8001cd4:	f7ff fe12 	bl	80018fc <readReg>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001ce8:	2046      	movs	r0, #70	; 0x46
 8001cea:	f7ff fe07 	bl	80018fc <readReg>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f7ff ff64 	bl	8001bd4 <timeoutMclksToMicroseconds>
 8001d0c:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001d12:	2051      	movs	r0, #81	; 0x51
 8001d14:	f7ff fdcc 	bl	80018b0 <readReg16>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff46 	bl	8001bac <decodeTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	4610      	mov	r0, r2
 8001d36:	f7ff ff4d 	bl	8001bd4 <timeoutMclksToMicroseconds>
 8001d3a:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8001d40:	2070      	movs	r0, #112	; 0x70
 8001d42:	f7ff fddb 	bl	80018fc <readReg>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001d56:	2071      	movs	r0, #113	; 0x71
 8001d58:	f7ff fdaa 	bl	80018b0 <readReg16>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff24 	bl	8001bac <decodeTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	891a      	ldrh	r2, [r3, #8]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	88db      	ldrh	r3, [r3, #6]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f7ff ff1e 	bl	8001bd4 <timeoutMclksToMicroseconds>
 8001d98:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff fd99 	bl	80018fc <readReg>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8001dd0:	f107 020c 	add.w	r2, r7, #12
 8001dd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff73 	bl	8001cc6 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d15c      	bne.n	8001ea0 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	3b0c      	subs	r3, #12
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d824      	bhi.n	8001e38 <setVcselPulsePeriod+0x90>
 8001dee:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <setVcselPulsePeriod+0x4c>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e11 	.word	0x08001e11
 8001df8:	08001e39 	.word	0x08001e39
 8001dfc:	08001e1b 	.word	0x08001e1b
 8001e00:	08001e39 	.word	0x08001e39
 8001e04:	08001e25 	.word	0x08001e25
 8001e08:	08001e39 	.word	0x08001e39
 8001e0c:	08001e2f 	.word	0x08001e2f
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8001e10:	2118      	movs	r1, #24
 8001e12:	2057      	movs	r0, #87	; 0x57
 8001e14:	f7ff fe24 	bl	8001a60 <writeReg>
        break;
 8001e18:	e010      	b.n	8001e3c <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8001e1a:	2130      	movs	r1, #48	; 0x30
 8001e1c:	2057      	movs	r0, #87	; 0x57
 8001e1e:	f7ff fe1f 	bl	8001a60 <writeReg>
        break;
 8001e22:	e00b      	b.n	8001e3c <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001e24:	2140      	movs	r1, #64	; 0x40
 8001e26:	2057      	movs	r0, #87	; 0x57
 8001e28:	f7ff fe1a 	bl	8001a60 <writeReg>
        break;
 8001e2c:	e006      	b.n	8001e3c <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001e2e:	2150      	movs	r1, #80	; 0x50
 8001e30:	2057      	movs	r0, #87	; 0x57
 8001e32:	f7ff fe15 	bl	8001a60 <writeReg>
        break;
 8001e36:	e001      	b.n	8001e3c <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e0fe      	b.n	800203a <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8001e3c:	2108      	movs	r1, #8
 8001e3e:	2056      	movs	r0, #86	; 0x56
 8001e40:	f7ff fe0e 	bl	8001a60 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001e44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e48:	4619      	mov	r1, r3
 8001e4a:	2050      	movs	r0, #80	; 0x50
 8001e4c:	f7ff fe08 	bl	8001a60 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	79ba      	ldrb	r2, [r7, #6]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fee4 	bl	8001c24 <timeoutMicrosecondsToMclks>
 8001e5c:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8001e5e:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001e60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff04 	bl	8001c70 <encodeTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	2051      	movs	r0, #81	; 0x51
 8001e6e:	f7ff fdd5 	bl	8001a1c <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	79ba      	ldrb	r2, [r7, #6]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fed3 	bl	8001c24 <timeoutMicrosecondsToMclks>
 8001e7e:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001e80:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001e82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e88:	d804      	bhi.n	8001e94 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8001e8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e8c:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	e000      	b.n	8001e96 <setVcselPulsePeriod+0xee>
 8001e94:	23ff      	movs	r3, #255	; 0xff
 8001e96:	4619      	mov	r1, r3
 8001e98:	2046      	movs	r0, #70	; 0x46
 8001e9a:	f7ff fde1 	bl	8001a60 <writeReg>
 8001e9e:	e0b3      	b.n	8002008 <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	f040 80ae 	bne.w	8002004 <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 8001ea8:	79bb      	ldrb	r3, [r7, #6]
 8001eaa:	3b08      	subs	r3, #8
 8001eac:	2b06      	cmp	r3, #6
 8001eae:	f200 8085 	bhi.w	8001fbc <setVcselPulsePeriod+0x214>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <setVcselPulsePeriod+0x110>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ed5 	.word	0x08001ed5
 8001ebc:	08001fbd 	.word	0x08001fbd
 8001ec0:	08001f0f 	.word	0x08001f0f
 8001ec4:	08001fbd 	.word	0x08001fbd
 8001ec8:	08001f49 	.word	0x08001f49
 8001ecc:	08001fbd 	.word	0x08001fbd
 8001ed0:	08001f83 	.word	0x08001f83
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	2048      	movs	r0, #72	; 0x48
 8001ed8:	f7ff fdc2 	bl	8001a60 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001edc:	2108      	movs	r1, #8
 8001ede:	2047      	movs	r0, #71	; 0x47
 8001ee0:	f7ff fdbe 	bl	8001a60 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	2032      	movs	r0, #50	; 0x32
 8001ee8:	f7ff fdba 	bl	8001a60 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001eec:	210c      	movs	r1, #12
 8001eee:	2030      	movs	r0, #48	; 0x30
 8001ef0:	f7ff fdb6 	bl	8001a60 <writeReg>
        writeReg(0xFF, 0x01);
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	20ff      	movs	r0, #255	; 0xff
 8001ef8:	f7ff fdb2 	bl	8001a60 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8001efc:	2130      	movs	r1, #48	; 0x30
 8001efe:	2030      	movs	r0, #48	; 0x30
 8001f00:	f7ff fdae 	bl	8001a60 <writeReg>
        writeReg(0xFF, 0x00);
 8001f04:	2100      	movs	r1, #0
 8001f06:	20ff      	movs	r0, #255	; 0xff
 8001f08:	f7ff fdaa 	bl	8001a60 <writeReg>
        break;
 8001f0c:	e058      	b.n	8001fc0 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8001f0e:	2128      	movs	r1, #40	; 0x28
 8001f10:	2048      	movs	r0, #72	; 0x48
 8001f12:	f7ff fda5 	bl	8001a60 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001f16:	2108      	movs	r1, #8
 8001f18:	2047      	movs	r0, #71	; 0x47
 8001f1a:	f7ff fda1 	bl	8001a60 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001f1e:	2103      	movs	r1, #3
 8001f20:	2032      	movs	r0, #50	; 0x32
 8001f22:	f7ff fd9d 	bl	8001a60 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8001f26:	2109      	movs	r1, #9
 8001f28:	2030      	movs	r0, #48	; 0x30
 8001f2a:	f7ff fd99 	bl	8001a60 <writeReg>
        writeReg(0xFF, 0x01);
 8001f2e:	2101      	movs	r1, #1
 8001f30:	20ff      	movs	r0, #255	; 0xff
 8001f32:	f7ff fd95 	bl	8001a60 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001f36:	2120      	movs	r1, #32
 8001f38:	2030      	movs	r0, #48	; 0x30
 8001f3a:	f7ff fd91 	bl	8001a60 <writeReg>
        writeReg(0xFF, 0x00);
 8001f3e:	2100      	movs	r1, #0
 8001f40:	20ff      	movs	r0, #255	; 0xff
 8001f42:	f7ff fd8d 	bl	8001a60 <writeReg>
        break;
 8001f46:	e03b      	b.n	8001fc0 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8001f48:	2138      	movs	r1, #56	; 0x38
 8001f4a:	2048      	movs	r0, #72	; 0x48
 8001f4c:	f7ff fd88 	bl	8001a60 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001f50:	2108      	movs	r1, #8
 8001f52:	2047      	movs	r0, #71	; 0x47
 8001f54:	f7ff fd84 	bl	8001a60 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001f58:	2103      	movs	r1, #3
 8001f5a:	2032      	movs	r0, #50	; 0x32
 8001f5c:	f7ff fd80 	bl	8001a60 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8001f60:	2108      	movs	r1, #8
 8001f62:	2030      	movs	r0, #48	; 0x30
 8001f64:	f7ff fd7c 	bl	8001a60 <writeReg>
        writeReg(0xFF, 0x01);
 8001f68:	2101      	movs	r1, #1
 8001f6a:	20ff      	movs	r0, #255	; 0xff
 8001f6c:	f7ff fd78 	bl	8001a60 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001f70:	2120      	movs	r1, #32
 8001f72:	2030      	movs	r0, #48	; 0x30
 8001f74:	f7ff fd74 	bl	8001a60 <writeReg>
        writeReg(0xFF, 0x00);
 8001f78:	2100      	movs	r1, #0
 8001f7a:	20ff      	movs	r0, #255	; 0xff
 8001f7c:	f7ff fd70 	bl	8001a60 <writeReg>
        break;
 8001f80:	e01e      	b.n	8001fc0 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001f82:	2148      	movs	r1, #72	; 0x48
 8001f84:	2048      	movs	r0, #72	; 0x48
 8001f86:	f7ff fd6b 	bl	8001a60 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001f8a:	2108      	movs	r1, #8
 8001f8c:	2047      	movs	r0, #71	; 0x47
 8001f8e:	f7ff fd67 	bl	8001a60 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001f92:	2103      	movs	r1, #3
 8001f94:	2032      	movs	r0, #50	; 0x32
 8001f96:	f7ff fd63 	bl	8001a60 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8001f9a:	2107      	movs	r1, #7
 8001f9c:	2030      	movs	r0, #48	; 0x30
 8001f9e:	f7ff fd5f 	bl	8001a60 <writeReg>
        writeReg(0xFF, 0x01);
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	20ff      	movs	r0, #255	; 0xff
 8001fa6:	f7ff fd5b 	bl	8001a60 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001faa:	2120      	movs	r1, #32
 8001fac:	2030      	movs	r0, #48	; 0x30
 8001fae:	f7ff fd57 	bl	8001a60 <writeReg>
        writeReg(0xFF, 0x00);
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	20ff      	movs	r0, #255	; 0xff
 8001fb6:	f7ff fd53 	bl	8001a60 <writeReg>
        break;
 8001fba:	e001      	b.n	8001fc0 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e03c      	b.n	800203a <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001fc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	2070      	movs	r0, #112	; 0x70
 8001fc8:	f7ff fd4a 	bl	8001a60 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	79ba      	ldrb	r2, [r7, #6]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fe26 	bl	8001c24 <timeoutMicrosecondsToMclks>
 8001fd8:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8001fda:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001fdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001fe8:	8a7a      	ldrh	r2, [r7, #18]
 8001fea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fec:	4413      	add	r3, r2
 8001fee:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001ff0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fe3c 	bl	8001c70 <encodeTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	2071      	movs	r0, #113	; 0x71
 8001ffe:	f7ff fd0d 	bl	8001a1c <writeReg16>
 8002002:	e001      	b.n	8002008 <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 8002004:	2300      	movs	r3, #0
 8002006:	e018      	b.n	800203a <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <setVcselPulsePeriod+0x29c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f81b 	bl	8002048 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002012:	2001      	movs	r0, #1
 8002014:	f7ff fc72 	bl	80018fc <readReg>
 8002018:	4603      	mov	r3, r0
 800201a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800201e:	2102      	movs	r1, #2
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff fd1d 	bl	8001a60 <writeReg>
  performSingleRefCalibration(0x0);
 8002026:	2000      	movs	r0, #0
 8002028:	f000 f916 	bl	8002258 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 800202c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002030:	4619      	mov	r1, r3
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff fd14 	bl	8001a60 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 8002038:	2301      	movs	r3, #1
}
 800203a:	4618      	mov	r0, r3
 800203c:	3730      	adds	r7, #48	; 0x30
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200008a4 	.word	0x200008a4

08002048 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b090      	sub	sp, #64	; 0x40
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8002050:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8002054:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 8002056:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800205a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 800205c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002060:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 8002062:	f240 234e 	movw	r3, #590	; 0x24e
 8002066:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 8002068:	f240 23b2 	movw	r3, #690	; 0x2b2
 800206c:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 800206e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002072:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 8002074:	f240 2326 	movw	r3, #550	; 0x226
 8002078:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 800207a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	429a      	cmp	r2, r3
 8002086:	d201      	bcs.n	800208c <setMeasurementTimingBudget+0x44>
 8002088:	2300      	movs	r3, #0
 800208a:	e074      	b.n	8002176 <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 800208c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800208e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002090:	4413      	add	r3, r2
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff fc31 	bl	80018fc <readReg>
 800209a:	4603      	mov	r3, r0
 800209c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 80020a0:	f107 0208 	add.w	r2, r7, #8
 80020a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fe0b 	bl	8001cc6 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 80020b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80020c0:	4413      	add	r3, r2
 80020c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020c4:	4413      	add	r3, r2
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 80020c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80020d8:	4413      	add	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020de:	4413      	add	r3, r2
 80020e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e2:	e00b      	b.n	80020fc <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 80020e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80020f4:	4413      	add	r3, r2
 80020f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020f8:	4413      	add	r3, r2
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80020fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800210c:	4413      	add	r3, r2
 800210e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002110:	4413      	add	r3, r2
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002114:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002118:	2b00      	cmp	r3, #0
 800211a:	da2b      	bge.n	8002174 <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 800211c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800211e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002120:	4413      	add	r3, r2
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8002124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	d901      	bls.n	8002130 <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 800212c:	2300      	movs	r3, #0
 800212e:	e022      	b.n	8002176 <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8002138:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4619      	mov	r1, r3
 800213e:	6a38      	ldr	r0, [r7, #32]
 8002140:	f7ff fd70 	bl	8001c24 <timeoutMicrosecondsToMclks>
 8002144:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 8002146:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002154:	89fa      	ldrh	r2, [r7, #14]
 8002156:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002158:	4413      	add	r3, r2
 800215a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800215c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fd86 	bl	8001c70 <encodeTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	4619      	mov	r1, r3
 8002168:	2071      	movs	r0, #113	; 0x71
 800216a:	f7ff fc57 	bl	8001a1c <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <setMeasurementTimingBudget+0x138>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6013      	str	r3, [r2, #0]
  }
  return 1;
 8002174:	2301      	movs	r3, #1
}
 8002176:	4618      	mov	r0, r3
 8002178:	3740      	adds	r7, #64	; 0x40
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200008a4 	.word	0x200008a4

08002184 <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800218a:	f240 7376 	movw	r3, #1910	; 0x776
 800218e:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 8002190:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002194:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 8002196:	f44f 7325 	mov.w	r3, #660	; 0x294
 800219a:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 800219c:	f240 234e 	movw	r3, #590	; 0x24e
 80021a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 80021a2:	f240 23b2 	movw	r3, #690	; 0x2b2
 80021a6:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 80021a8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80021ac:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 80021ae:	f240 2326 	movw	r3, #550	; 0x226
 80021b2:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80021b4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80021b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021b8:	4413      	add	r3, r2
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 80021bc:	2001      	movs	r0, #1
 80021be:	f7ff fb9d 	bl	80018fc <readReg>
 80021c2:	4603      	mov	r3, r0
 80021c4:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 80021c6:	1d3a      	adds	r2, r7, #4
 80021c8:	7f7b      	ldrb	r3, [r7, #29]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fd7a 	bl	8001cc6 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 80021d2:	7f7b      	ldrb	r3, [r7, #29]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021e0:	4413      	add	r3, r2
 80021e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021e4:	4413      	add	r3, r2
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 80021e8:	7f7b      	ldrb	r3, [r7, #29]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021f6:	4413      	add	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fc:	4413      	add	r3, r2
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002200:	e00a      	b.n	8002218 <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8002202:	7f7b      	ldrb	r3, [r7, #29]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002210:	4413      	add	r3, r2
 8002212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002214:	4413      	add	r3, r2
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002218:	7f7b      	ldrb	r3, [r7, #29]
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	8c3b      	ldrh	r3, [r7, #32]
 8002226:	4413      	add	r3, r2
 8002228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800222a:	4413      	add	r3, r2
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 800222e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002232:	2b00      	cmp	r3, #0
 8002234:	da05      	bge.n	8002242 <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	8bfb      	ldrh	r3, [r7, #30]
 800223a:	4413      	add	r3, r2
 800223c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223e:	4413      	add	r3, r2
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <getMeasurementTimingBudget+0xd0>)
 8002244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002246:	6013      	str	r3, [r2, #0]
  return budget_us;
 8002248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800224a:	4618      	mov	r0, r3
 800224c:	3730      	adds	r7, #48	; 0x30
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200008a4 	.word	0x200008a4

08002258 <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	2000      	movs	r0, #0
 800226e:	f7ff fbf7 	bl	8001a60 <writeReg>

  iTimeout = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002276:	e00a      	b.n	800228e <performSingleRefCalibration+0x36>
  {
    iTimeout++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3301      	adds	r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 800227e:	2005      	movs	r0, #5
 8002280:	f001 fff8 	bl	8004274 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	dd01      	ble.n	800228e <performSingleRefCalibration+0x36>
 800228a:	2300      	movs	r3, #0
 800228c:	e010      	b.n	80022b0 <performSingleRefCalibration+0x58>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 800228e:	2013      	movs	r0, #19
 8002290:	f7ff fb34 	bl	80018fc <readReg>
 8002294:	4603      	mov	r3, r0
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ec      	beq.n	8002278 <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800229e:	2101      	movs	r1, #1
 80022a0:	200b      	movs	r0, #11
 80022a2:	f7ff fbdd 	bl	8001a60 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 80022a6:	2100      	movs	r1, #0
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7ff fbd9 	bl	8001a60 <writeReg>

  return 1;
 80022ae:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 80022c0:	2300      	movs	r3, #0
 80022c2:	75bb      	strb	r3, [r7, #22]
 80022c4:	2300      	movs	r3, #0
 80022c6:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80022c8:	2089      	movs	r0, #137	; 0x89
 80022ca:	f7ff fb17 	bl	80018fc <readReg>
 80022ce:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4619      	mov	r1, r3
 80022d8:	2089      	movs	r0, #137	; 0x89
 80022da:	f7ff fbc1 	bl	8001a60 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 80022de:	486a      	ldr	r0, [pc, #424]	; (8002488 <initSensor+0x1d0>)
 80022e0:	f7ff fbda 	bl	8001a98 <writeRegList>
  stop_variable = readReg(0x91);
 80022e4:	2091      	movs	r0, #145	; 0x91
 80022e6:	f7ff fb09 	bl	80018fc <readReg>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <initSensor+0x1d4>)
 80022f0:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 80022f2:	4867      	ldr	r0, [pc, #412]	; (8002490 <initSensor+0x1d8>)
 80022f4:	f7ff fbd0 	bl	8001a98 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 80022f8:	2060      	movs	r0, #96	; 0x60
 80022fa:	f7ff faff 	bl	80018fc <readReg>
 80022fe:	4603      	mov	r3, r0
 8002300:	f043 0312 	orr.w	r3, r3, #18
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4619      	mov	r1, r3
 8002308:	2060      	movs	r0, #96	; 0x60
 800230a:	f7ff fba9 	bl	8001a60 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 800230e:	2120      	movs	r1, #32
 8002310:	2044      	movs	r0, #68	; 0x44
 8002312:	f7ff fb83 	bl	8001a1c <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8002316:	21ff      	movs	r1, #255	; 0xff
 8002318:	2001      	movs	r0, #1
 800231a:	f7ff fba1 	bl	8001a60 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 800231e:	f107 0215 	add.w	r2, r7, #21
 8002322:	f107 0316 	add.w	r3, r7, #22
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fbd9 	bl	8001ae0 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	2206      	movs	r2, #6
 8002334:	4619      	mov	r1, r3
 8002336:	20b0      	movs	r0, #176	; 0xb0
 8002338:	f7ff fb00 	bl	800193c <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 800233c:	4855      	ldr	r0, [pc, #340]	; (8002494 <initSensor+0x1dc>)
 800233e:	f7ff fbab 	bl	8001a98 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 8002342:	7d7b      	ldrb	r3, [r7, #21]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <initSensor+0x94>
 8002348:	230c      	movs	r3, #12
 800234a:	e000      	b.n	800234e <initSensor+0x96>
 800234c:	2300      	movs	r3, #0
 800234e:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 8002354:	2300      	movs	r3, #0
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	e037      	b.n	80023ca <initSensor+0x112>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	429a      	cmp	r2, r3
 8002360:	db03      	blt.n	800236a <initSensor+0xb2>
 8002362:	7dbb      	ldrb	r3, [r7, #22]
 8002364:	7ffa      	ldrb	r2, [r7, #31]
 8002366:	429a      	cmp	r2, r3
 8002368:	d119      	bne.n	800239e <initSensor+0xe6>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	10db      	asrs	r3, r3, #3
 800236e:	3320      	adds	r3, #32
 8002370:	443b      	add	r3, r7
 8002372:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002376:	b25a      	sxtb	r2, r3
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	b25b      	sxtb	r3, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	b25b      	sxtb	r3, r3
 800238a:	4013      	ands	r3, r2
 800238c:	b25a      	sxtb	r2, r3
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	10db      	asrs	r3, r3, #3
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	3320      	adds	r3, #32
 8002396:	443b      	add	r3, r7
 8002398:	f803 2c14 	strb.w	r2, [r3, #-20]
 800239c:	e012      	b.n	80023c4 <initSensor+0x10c>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	10db      	asrs	r3, r3, #3
 80023a2:	3320      	adds	r3, #32
 80023a4:	443b      	add	r3, r7
 80023a6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80023aa:	461a      	mov	r2, r3
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	fa42 f303 	asr.w	r3, r2, r3
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <initSensor+0x10c>
    {
      ucSPADsEnabled++;
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	3301      	adds	r3, #1
 80023c2:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b2f      	cmp	r3, #47	; 0x2f
 80023ce:	ddc4      	ble.n	800235a <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	2206      	movs	r2, #6
 80023d6:	4619      	mov	r1, r3
 80023d8:	20b0      	movs	r0, #176	; 0xb0
 80023da:	f7ff facf 	bl	800197c <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0],
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 80023de:	482e      	ldr	r0, [pc, #184]	; (8002498 <initSensor+0x1e0>)
 80023e0:	f7ff fb5a 	bl	8001a98 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <initSensor+0x14a>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 80023ea:	210d      	movs	r1, #13
 80023ec:	2044      	movs	r0, #68	; 0x44
 80023ee:	f7ff fb15 	bl	8001a1c <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 80023f2:	2112      	movs	r1, #18
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff fcd7 	bl	8001da8 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 80023fa:	210e      	movs	r1, #14
 80023fc:	2001      	movs	r0, #1
 80023fe:	f7ff fcd3 	bl	8001da8 <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8002402:	2104      	movs	r1, #4
 8002404:	200a      	movs	r0, #10
 8002406:	f7ff fb2b 	bl	8001a60 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800240a:	2084      	movs	r0, #132	; 0x84
 800240c:	f7ff fa76 	bl	80018fc <readReg>
 8002410:	4603      	mov	r3, r0
 8002412:	f023 0310 	bic.w	r3, r3, #16
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4619      	mov	r1, r3
 800241a:	2084      	movs	r0, #132	; 0x84
 800241c:	f7ff fb20 	bl	8001a60 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002420:	2101      	movs	r1, #1
 8002422:	200b      	movs	r0, #11
 8002424:	f7ff fb1c 	bl	8001a60 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 8002428:	f7ff feac 	bl	8002184 <getMeasurementTimingBudget>
 800242c:	4603      	mov	r3, r0
 800242e:	4a1b      	ldr	r2, [pc, #108]	; (800249c <initSensor+0x1e4>)
 8002430:	6013      	str	r3, [r2, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8002432:	21e8      	movs	r1, #232	; 0xe8
 8002434:	2001      	movs	r0, #1
 8002436:	f7ff fb13 	bl	8001a60 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <initSensor+0x1e4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fe02 	bl	8002048 <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8002444:	2101      	movs	r1, #1
 8002446:	2001      	movs	r0, #1
 8002448:	f7ff fb0a 	bl	8001a60 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 800244c:	2040      	movs	r0, #64	; 0x40
 800244e:	f7ff ff03 	bl	8002258 <performSingleRefCalibration>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <initSensor+0x1a4>
 8002458:	2300      	movs	r3, #0
 800245a:	e010      	b.n	800247e <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800245c:	2102      	movs	r1, #2
 800245e:	2001      	movs	r0, #1
 8002460:	f7ff fafe 	bl	8001a60 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff fef7 	bl	8002258 <performSingleRefCalibration>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <initSensor+0x1bc>
 8002470:	2300      	movs	r3, #0
 8002472:	e004      	b.n	800247e <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8002474:	21e8      	movs	r1, #232	; 0xe8
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff faf2 	bl	8001a60 <writeReg>
  return 1;
 800247c:	2301      	movs	r3, #1
} /* initSensor() */
 800247e:	4618      	mov	r0, r3
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000024 	.word	0x20000024
 800248c:	200008a0 	.word	0x200008a0
 8002490:	20000030 	.word	0x20000030
 8002494:	2000005c 	.word	0x2000005c
 8002498:	20000068 	.word	0x20000068
 800249c:	200008a4 	.word	0x200008a4

080024a0 <readRangeContinuousMillimeters>:

uint16_t readRangeContinuousMillimeters(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
int iTimeout = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
uint16_t range;

  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80024aa:	bf00      	nop
 80024ac:	2013      	movs	r0, #19
 80024ae:	f7ff fa25 	bl	80018fc <readReg>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f7      	beq.n	80024ac <readRangeContinuousMillimeters+0xc>

  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  range = readReg16(RESULT_RANGE_STATUS + 10);
 80024bc:	201e      	movs	r0, #30
 80024be:	f7ff f9f7 	bl	80018b0 <readReg16>
 80024c2:	4603      	mov	r3, r0
 80024c4:	807b      	strh	r3, [r7, #2]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80024c6:	2101      	movs	r1, #1
 80024c8:	200b      	movs	r0, #11
 80024ca:	f7ff fac9 	bl	8001a60 <writeReg>

  return range;
 80024ce:	887b      	ldrh	r3, [r7, #2]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <tofReadDistance>:
//
// Read the current distance in mm
//
int tofReadDistance(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
int iTimeout;

  writeReg(0x80, 0x01);
 80024de:	2101      	movs	r1, #1
 80024e0:	2080      	movs	r0, #128	; 0x80
 80024e2:	f7ff fabd 	bl	8001a60 <writeReg>
  writeReg(0xFF, 0x01);
 80024e6:	2101      	movs	r1, #1
 80024e8:	20ff      	movs	r0, #255	; 0xff
 80024ea:	f7ff fab9 	bl	8001a60 <writeReg>
  writeReg(0x00, 0x00);
 80024ee:	2100      	movs	r1, #0
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff fab5 	bl	8001a60 <writeReg>
  writeReg(0x91, stop_variable);
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <tofReadDistance+0x70>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	2091      	movs	r0, #145	; 0x91
 80024fe:	f7ff faaf 	bl	8001a60 <writeReg>
  writeReg(0x00, 0x01);
 8002502:	2101      	movs	r1, #1
 8002504:	2000      	movs	r0, #0
 8002506:	f7ff faab 	bl	8001a60 <writeReg>
  writeReg(0xFF, 0x00);
 800250a:	2100      	movs	r1, #0
 800250c:	20ff      	movs	r0, #255	; 0xff
 800250e:	f7ff faa7 	bl	8001a60 <writeReg>
  writeReg(0x80, 0x00);
 8002512:	2100      	movs	r1, #0
 8002514:	2080      	movs	r0, #128	; 0x80
 8002516:	f7ff faa3 	bl	8001a60 <writeReg>

  writeReg(SYSRANGE_START, 0x01);
 800251a:	2101      	movs	r1, #1
 800251c:	2000      	movs	r0, #0
 800251e:	f7ff fa9f 	bl	8001a60 <writeReg>

  // "Wait until start bit has been cleared"
  iTimeout = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
  while (readReg(SYSRANGE_START) & 0x01)
 8002526:	bf00      	nop
 8002528:	2000      	movs	r0, #0
 800252a:	f7ff f9e7 	bl	80018fc <readReg>
 800252e:	4603      	mov	r3, r0
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f7      	bne.n	8002528 <tofReadDistance+0x50>
	    }
	}

  }

  return readRangeContinuousMillimeters();
 8002538:	f7ff ffb2 	bl	80024a0 <readRangeContinuousMillimeters>
 800253c:	4603      	mov	r3, r0

} /* tofReadDistance() */
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200008a0 	.word	0x200008a0

0800254c <tofGetModel>:

int tofGetModel(int *model, int *revision)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af02      	add	r7, sp, #8
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	uint8_t ucTemp, ucAddr;

	if (model)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d019      	beq.n	8002590 <tofGetModel+0x44>
	{
		ucAddr = REG_IDENTIFICATION_MODEL_ID;
 800255c:	23c0      	movs	r3, #192	; 0xc0
 800255e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8002560:	f107 020e 	add.w	r2, r7, #14
 8002564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2301      	movs	r3, #1
 800256c:	2152      	movs	r1, #82	; 0x52
 800256e:	4819      	ldr	r0, [pc, #100]	; (80025d4 <tofGetModel+0x88>)
 8002570:	f002 ff36 	bl	80053e0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8002574:	f107 020f 	add.w	r2, r7, #15
 8002578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2301      	movs	r3, #1
 8002580:	2153      	movs	r1, #83	; 0x53
 8002582:	4814      	ldr	r0, [pc, #80]	; (80025d4 <tofGetModel+0x88>)
 8002584:	f003 f82a 	bl	80055dc <HAL_I2C_Master_Receive>
		*model = ucTemp;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	461a      	mov	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	601a      	str	r2, [r3, #0]
	}
	if (revision)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d019      	beq.n	80025ca <tofGetModel+0x7e>
	{
		ucAddr = REG_IDENTIFICATION_REVISION_ID;
 8002596:	23c2      	movs	r3, #194	; 0xc2
 8002598:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 800259a:	f107 020e 	add.w	r2, r7, #14
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	2301      	movs	r3, #1
 80025a6:	2152      	movs	r1, #82	; 0x52
 80025a8:	480a      	ldr	r0, [pc, #40]	; (80025d4 <tofGetModel+0x88>)
 80025aa:	f002 ff19 	bl	80053e0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80025ae:	f107 020f 	add.w	r2, r7, #15
 80025b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2301      	movs	r3, #1
 80025ba:	2153      	movs	r1, #83	; 0x53
 80025bc:	4805      	ldr	r0, [pc, #20]	; (80025d4 <tofGetModel+0x88>)
 80025be:	f003 f80d 	bl	80055dc <HAL_I2C_Master_Receive>
		*revision = ucTemp;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	461a      	mov	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	601a      	str	r2, [r3, #0]
	}
	return 1;
 80025ca:	2301      	movs	r3, #1

} /* tofGetModel() */
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200008a8 	.word	0x200008a8

080025d8 <initTof>:
 * @brief Use to initialize the ToF sensor
 *
 * @return
 */
int initTof()
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
	int model = 0, revision = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, SET);
 80025e6:	2201      	movs	r2, #1
 80025e8:	2120      	movs	r1, #32
 80025ea:	4821      	ldr	r0, [pc, #132]	; (8002670 <initTof+0x98>)
 80025ec:	f002 fd3a 	bl	8005064 <HAL_GPIO_WritePin>
	while(I2C2->CR2==2)
 80025f0:	e00d      	b.n	800260e <initTof+0x36>
		{
		  while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 80025f2:	bf00      	nop
 80025f4:	481f      	ldr	r0, [pc, #124]	; (8002674 <initTof+0x9c>)
 80025f6:	f002 fec3 	bl	8005380 <HAL_I2C_DeInit>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f9      	bne.n	80025f4 <initTof+0x1c>
		  while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 8002600:	bf00      	nop
 8002602:	481c      	ldr	r0, [pc, #112]	; (8002674 <initTof+0x9c>)
 8002604:	f002 fd78 	bl	80050f8 <HAL_I2C_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f9      	bne.n	8002602 <initTof+0x2a>
	while(I2C2->CR2==2)
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <initTof+0xa0>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d0ed      	beq.n	80025f2 <initTof+0x1a>
		}

	tofInit(1); // set long range mode (up to 2m)
 8002616:	2001      	movs	r0, #1
 8002618:	f7ff f93e 	bl	8001898 <tofInit>
	tofGetModel(&model, &revision);
 800261c:	463a      	mov	r2, r7
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ff92 	bl	800254c <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 8002628:	e016      	b.n	8002658 <initTof+0x80>
	{
	while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 800262a:	bf00      	nop
 800262c:	4811      	ldr	r0, [pc, #68]	; (8002674 <initTof+0x9c>)
 800262e:	f002 fea7 	bl	8005380 <HAL_I2C_DeInit>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <initTof+0x54>
	while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 8002638:	bf00      	nop
 800263a:	480e      	ldr	r0, [pc, #56]	; (8002674 <initTof+0x9c>)
 800263c:	f002 fd5c 	bl	80050f8 <HAL_I2C_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f9      	bne.n	800263a <initTof+0x62>
	tofInit(1); // set long range mode (up to 2m)
 8002646:	2001      	movs	r0, #1
 8002648:	f7ff f926 	bl	8001898 <tofInit>
	tofGetModel(&model, &revision);
 800264c:	463a      	mov	r2, r7
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff7a 	bl	800254c <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2bee      	cmp	r3, #238	; 0xee
 800265c:	d1e5      	bne.n	800262a <initTof+0x52>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b10      	cmp	r3, #16
 8002662:	d1e2      	bne.n	800262a <initTof+0x52>
	}
	return 1;
 8002664:	2301      	movs	r3, #1
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40010c00 	.word	0x40010c00
 8002674:	200008a8 	.word	0x200008a8
 8002678:	40005800 	.word	0x40005800

0800267c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002690:	4b34      	ldr	r3, [pc, #208]	; (8002764 <MX_GPIO_Init+0xe8>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a33      	ldr	r2, [pc, #204]	; (8002764 <MX_GPIO_Init+0xe8>)
 8002696:	f043 0310 	orr.w	r3, r3, #16
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <MX_GPIO_Init+0xe8>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a8:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <MX_GPIO_Init+0xe8>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a2d      	ldr	r2, [pc, #180]	; (8002764 <MX_GPIO_Init+0xe8>)
 80026ae:	f043 0320 	orr.w	r3, r3, #32
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <MX_GPIO_Init+0xe8>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c0:	4b28      	ldr	r3, [pc, #160]	; (8002764 <MX_GPIO_Init+0xe8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <MX_GPIO_Init+0xe8>)
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <MX_GPIO_Init+0xe8>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <MX_GPIO_Init+0xe8>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a21      	ldr	r2, [pc, #132]	; (8002764 <MX_GPIO_Init+0xe8>)
 80026de:	f043 0308 	orr.w	r3, r3, #8
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <MX_GPIO_Init+0xe8>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80026f0:	2200      	movs	r2, #0
 80026f2:	f24f 0120 	movw	r1, #61472	; 0xf020
 80026f6:	481c      	ldr	r0, [pc, #112]	; (8002768 <MX_GPIO_Init+0xec>)
 80026f8:	f002 fcb4 	bl	8005064 <HAL_GPIO_WritePin>
                          |TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80026fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <MX_GPIO_Init+0xf0>)
 8002704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4619      	mov	r1, r3
 8002710:	4817      	ldr	r0, [pc, #92]	; (8002770 <MX_GPIO_Init+0xf4>)
 8002712:	f002 fa47 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002716:	f24f 0320 	movw	r3, #61472	; 0xf020
 800271a:	613b      	str	r3, [r7, #16]
                          |TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271c:	2301      	movs	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2302      	movs	r3, #2
 8002726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	4619      	mov	r1, r3
 800272e:	480e      	ldr	r0, [pc, #56]	; (8002768 <MX_GPIO_Init+0xec>)
 8002730:	f002 fa38 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_Interrupt_Pin;
 8002734:	2310      	movs	r3, #16
 8002736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <MX_GPIO_Init+0xf0>)
 800273a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	4619      	mov	r1, r3
 8002746:	4808      	ldr	r0, [pc, #32]	; (8002768 <MX_GPIO_Init+0xec>)
 8002748:	f002 fa2c 	bl	8004ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	2100      	movs	r1, #0
 8002750:	2028      	movs	r0, #40	; 0x28
 8002752:	f002 f8ae 	bl	80048b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002756:	2028      	movs	r0, #40	; 0x28
 8002758:	f002 f8c7 	bl	80048ea <HAL_NVIC_EnableIRQ>

}
 800275c:	bf00      	nop
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	40010c00 	.word	0x40010c00
 800276c:	10110000 	.word	0x10110000
 8002770:	40011000 	.word	0x40011000

08002774 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <MX_I2C2_Init+0x50>)
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <MX_I2C2_Init+0x54>)
 800277c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_I2C2_Init+0x50>)
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <MX_I2C2_Init+0x58>)
 8002782:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_I2C2_Init+0x50>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_I2C2_Init+0x50>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_I2C2_Init+0x50>)
 8002792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002796:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <MX_I2C2_Init+0x50>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_I2C2_Init+0x50>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <MX_I2C2_Init+0x50>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_I2C2_Init+0x50>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_I2C2_Init+0x50>)
 80027b2:	f002 fca1 	bl	80050f8 <HAL_I2C_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80027bc:	f000 fc10 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200008a8 	.word	0x200008a8
 80027c8:	40005800 	.word	0x40005800
 80027cc:	000186a0 	.word	0x000186a0

080027d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a16      	ldr	r2, [pc, #88]	; (8002844 <HAL_I2C_MspInit+0x74>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d124      	bne.n	800283a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_I2C_MspInit+0x78>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_I2C_MspInit+0x78>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_I2C_MspInit+0x78>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TOF_SCL_Pin|TOF_SDA_Pin;
 8002808:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800280c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280e:	2312      	movs	r3, #18
 8002810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4619      	mov	r1, r3
 800281c:	480b      	ldr	r0, [pc, #44]	; (800284c <HAL_I2C_MspInit+0x7c>)
 800281e:	f002 f9c1 	bl	8004ba4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_I2C_MspInit+0x78>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a08      	ldr	r2, [pc, #32]	; (8002848 <HAL_I2C_MspInit+0x78>)
 8002828:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800282c:	61d3      	str	r3, [r2, #28]
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_I2C_MspInit+0x78>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800283a:	bf00      	nop
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40005800 	.word	0x40005800
 8002848:	40021000 	.word	0x40021000
 800284c:	40010c00 	.word	0x40010c00

08002850 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0b      	ldr	r2, [pc, #44]	; (800288c <HAL_I2C_MspDeInit+0x3c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10f      	bne.n	8002882 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_I2C_MspDeInit+0x40>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_I2C_MspDeInit+0x40>)
 8002868:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800286c:	61d3      	str	r3, [r2, #28]

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(TOF_SCL_GPIO_Port, TOF_SCL_Pin);
 800286e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002872:	4808      	ldr	r0, [pc, #32]	; (8002894 <HAL_I2C_MspDeInit+0x44>)
 8002874:	f002 fb2a 	bl	8004ecc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(TOF_SDA_GPIO_Port, TOF_SDA_Pin);
 8002878:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800287c:	4805      	ldr	r0, [pc, #20]	; (8002894 <HAL_I2C_MspDeInit+0x44>)
 800287e:	f002 fb25 	bl	8004ecc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40005800 	.word	0x40005800
 8002890:	40021000 	.word	0x40021000
 8002894:	40010c00 	.word	0x40010c00

08002898 <TurnOffLed>:
}



void TurnOffLed(int i)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	switch (i)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d827      	bhi.n	80028f8 <TurnOffLed+0x60>
 80028a8:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <TurnOffLed+0x18>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	080028c1 	.word	0x080028c1
 80028b4:	080028cf 	.word	0x080028cf
 80028b8:	080028dd 	.word	0x080028dd
 80028bc:	080028eb 	.word	0x080028eb
	{
	case 1:
		    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028c6:	480e      	ldr	r0, [pc, #56]	; (8002900 <TurnOffLed+0x68>)
 80028c8:	f002 fbcc 	bl	8005064 <HAL_GPIO_WritePin>
		    break;
 80028cc:	e014      	b.n	80028f8 <TurnOffLed+0x60>
	case 2:
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80028ce:	2200      	movs	r2, #0
 80028d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028d4:	480a      	ldr	r0, [pc, #40]	; (8002900 <TurnOffLed+0x68>)
 80028d6:	f002 fbc5 	bl	8005064 <HAL_GPIO_WritePin>
			break;
 80028da:	e00d      	b.n	80028f8 <TurnOffLed+0x60>
	case 3:
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80028dc:	2200      	movs	r2, #0
 80028de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028e2:	4807      	ldr	r0, [pc, #28]	; (8002900 <TurnOffLed+0x68>)
 80028e4:	f002 fbbe 	bl	8005064 <HAL_GPIO_WritePin>
			break;
 80028e8:	e006      	b.n	80028f8 <TurnOffLed+0x60>
	case 4:
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80028ea:	2200      	movs	r2, #0
 80028ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <TurnOffLed+0x68>)
 80028f2:	f002 fbb7 	bl	8005064 <HAL_GPIO_WritePin>
			break;
 80028f6:	bf00      	nop
	}

}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40010c00 	.word	0x40010c00

08002904 <SwitchLed>:



void SwitchLed(int i)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	switch (i)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	2b03      	cmp	r3, #3
 8002912:	d823      	bhi.n	800295c <SwitchLed+0x58>
 8002914:	a201      	add	r2, pc, #4	; (adr r2, 800291c <SwitchLed+0x18>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	0800292d 	.word	0x0800292d
 8002920:	08002939 	.word	0x08002939
 8002924:	08002945 	.word	0x08002945
 8002928:	08002951 	.word	0x08002951
	{
	case 1:
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800292c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002930:	480c      	ldr	r0, [pc, #48]	; (8002964 <SwitchLed+0x60>)
 8002932:	f002 fbaf 	bl	8005094 <HAL_GPIO_TogglePin>
			break;
 8002936:	e011      	b.n	800295c <SwitchLed+0x58>
	case 2:
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8002938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800293c:	4809      	ldr	r0, [pc, #36]	; (8002964 <SwitchLed+0x60>)
 800293e:	f002 fba9 	bl	8005094 <HAL_GPIO_TogglePin>
			break;
 8002942:	e00b      	b.n	800295c <SwitchLed+0x58>
	case 3:
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8002944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002948:	4806      	ldr	r0, [pc, #24]	; (8002964 <SwitchLed+0x60>)
 800294a:	f002 fba3 	bl	8005094 <HAL_GPIO_TogglePin>
			break;
 800294e:	e005      	b.n	800295c <SwitchLed+0x58>
	case 4:
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8002950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002954:	4803      	ldr	r0, [pc, #12]	; (8002964 <SwitchLed+0x60>)
 8002956:	f002 fb9d 	bl	8005094 <HAL_GPIO_TogglePin>
			break;
 800295a:	bf00      	nop
	}

}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40010c00 	.word	0x40010c00

08002968 <LedError>:



void LedError()
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800296c:	2201      	movs	r2, #1
 800296e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002972:	480b      	ldr	r0, [pc, #44]	; (80029a0 <LedError+0x38>)
 8002974:	f002 fb76 	bl	8005064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8002978:	2201      	movs	r2, #1
 800297a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800297e:	4808      	ldr	r0, [pc, #32]	; (80029a0 <LedError+0x38>)
 8002980:	f002 fb70 	bl	8005064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8002984:	2201      	movs	r2, #1
 8002986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800298a:	4805      	ldr	r0, [pc, #20]	; (80029a0 <LedError+0x38>)
 800298c:	f002 fb6a 	bl	8005064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8002990:	2201      	movs	r2, #1
 8002992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002996:	4802      	ldr	r0, [pc, #8]	; (80029a0 <LedError+0x38>)
 8002998:	f002 fb64 	bl	8005064 <HAL_GPIO_WritePin>
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40010c00 	.word	0x40010c00

080029a4 <TestSensorOnI2C>:
  * @retval None
  */


void TestSensorOnI2C(int * tab)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	 int u = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]

	 printf("debut de lecture du bus I2c\r\n\n");
 80029b0:	4818      	ldr	r0, [pc, #96]	; (8002a14 <TestSensorOnI2C+0x70>)
 80029b2:	f007 f871 	bl	8009a98 <puts>
	  for(int i =0; i< 256; i++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e021      	b.n	8002a00 <TestSensorOnI2C+0x5c>
	  {
		  int result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i),2,2);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	b299      	uxth	r1, r3
 80029c0:	2302      	movs	r3, #2
 80029c2:	2202      	movs	r2, #2
 80029c4:	4814      	ldr	r0, [pc, #80]	; (8002a18 <TestSensorOnI2C+0x74>)
 80029c6:	f003 f869 	bl	8005a9c <HAL_I2C_IsDeviceReady>
 80029ca:	4603      	mov	r3, r0
 80029cc:	60fb      	str	r3, [r7, #12]
		  if (result != HAL_OK)//HAL_ERROR or HAL_TIMEOUT
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <TestSensorOnI2C+0x36>
		  {
			  printf("."); //No ACKreceived at the address
 80029d4:	202e      	movs	r0, #46	; 0x2e
 80029d6:	f006 ffdd 	bl	8009994 <putchar>
		  }
		  if (result == HAL_OK)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10c      	bne.n	80029fa <TestSensorOnI2C+0x56>
		  {
			  tab[u] = i;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	601a      	str	r2, [r3, #0]
			  u++;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3301      	adds	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
			  printf("0x%X",i); //Received an ACK at the address
 80029f2:	6939      	ldr	r1, [r7, #16]
 80029f4:	4809      	ldr	r0, [pc, #36]	; (8002a1c <TestSensorOnI2C+0x78>)
 80029f6:	f006 ffb5 	bl	8009964 <iprintf>
	  for(int i =0; i< 256; i++)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	3301      	adds	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2bff      	cmp	r3, #255	; 0xff
 8002a04:	ddda      	ble.n	80029bc <TestSensorOnI2C+0x18>
		  }
	  }
	  printf("\r\n\nfin de lecture du bus I2C\r\n\n\n");
 8002a06:	4806      	ldr	r0, [pc, #24]	; (8002a20 <TestSensorOnI2C+0x7c>)
 8002a08:	f007 f846 	bl	8009a98 <puts>
}
 8002a0c:	bf00      	nop
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	0800d7a4 	.word	0x0800d7a4
 8002a18:	200008a8 	.word	0x200008a8
 8002a1c:	0800d7c4 	.word	0x0800d7c4
 8002a20:	0800d7cc 	.word	0x0800d7cc

08002a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a2a:	f001 fbc1 	bl	80041b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a2e:	f000 f87f 	bl	8002b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a32:	f7ff fe23 	bl	800267c <MX_GPIO_Init>
  MX_TIM3_Init();
 8002a36:	f000 ff87 	bl	8003948 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002a3a:	f001 fa9b 	bl	8003f74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002a3e:	f001 fac3 	bl	8003fc8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002a42:	f000 fe69 	bl	8003718 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002a46:	f000 ff2b 	bl	80038a0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002a4a:	f001 f843 	bl	8003ad4 <MX_TIM5_Init>
  MX_ADC1_Init();
 8002a4e:	f7fe fe91 	bl	8001774 <MX_ADC1_Init>
  MX_TIM7_Init();
 8002a52:	f001 f8c9 	bl	8003be8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8002a56:	f001 f891 	bl	8003b7c <MX_TIM6_Init>
  MX_TIM4_Init();
 8002a5a:	f000 ffed 	bl	8003a38 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002a5e:	f7ff fe89 	bl	8002774 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002a62:	2201      	movs	r2, #1
 8002a64:	4926      	ldr	r1, [pc, #152]	; (8002b00 <main+0xdc>)
 8002a66:	4827      	ldr	r0, [pc, #156]	; (8002b04 <main+0xe0>)
 8002a68:	f005 fc72 	bl	8008350 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f001 fc01 	bl	8004274 <HAL_Delay>
  shellInit();
 8002a72:	f000 fabd 	bl	8002ff0 <shellInit>

  HAL_UART_Receive_IT(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE);
 8002a76:	2201      	movs	r2, #1
 8002a78:	4923      	ldr	r1, [pc, #140]	; (8002b08 <main+0xe4>)
 8002a7a:	4824      	ldr	r0, [pc, #144]	; (8002b0c <main+0xe8>)
 8002a7c:	f005 fc68 	bl	8008350 <HAL_UART_Receive_IT>
  HAL_Delay(1);
 8002a80:	2001      	movs	r0, #1
 8002a82:	f001 fbf7 	bl	8004274 <HAL_Delay>

  int tabI2CAdd[8] = {0,0,0,0,0,0,0,0};
 8002a86:	463b      	mov	r3, r7
 8002a88:	2220      	movs	r2, #32
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f006 f8f3 	bl	8008c78 <memset>
  TestSensorOnI2C(tabI2CAdd);
 8002a92:	463b      	mov	r3, r7
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff85 	bl	80029a4 <TestSensorOnI2C>
  initTof();
 8002a9a:	f7ff fd9d 	bl	80025d8 <initTof>
  //int tabI2CAdd[8] = {0,0,0,0,0,0,0,0};
  //TestSensorOnI2C(tabI2CAdd);

  TurnOffLed(1);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7ff fefa 	bl	8002898 <TurnOffLed>
  TurnOffLed(2);
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f7ff fef7 	bl	8002898 <TurnOffLed>
  TurnOffLed(3);
 8002aaa:	2003      	movs	r0, #3
 8002aac:	f7ff fef4 	bl	8002898 <TurnOffLed>
  TurnOffLed(4);
 8002ab0:	2004      	movs	r0, #4
 8002ab2:	f7ff fef1 	bl	8002898 <TurnOffLed>

  HAL_TIM_Base_Start_IT(&htim3);
 8002ab6:	4816      	ldr	r0, [pc, #88]	; (8002b10 <main+0xec>)
 8002ab8:	f004 f96c 	bl	8006d94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002abc:	2100      	movs	r1, #0
 8002abe:	4814      	ldr	r0, [pc, #80]	; (8002b10 <main+0xec>)
 8002ac0:	f004 fada 	bl	8007078 <HAL_TIM_PWM_Start_IT>
  ControlServo(SERVO_CLOSED);
 8002ac4:	f44f 7052 	mov.w	r0, #840	; 0x348
 8002ac8:	f7fe fe18 	bl	80016fc <ControlServo>

  HAL_TIM_Base_Start_IT(&htim6);
 8002acc:	4811      	ldr	r0, [pc, #68]	; (8002b14 <main+0xf0>)
 8002ace:	f004 f961 	bl	8006d94 <HAL_TIM_Base_Start_IT>
  InitMCC();
 8002ad2:	f7fe fb55 	bl	8001180 <InitMCC>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002ad6:	213c      	movs	r1, #60	; 0x3c
 8002ad8:	480f      	ldr	r0, [pc, #60]	; (8002b18 <main+0xf4>)
 8002ada:	f004 fc6f 	bl	80073bc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002ade:	213c      	movs	r1, #60	; 0x3c
 8002ae0:	480e      	ldr	r0, [pc, #56]	; (8002b1c <main+0xf8>)
 8002ae2:	f004 fc6b 	bl	80073bc <HAL_TIM_Encoder_Start>

  PIController_Init(&MoteurD);
 8002ae6:	480e      	ldr	r0, [pc, #56]	; (8002b20 <main+0xfc>)
 8002ae8:	f7fe fc56 	bl	8001398 <PIController_Init>
  PIController_Init(&MoteurG);
 8002aec:	480d      	ldr	r0, [pc, #52]	; (8002b24 <main+0x100>)
 8002aee:	f7fe fc53 	bl	8001398 <PIController_Init>

  HAL_TIM_Base_Start_IT(&htim7); //interrupt chaque second pour print les données dans le shell
 8002af2:	480d      	ldr	r0, [pc, #52]	; (8002b28 <main+0x104>)
 8002af4:	f004 f94e 	bl	8006d94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002af8:	480c      	ldr	r0, [pc, #48]	; (8002b2c <main+0x108>)
 8002afa:	f004 f94b 	bl	8006d94 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(start)
 8002afe:	e7fe      	b.n	8002afe <main+0xda>
 8002b00:	20000bdc 	.word	0x20000bdc
 8002b04:	20000be4 	.word	0x20000be4
 8002b08:	20000be0 	.word	0x20000be0
 8002b0c:	20000c28 	.word	0x20000c28
 8002b10:	20000a74 	.word	0x20000a74
 8002b14:	20000b4c 	.word	0x20000b4c
 8002b18:	20000a2c 	.word	0x20000a2c
 8002b1c:	20000b04 	.word	0x20000b04
 8002b20:	20000924 	.word	0x20000924
 8002b24:	2000094c 	.word	0x2000094c
 8002b28:	20000b94 	.word	0x20000b94
 8002b2c:	20000abc 	.word	0x20000abc

08002b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b096      	sub	sp, #88	; 0x58
 8002b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b3a:	2228      	movs	r2, #40	; 0x28
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f006 f89a 	bl	8008c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	611a      	str	r2, [r3, #16]
 8002b62:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b74:	2301      	movs	r3, #1
 8002b76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b82:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b86:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 fbdf 	bl	8006350 <HAL_RCC_OscConfig>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002b98:	f000 fa22 	bl	8002fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bb2:	f107 031c 	add.w	r3, r7, #28
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fe4b 	bl	8006854 <HAL_RCC_ClockConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002bc4:	f000 fa0c 	bl	8002fe0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 ffd7 	bl	8006b88 <HAL_RCCEx_PeriphCLKConfig>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002be0:	f000 f9fe 	bl	8002fe0 <Error_Handler>
  }
}
 8002be4:	bf00      	nop
 8002be6:	3758      	adds	r7, #88	; 0x58
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002bf4:	1d39      	adds	r1, r7, #4
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <__io_putchar+0x20>)
 8002bfe:	f005 fb15 	bl	800822c <HAL_UART_Transmit>
	return ch;
 8002c02:	687b      	ldr	r3, [r7, #4]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000be4 	.word	0x20000be4

08002c10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) // 50Hz freq lecture TOF
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4aa9      	ldr	r2, [pc, #676]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	f000 818f 	beq.w	8002f42 <HAL_TIM_PeriodElapsedCallback+0x332>
		//TOF_dist = tofReadDistance();//scan
	}



	else if (htim->Instance == TIM7) //Tim 7 1sec pour du printf shell
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4aa7      	ldr	r2, [pc, #668]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		//printf("%d\r\n", dist);
		printf("ali petit zizi ca rime...je dis ca je dis rien\r\n");
 8002c2e:	48a7      	ldr	r0, [pc, #668]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002c30:	f006 ff32 	bl	8009a98 <puts>
		TOF_dist = tofReadDistance();//scan
 8002c34:	f7ff fc50 	bl	80024d8 <tofReadDistance>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4aa5      	ldr	r2, [pc, #660]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002c3c:	6013      	str	r3, [r2, #0]
		printf("distance : %d\r\n", TOF_dist);
 8002c3e:	4ba4      	ldr	r3, [pc, #656]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4619      	mov	r1, r3
 8002c44:	48a3      	ldr	r0, [pc, #652]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002c46:	f006 fe8d 	bl	8009964 <iprintf>
				break;
			}

		  }
		}
}
 8002c4a:	e17a      	b.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x332>
	else if (htim->Instance == TIM4) //Delay Tof
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4aa1      	ldr	r2, [pc, #644]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	f000 8175 	beq.w	8002f42 <HAL_TIM_PeriodElapsedCallback+0x332>
	else if (htim->Instance == TIM6) //Tim 6 asserv en vitesse a 0.1sec
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a9f      	ldr	r2, [pc, #636]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f040 816e 	bne.w	8002f40 <HAL_TIM_PeriodElapsedCallback+0x330>
		switch(action)
 8002c64:	4b9e      	ldr	r3, [pc, #632]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d127      	bne.n	8002cbc <HAL_TIM_PeriodElapsedCallback+0xac>
			if(sens)dist -=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
 8002c6c:	4b9d      	ldr	r3, [pc, #628]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d011      	beq.n	8002c98 <HAL_TIM_PeriodElapsedCallback+0x88>
 8002c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c7a:	4b9b      	ldr	r3, [pc, #620]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	4413      	add	r3, r2
 8002c80:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002c84:	3bfe      	subs	r3, #254	; 0xfe
 8002c86:	0859      	lsrs	r1, r3, #1
 8002c88:	4b98      	ldr	r3, [pc, #608]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002c8a:	881a      	ldrh	r2, [r3, #0]
 8002c8c:	b28b      	uxth	r3, r1
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	4b96      	ldr	r3, [pc, #600]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002c94:	801a      	strh	r2, [r3, #0]
			break;
 8002c96:	e020      	b.n	8002cda <HAL_TIM_PeriodElapsedCallback+0xca>
			else dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ((TIM5->CNT) - Mid_Period_TIM5 ) ) / 2; //on moyenne la valeur
 8002c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9e:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002ca8:	3bfe      	subs	r3, #254	; 0xfe
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	4b8f      	ldr	r3, [pc, #572]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b8d      	ldr	r3, [pc, #564]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002cb8:	801a      	strh	r2, [r3, #0]
			break;
 8002cba:	e00e      	b.n	8002cda <HAL_TIM_PeriodElapsedCallback+0xca>
			dist +=	(( (TIM2->CNT)-Mid_Period_TIM2 ) + ( Mid_Period_TIM5 - (TIM5->CNT)) ) / 2; //on moyenne la valeur
 8002cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc2:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	4b87      	ldr	r3, [pc, #540]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	4b85      	ldr	r3, [pc, #532]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002cd6:	801a      	strh	r2, [r3, #0]
			break;
 8002cd8:	bf00      	nop
		  ReadEncodeur();
 8002cda:	f7fe fb37 	bl	800134c <ReadEncodeur>
		  if(consigneD == 0)
 8002cde:	4b84      	ldr	r3, [pc, #528]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_TIM_PeriodElapsedCallback+0xdc>
			  Stop();
 8002ce6:	f7fe fae7 	bl	80012b8 <Stop>
}
 8002cea:	e12a      	b.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x332>
			switch(action)
 8002cec:	4b7c      	ldr	r3, [pc, #496]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	f000 809a 	beq.w	8002e2a <HAL_TIM_PeriodElapsedCallback+0x21a>
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	f300 811f 	bgt.w	8002f3a <HAL_TIM_PeriodElapsedCallback+0x32a>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d049      	beq.n	8002d98 <HAL_TIM_PeriodElapsedCallback+0x188>
 8002d04:	e119      	b.n	8002f3a <HAL_TIM_PeriodElapsedCallback+0x32a>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002d06:	4b7a      	ldr	r3, [pc, #488]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f910 	bl	8000f30 <__aeabi_i2f>
 8002d10:	4604      	mov	r4, r0
 8002d12:	4b78      	ldr	r3, [pc, #480]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22c8      	movs	r2, #200	; 0xc8
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	4a76      	ldr	r2, [pc, #472]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8002d22:	1152      	asrs	r2, r2, #5
 8002d24:	17db      	asrs	r3, r3, #31
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe f901 	bl	8000f30 <__aeabi_i2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	4621      	mov	r1, r4
 8002d34:	4871      	ldr	r0, [pc, #452]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002d36:	f7fe fb6d 	bl	8001414 <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002d3a:	4b71      	ldr	r3, [pc, #452]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f8f6 	bl	8000f30 <__aeabi_i2f>
 8002d44:	4604      	mov	r4, r0
 8002d46:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	22c8      	movs	r2, #200	; 0xc8
 8002d4c:	fb02 f303 	mul.w	r3, r2, r3
 8002d50:	4a6d      	ldr	r2, [pc, #436]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002d52:	fb82 1203 	smull	r1, r2, r2, r3
 8002d56:	1112      	asrs	r2, r2, #4
 8002d58:	17db      	asrs	r3, r3, #31
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe f8e7 	bl	8000f30 <__aeabi_i2f>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	4621      	mov	r1, r4
 8002d68:	4868      	ldr	r0, [pc, #416]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002d6a:	f7fe fb53 	bl	8001414 <PIController_Update>
				AvancerPI(0, MoteurD.out);
 8002d6e:	4b63      	ldr	r3, [pc, #396]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe f9a6 	bl	80010c4 <__aeabi_f2iz>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fe fa35 	bl	80011ec <AvancerPI>
				AvancerPI(1, MoteurG.out);
 8002d82:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe f99c 	bl	80010c4 <__aeabi_f2iz>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4619      	mov	r1, r3
 8002d90:	2001      	movs	r0, #1
 8002d92:	f7fe fa2b 	bl	80011ec <AvancerPI>
				break;
 8002d96:	e0d4      	b.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x332>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002d98:	4b55      	ldr	r3, [pc, #340]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe f8c7 	bl	8000f30 <__aeabi_i2f>
 8002da2:	4604      	mov	r4, r0
 8002da4:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	22c8      	movs	r2, #200	; 0xc8
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002db0:	fb82 1203 	smull	r1, r2, r2, r3
 8002db4:	1152      	asrs	r2, r2, #5
 8002db6:	17db      	asrs	r3, r3, #31
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe f8b8 	bl	8000f30 <__aeabi_i2f>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	484d      	ldr	r0, [pc, #308]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002dc8:	f7fe fb24 	bl	8001414 <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe f8ad 	bl	8000f30 <__aeabi_i2f>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	22c8      	movs	r2, #200	; 0xc8
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	4a49      	ldr	r2, [pc, #292]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002de4:	fb82 1203 	smull	r1, r2, r2, r3
 8002de8:	1112      	asrs	r2, r2, #4
 8002dea:	17db      	asrs	r3, r3, #31
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe f89e 	bl	8000f30 <__aeabi_i2f>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4621      	mov	r1, r4
 8002dfa:	4844      	ldr	r0, [pc, #272]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002dfc:	f7fe fb0a 	bl	8001414 <PIController_Update>
				ReculerPI(0, MoteurD.out);
 8002e00:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe f95d 	bl	80010c4 <__aeabi_f2iz>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fe fa2e 	bl	8001270 <ReculerPI>
				ReculerPI(1, MoteurG.out);
 8002e14:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe f953 	bl	80010c4 <__aeabi_f2iz>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4619      	mov	r1, r3
 8002e22:	2001      	movs	r0, #1
 8002e24:	f7fe fa24 	bl	8001270 <ReculerPI>
				break;
 8002e28:	e08b      	b.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x332>
				PIController_Update(&MoteurD, consigneD, tickD * MAX_ARR / OmaxD);
 8002e2a:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f87e 	bl	8000f30 <__aeabi_i2f>
 8002e34:	4604      	mov	r4, r0
 8002e36:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	22c8      	movs	r2, #200	; 0xc8
 8002e3c:	fb02 f303 	mul.w	r3, r2, r3
 8002e40:	4a2d      	ldr	r2, [pc, #180]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002e42:	fb82 1203 	smull	r1, r2, r2, r3
 8002e46:	1152      	asrs	r2, r2, #5
 8002e48:	17db      	asrs	r3, r3, #31
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe f86f 	bl	8000f30 <__aeabi_i2f>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461a      	mov	r2, r3
 8002e56:	4621      	mov	r1, r4
 8002e58:	4828      	ldr	r0, [pc, #160]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e5a:	f7fe fadb 	bl	8001414 <PIController_Update>
				PIController_Update(&MoteurG, consigneG, tickG * MAX_ARR / OmaxG);
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe f864 	bl	8000f30 <__aeabi_i2f>
 8002e68:	4604      	mov	r4, r0
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	22c8      	movs	r2, #200	; 0xc8
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	4a24      	ldr	r2, [pc, #144]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002e76:	fb82 1203 	smull	r1, r2, r2, r3
 8002e7a:	1112      	asrs	r2, r2, #4
 8002e7c:	17db      	asrs	r3, r3, #31
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe f855 	bl	8000f30 <__aeabi_i2f>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	481f      	ldr	r0, [pc, #124]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002e8e:	f7fe fac1 	bl	8001414 <PIController_Update>
				if(sens)
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d03a      	beq.n	8002f10 <HAL_TIM_PeriodElapsedCallback+0x300>
					ReculerPI(0, MoteurD.out);
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe f910 	bl	80010c4 <__aeabi_f2iz>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7fe f9e1 	bl	8001270 <ReculerPI>
					AvancerPI(1, MoteurG.out);
 8002eae:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f906 	bl	80010c4 <__aeabi_f2iz>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4619      	mov	r1, r3
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f7fe f995 	bl	80011ec <AvancerPI>
				break;
 8002ec2:	e03e      	b.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x332>
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40001400 	.word	0x40001400
 8002ecc:	0800d7ec 	.word	0x0800d7ec
 8002ed0:	20000920 	.word	0x20000920
 8002ed4:	0800d81c 	.word	0x0800d81c
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40001000 	.word	0x40001000
 8002ee0:	2000010c 	.word	0x2000010c
 8002ee4:	20000918 	.word	0x20000918
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	200008fc 	.word	0x200008fc
 8002ef0:	2000090c 	.word	0x2000090c
 8002ef4:	20000908 	.word	0x20000908
 8002ef8:	3531dec1 	.word	0x3531dec1
 8002efc:	20000924 	.word	0x20000924
 8002f00:	20000914 	.word	0x20000914
 8002f04:	20000910 	.word	0x20000910
 8002f08:	19c2d14f 	.word	0x19c2d14f
 8002f0c:	2000094c 	.word	0x2000094c
					AvancerPI(0, MoteurD.out);
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe f8d5 	bl	80010c4 <__aeabi_f2iz>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fe f964 	bl	80011ec <AvancerPI>
					ReculerPI(1, MoteurG.out);
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe f8cb 	bl	80010c4 <__aeabi_f2iz>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4619      	mov	r1, r3
 8002f32:	2001      	movs	r0, #1
 8002f34:	f7fe f99c 	bl	8001270 <ReculerPI>
				break;
 8002f38:	e003      	b.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x332>
				Stop();
 8002f3a:	f7fe f9bd 	bl	80012b8 <Stop>
				break;
 8002f3e:	e000      	b.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x332>
		  }
 8002f40:	bf00      	nop
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd90      	pop	{r4, r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000924 	.word	0x20000924
 8002f50:	2000094c 	.word	0x2000094c

08002f54 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // <----- The ISR Function We're Looking For!
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
	//enableUserButton = (enableUserButton+1) % 2; //passe 0 à 1 et 1 à 0
	Debut_Test();
 8002f5e:	f7fe fbe7 	bl	8001730 <Debut_Test>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_UART_RxCpltCallback>:
/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <HAL_UART_RxCpltCallback+0x5c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10e      	bne.n	8002f9c <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4912      	ldr	r1, [pc, #72]	; (8002fcc <HAL_UART_RxCpltCallback+0x60>)
 8002f82:	4813      	ldr	r0, [pc, #76]	; (8002fd0 <HAL_UART_RxCpltCallback+0x64>)
 8002f84:	f005 f9e4 	bl	8008350 <HAL_UART_Receive_IT>
		if(shellGetChar())
 8002f88:	f000 f86a 	bl	8003060 <shellGetChar>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d015      	beq.n	8002fbe <HAL_UART_RxCpltCallback+0x52>
		{
		  shellExec();
 8002f92:	f000 f8d9 	bl	8003148 <shellExec>
		  shellPrompt();
 8002f96:	f000 f843 	bl	8003020 <shellPrompt>
		if(raspGetChar())
		{
			raspExec();
		}
	}
}
 8002f9a:	e010      	b.n	8002fbe <HAL_UART_RxCpltCallback+0x52>
	else if(huart->Instance == USART2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <HAL_UART_RxCpltCallback+0x68>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10b      	bne.n	8002fbe <HAL_UART_RxCpltCallback+0x52>
		HAL_UART_Receive_IT(&huart2, uartRxBufferRasp, UART_RX_BUFFER_SIZE);
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	490b      	ldr	r1, [pc, #44]	; (8002fd8 <HAL_UART_RxCpltCallback+0x6c>)
 8002faa:	480c      	ldr	r0, [pc, #48]	; (8002fdc <HAL_UART_RxCpltCallback+0x70>)
 8002fac:	f005 f9d0 	bl	8008350 <HAL_UART_Receive_IT>
		if(raspGetChar())
 8002fb0:	f7fe fadc 	bl	800156c <raspGetChar>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_UART_RxCpltCallback+0x52>
			raspExec();
 8002fba:	f7fe fb45 	bl	8001648 <raspExec>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	20000bdc 	.word	0x20000bdc
 8002fd0:	20000be4 	.word	0x20000be4
 8002fd4:	40004400 	.word	0x40004400
 8002fd8:	20000be0 	.word	0x20000be0
 8002fdc:	20000c28 	.word	0x20000c28

08002fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe4:	b672      	cpsid	i
}
 8002fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LedError();
 8002fe8:	f7ff fcbe 	bl	8002968 <LedError>
  while (1)
 8002fec:	e7fe      	b.n	8002fec <Error_Handler+0xc>
	...

08002ff0 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, started, sizeof(started), HAL_MAX_DELAY);
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff8:	226c      	movs	r2, #108	; 0x6c
 8002ffa:	4906      	ldr	r1, [pc, #24]	; (8003014 <shellInit+0x24>)
 8002ffc:	4806      	ldr	r0, [pc, #24]	; (8003018 <shellInit+0x28>)
 8002ffe:	f005 f915 	bl	800822c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
 8003006:	220a      	movs	r2, #10
 8003008:	4904      	ldr	r1, [pc, #16]	; (800301c <shellInit+0x2c>)
 800300a:	4803      	ldr	r0, [pc, #12]	; (8003018 <shellInit+0x28>)
 800300c:	f005 f90e 	bl	800822c <HAL_UART_Transmit>
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2000011c 	.word	0x2000011c
 8003018:	20000be4 	.word	0x20000be4
 800301c:	20000110 	.word	0x20000110

08003020 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
 8003028:	220a      	movs	r2, #10
 800302a:	4903      	ldr	r1, [pc, #12]	; (8003038 <shellPrompt+0x18>)
 800302c:	4803      	ldr	r0, [pc, #12]	; (800303c <shellPrompt+0x1c>)
 800302e:	f005 f8fd 	bl	800822c <HAL_UART_Transmit>
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000110 	.word	0x20000110
 800303c:	20000be4 	.word	0x20000be4

08003040 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
 8003048:	2214      	movs	r2, #20
 800304a:	4903      	ldr	r1, [pc, #12]	; (8003058 <shellCmdNotFound+0x18>)
 800304c:	4803      	ldr	r0, [pc, #12]	; (800305c <shellCmdNotFound+0x1c>)
 800304e:	f005 f8ed 	bl	800822c <HAL_UART_Transmit>
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200005f0 	.word	0x200005f0
 800305c:	20000be4 	.word	0x20000be4

08003060 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <shellGetChar+0xc8>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b08      	cmp	r3, #8
 8003070:	d030      	beq.n	80030d4 <shellGetChar+0x74>
 8003072:	2b0d      	cmp	r3, #13
 8003074:	d140      	bne.n	80030f8 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	2203      	movs	r2, #3
 800307c:	492b      	ldr	r1, [pc, #172]	; (800312c <shellGetChar+0xcc>)
 800307e:	482c      	ldr	r0, [pc, #176]	; (8003130 <shellGetChar+0xd0>)
 8003080:	f005 f8d4 	bl	800822c <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8003084:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <shellGetChar+0xd4>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <shellGetChar+0xd8>)
 800308c:	2100      	movs	r1, #0
 800308e:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8003090:	4b2a      	ldr	r3, [pc, #168]	; (800313c <shellGetChar+0xdc>)
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8003096:	492a      	ldr	r1, [pc, #168]	; (8003140 <shellGetChar+0xe0>)
 8003098:	4827      	ldr	r0, [pc, #156]	; (8003138 <shellGetChar+0xd8>)
 800309a:	f007 fb3b 	bl	800a714 <strtok>
 800309e:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 80030a0:	e00f      	b.n	80030c2 <shellGetChar+0x62>
			argv[argc++] = token;
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <shellGetChar+0xdc>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	b2d1      	uxtb	r1, r2
 80030aa:	4a24      	ldr	r2, [pc, #144]	; (800313c <shellGetChar+0xdc>)
 80030ac:	7011      	strb	r1, [r2, #0]
 80030ae:	4619      	mov	r1, r3
 80030b0:	4a24      	ldr	r2, [pc, #144]	; (8003144 <shellGetChar+0xe4>)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 80030b8:	4921      	ldr	r1, [pc, #132]	; (8003140 <shellGetChar+0xe0>)
 80030ba:	2000      	movs	r0, #0
 80030bc:	f007 fb2a 	bl	800a714 <strtok>
 80030c0:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ec      	bne.n	80030a2 <shellGetChar+0x42>
		}

		idxCmd = 0;
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <shellGetChar+0xd4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	71fb      	strb	r3, [r7, #7]
		break;
 80030d2:	e023      	b.n	800311c <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <shellGetChar+0xd4>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	1e5a      	subs	r2, r3, #1
 80030da:	b2d1      	uxtb	r1, r2
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <shellGetChar+0xd4>)
 80030de:	7011      	strb	r1, [r2, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <shellGetChar+0xd8>)
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	2201      	movs	r2, #1
 80030ee:	490e      	ldr	r1, [pc, #56]	; (8003128 <shellGetChar+0xc8>)
 80030f0:	480f      	ldr	r0, [pc, #60]	; (8003130 <shellGetChar+0xd0>)
 80030f2:	f005 f89b 	bl	800822c <HAL_UART_Transmit>
		break;
 80030f6:	e011      	b.n	800311c <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <shellGetChar+0xd4>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	b2d1      	uxtb	r1, r2
 8003100:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <shellGetChar+0xd4>)
 8003102:	7011      	strb	r1, [r2, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <shellGetChar+0xc8>)
 8003108:	7819      	ldrb	r1, [r3, #0]
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <shellGetChar+0xd8>)
 800310c:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, uartRxBuffer, 1, HAL_MAX_DELAY);
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	2201      	movs	r2, #1
 8003114:	4904      	ldr	r1, [pc, #16]	; (8003128 <shellGetChar+0xc8>)
 8003116:	4806      	ldr	r0, [pc, #24]	; (8003130 <shellGetChar+0xd0>)
 8003118:	f005 f888 	bl	800822c <HAL_UART_Transmit>
	}

	return newCmdReady;
 800311c:	79fb      	ldrb	r3, [r7, #7]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000bdc 	.word	0x20000bdc
 800312c:	20000188 	.word	0x20000188
 8003130:	20000be4 	.word	0x20000be4
 8003134:	200009b4 	.word	0x200009b4
 8003138:	20000974 	.word	0x20000974
 800313c:	200009dc 	.word	0x200009dc
 8003140:	0800d82c 	.word	0x0800d82c
 8003144:	200009b8 	.word	0x200009b8

08003148 <shellExec>:
/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void)
{
 8003148:	b598      	push	{r3, r4, r7, lr}
 800314a:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"help")==0)
 800314c:	4ba4      	ldr	r3, [pc, #656]	; (80033e0 <shellExec+0x298>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	49a4      	ldr	r1, [pc, #656]	; (80033e4 <shellExec+0x29c>)
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f868 	bl	8000228 <strcmp>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d108      	bne.n	8003170 <shellExec+0x28>
	{
		HAL_UART_Transmit(&huart1, help, sizeof(help), HAL_MAX_DELAY);
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
 8003162:	f240 2231 	movw	r2, #561	; 0x231
 8003166:	49a0      	ldr	r1, [pc, #640]	; (80033e8 <shellExec+0x2a0>)
 8003168:	48a0      	ldr	r0, [pc, #640]	; (80033ec <shellExec+0x2a4>)
 800316a:	f005 f85f 	bl	800822c <HAL_UART_Transmit>

	else{
		shellCmdNotFound();
	}

}
 800316e:	e134      	b.n	80033da <shellExec+0x292>
	else if(strcmp(argv[0],"RTFM")==0)
 8003170:	4b9b      	ldr	r3, [pc, #620]	; (80033e0 <shellExec+0x298>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	499e      	ldr	r1, [pc, #632]	; (80033f0 <shellExec+0x2a8>)
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd f856 	bl	8000228 <strcmp>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <shellExec+0x4c>
		HAL_UART_Transmit(&huart1, RTFM, sizeof(RTFM), HAL_MAX_DELAY);
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 800318a:	499a      	ldr	r1, [pc, #616]	; (80033f4 <shellExec+0x2ac>)
 800318c:	4897      	ldr	r0, [pc, #604]	; (80033ec <shellExec+0x2a4>)
 800318e:	f005 f84d 	bl	800822c <HAL_UART_Transmit>
}
 8003192:	e122      	b.n	80033da <shellExec+0x292>
	else if(strcmp(argv[0],"led")==0)
 8003194:	4b92      	ldr	r3, [pc, #584]	; (80033e0 <shellExec+0x298>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4997      	ldr	r1, [pc, #604]	; (80033f8 <shellExec+0x2b0>)
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f844 	bl	8000228 <strcmp>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d110      	bne.n	80031c8 <shellExec+0x80>
		HAL_UART_Transmit(&huart1, led, sizeof(led), HAL_MAX_DELAY);
 80031a6:	f04f 33ff 	mov.w	r3, #4294967295
 80031aa:	2222      	movs	r2, #34	; 0x22
 80031ac:	4993      	ldr	r1, [pc, #588]	; (80033fc <shellExec+0x2b4>)
 80031ae:	488f      	ldr	r0, [pc, #572]	; (80033ec <shellExec+0x2a4>)
 80031b0:	f005 f83c 	bl	800822c <HAL_UART_Transmit>
		SwitchLed(atoi(argv[1]));
 80031b4:	4b8a      	ldr	r3, [pc, #552]	; (80033e0 <shellExec+0x298>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f005 fd21 	bl	8008c00 <atoi>
 80031be:	4603      	mov	r3, r0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fb9f 	bl	8002904 <SwitchLed>
}
 80031c6:	e108      	b.n	80033da <shellExec+0x292>
	else if(strcmp(argv[0],"avancer")==0)
 80031c8:	4b85      	ldr	r3, [pc, #532]	; (80033e0 <shellExec+0x298>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	498c      	ldr	r1, [pc, #560]	; (8003400 <shellExec+0x2b8>)
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f82a 	bl	8000228 <strcmp>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d110      	bne.n	80031fc <shellExec+0xb4>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
 80031de:	2225      	movs	r2, #37	; 0x25
 80031e0:	4988      	ldr	r1, [pc, #544]	; (8003404 <shellExec+0x2bc>)
 80031e2:	4882      	ldr	r0, [pc, #520]	; (80033ec <shellExec+0x2a4>)
 80031e4:	f005 f822 	bl	800822c <HAL_UART_Transmit>
		Avancer(atoi(argv[1]));
 80031e8:	4b7d      	ldr	r3, [pc, #500]	; (80033e0 <shellExec+0x298>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f005 fd07 	bl	8008c00 <atoi>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd ffdb 	bl	80011b0 <Avancer>
}
 80031fa:	e0ee      	b.n	80033da <shellExec+0x292>
	else if(strcmp(argv[0],"reculer")==0)
 80031fc:	4b78      	ldr	r3, [pc, #480]	; (80033e0 <shellExec+0x298>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4981      	ldr	r1, [pc, #516]	; (8003408 <shellExec+0x2c0>)
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f810 	bl	8000228 <strcmp>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d110      	bne.n	8003230 <shellExec+0xe8>
		HAL_UART_Transmit(&huart1, reculer, sizeof(reculer), HAL_MAX_DELAY);
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	2227      	movs	r2, #39	; 0x27
 8003214:	497d      	ldr	r1, [pc, #500]	; (800340c <shellExec+0x2c4>)
 8003216:	4875      	ldr	r0, [pc, #468]	; (80033ec <shellExec+0x2a4>)
 8003218:	f005 f808 	bl	800822c <HAL_UART_Transmit>
		Reculer(atoi(argv[1]));
 800321c:	4b70      	ldr	r3, [pc, #448]	; (80033e0 <shellExec+0x298>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4618      	mov	r0, r3
 8003222:	f005 fced 	bl	8008c00 <atoi>
 8003226:	4603      	mov	r3, r0
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe f803 	bl	8001234 <Reculer>
}
 800322e:	e0d4      	b.n	80033da <shellExec+0x292>
	else if(strcmp(argv[0],"stop")==0)
 8003230:	4b6b      	ldr	r3, [pc, #428]	; (80033e0 <shellExec+0x298>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4976      	ldr	r1, [pc, #472]	; (8003410 <shellExec+0x2c8>)
 8003236:	4618      	mov	r0, r3
 8003238:	f7fc fff6 	bl	8000228 <strcmp>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <shellExec+0x10e>
		HAL_UART_Transmit(&huart1, stop, sizeof(stop), HAL_MAX_DELAY);
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	2216      	movs	r2, #22
 8003248:	4972      	ldr	r1, [pc, #456]	; (8003414 <shellExec+0x2cc>)
 800324a:	4868      	ldr	r0, [pc, #416]	; (80033ec <shellExec+0x2a4>)
 800324c:	f004 ffee 	bl	800822c <HAL_UART_Transmit>
		Stop();
 8003250:	f7fe f832 	bl	80012b8 <Stop>
}
 8003254:	e0c1      	b.n	80033da <shellExec+0x292>
	else if(strcmp(argv[0],"tourner")==0)
 8003256:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <shellExec+0x298>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	496f      	ldr	r1, [pc, #444]	; (8003418 <shellExec+0x2d0>)
 800325c:	4618      	mov	r0, r3
 800325e:	f7fc ffe3 	bl	8000228 <strcmp>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d12a      	bne.n	80032be <shellExec+0x176>
		if(strcmp(argv[1],"1")||strcmp(argv[1],"0"))
 8003268:	4b5d      	ldr	r3, [pc, #372]	; (80033e0 <shellExec+0x298>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	496b      	ldr	r1, [pc, #428]	; (800341c <shellExec+0x2d4>)
 800326e:	4618      	mov	r0, r3
 8003270:	f7fc ffda 	bl	8000228 <strcmp>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <shellExec+0x146>
 800327a:	4b59      	ldr	r3, [pc, #356]	; (80033e0 <shellExec+0x298>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4968      	ldr	r1, [pc, #416]	; (8003420 <shellExec+0x2d8>)
 8003280:	4618      	mov	r0, r3
 8003282:	f7fc ffd1 	bl	8000228 <strcmp>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a6 	beq.w	80033da <shellExec+0x292>
			HAL_UART_Transmit(&huart1, tourner, sizeof(tourner), HAL_MAX_DELAY);
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	2230      	movs	r2, #48	; 0x30
 8003294:	4963      	ldr	r1, [pc, #396]	; (8003424 <shellExec+0x2dc>)
 8003296:	4855      	ldr	r0, [pc, #340]	; (80033ec <shellExec+0x2a4>)
 8003298:	f004 ffc8 	bl	800822c <HAL_UART_Transmit>
			Tourner(atoi(argv[1]), atoi(argv[2]));
 800329c:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <shellExec+0x298>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f005 fcad 	bl	8008c00 <atoi>
 80032a6:	4604      	mov	r4, r0
 80032a8:	4b4d      	ldr	r3, [pc, #308]	; (80033e0 <shellExec+0x298>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f005 fca7 	bl	8008c00 <atoi>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4619      	mov	r1, r3
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7fe f812 	bl	80012e0 <Tourner>
}
 80032bc:	e08d      	b.n	80033da <shellExec+0x292>
	else if(strcmp(argv[0],"avancerPI")==0)
 80032be:	4b48      	ldr	r3, [pc, #288]	; (80033e0 <shellExec+0x298>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4959      	ldr	r1, [pc, #356]	; (8003428 <shellExec+0x2e0>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fc ffaf 	bl	8000228 <strcmp>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d117      	bne.n	8003300 <shellExec+0x1b8>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	2225      	movs	r2, #37	; 0x25
 80032d6:	494b      	ldr	r1, [pc, #300]	; (8003404 <shellExec+0x2bc>)
 80032d8:	4844      	ldr	r0, [pc, #272]	; (80033ec <shellExec+0x2a4>)
 80032da:	f004 ffa7 	bl	800822c <HAL_UART_Transmit>
		consigneD = atoi(argv[1]);
 80032de:	4b40      	ldr	r3, [pc, #256]	; (80033e0 <shellExec+0x298>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f005 fc8c 	bl	8008c00 <atoi>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a50      	ldr	r2, [pc, #320]	; (800342c <shellExec+0x2e4>)
 80032ec:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[1]);
 80032ee:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <shellExec+0x298>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f005 fc84 	bl	8008c00 <atoi>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4a4d      	ldr	r2, [pc, #308]	; (8003430 <shellExec+0x2e8>)
 80032fc:	6013      	str	r3, [r2, #0]
}
 80032fe:	e06c      	b.n	80033da <shellExec+0x292>
	else if(strcmp(argv[0],"actionPI")==0)
 8003300:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <shellExec+0x298>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	494b      	ldr	r1, [pc, #300]	; (8003434 <shellExec+0x2ec>)
 8003306:	4618      	mov	r0, r3
 8003308:	f7fc ff8e 	bl	8000228 <strcmp>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d12b      	bne.n	800336a <shellExec+0x222>
		HAL_UART_Transmit(&huart1, avancer, sizeof(avancer), HAL_MAX_DELAY);
 8003312:	f04f 33ff 	mov.w	r3, #4294967295
 8003316:	2225      	movs	r2, #37	; 0x25
 8003318:	493a      	ldr	r1, [pc, #232]	; (8003404 <shellExec+0x2bc>)
 800331a:	4834      	ldr	r0, [pc, #208]	; (80033ec <shellExec+0x2a4>)
 800331c:	f004 ff86 	bl	800822c <HAL_UART_Transmit>
		action = atoi(argv[1]);
 8003320:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <shellExec+0x298>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4618      	mov	r0, r3
 8003326:	f005 fc6b 	bl	8008c00 <atoi>
 800332a:	4603      	mov	r3, r0
 800332c:	4a42      	ldr	r2, [pc, #264]	; (8003438 <shellExec+0x2f0>)
 800332e:	6013      	str	r3, [r2, #0]
		if(action ==2) sens = atoi(argv[3]);
 8003330:	4b41      	ldr	r3, [pc, #260]	; (8003438 <shellExec+0x2f0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d107      	bne.n	8003348 <shellExec+0x200>
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <shellExec+0x298>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4618      	mov	r0, r3
 800333e:	f005 fc5f 	bl	8008c00 <atoi>
 8003342:	4603      	mov	r3, r0
 8003344:	4a3d      	ldr	r2, [pc, #244]	; (800343c <shellExec+0x2f4>)
 8003346:	6013      	str	r3, [r2, #0]
		consigneD = atoi(argv[2]);
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <shellExec+0x298>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4618      	mov	r0, r3
 800334e:	f005 fc57 	bl	8008c00 <atoi>
 8003352:	4603      	mov	r3, r0
 8003354:	4a35      	ldr	r2, [pc, #212]	; (800342c <shellExec+0x2e4>)
 8003356:	6013      	str	r3, [r2, #0]
		consigneG = atoi(argv[2]);
 8003358:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <shellExec+0x298>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4618      	mov	r0, r3
 800335e:	f005 fc4f 	bl	8008c00 <atoi>
 8003362:	4603      	mov	r3, r0
 8003364:	4a32      	ldr	r2, [pc, #200]	; (8003430 <shellExec+0x2e8>)
 8003366:	6013      	str	r3, [r2, #0]
}
 8003368:	e037      	b.n	80033da <shellExec+0x292>
	else if(strcmp(argv[0],"servo")==0)
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <shellExec+0x298>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4934      	ldr	r1, [pc, #208]	; (8003440 <shellExec+0x2f8>)
 8003370:	4618      	mov	r0, r3
 8003372:	f7fc ff59 	bl	8000228 <strcmp>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d12c      	bne.n	80033d6 <shellExec+0x28e>
		HAL_UART_Transmit(&huart1, servo, sizeof(servo), HAL_MAX_DELAY);
 800337c:	f04f 33ff 	mov.w	r3, #4294967295
 8003380:	2217      	movs	r2, #23
 8003382:	4930      	ldr	r1, [pc, #192]	; (8003444 <shellExec+0x2fc>)
 8003384:	4819      	ldr	r0, [pc, #100]	; (80033ec <shellExec+0x2a4>)
 8003386:	f004 ff51 	bl	800822c <HAL_UART_Transmit>
		if(strcmp(argv[1],"ouvert")==0)
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <shellExec+0x298>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	492e      	ldr	r1, [pc, #184]	; (8003448 <shellExec+0x300>)
 8003390:	4618      	mov	r0, r3
 8003392:	f7fc ff49 	bl	8000228 <strcmp>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d104      	bne.n	80033a6 <shellExec+0x25e>
			ControlServo(SERVO_OPEN);
 800339c:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80033a0:	f7fe f9ac 	bl	80016fc <ControlServo>
}
 80033a4:	e019      	b.n	80033da <shellExec+0x292>
		else if(strcmp(argv[1],"ferme")==0)
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <shellExec+0x298>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4928      	ldr	r1, [pc, #160]	; (800344c <shellExec+0x304>)
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fc ff3b 	bl	8000228 <strcmp>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d104      	bne.n	80033c2 <shellExec+0x27a>
			ControlServo(SERVO_CLOSED);
 80033b8:	f44f 7052 	mov.w	r0, #840	; 0x348
 80033bc:	f7fe f99e 	bl	80016fc <ControlServo>
}
 80033c0:	e00b      	b.n	80033da <shellExec+0x292>
		else ControlServo(atoi(argv[1]));
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <shellExec+0x298>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 fc1a 	bl	8008c00 <atoi>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe f994 	bl	80016fc <ControlServo>
}
 80033d4:	e001      	b.n	80033da <shellExec+0x292>
		shellCmdNotFound();
 80033d6:	f7ff fe33 	bl	8003040 <shellCmdNotFound>
}
 80033da:	bf00      	nop
 80033dc:	bd98      	pop	{r3, r4, r7, pc}
 80033de:	bf00      	nop
 80033e0:	200009b8 	.word	0x200009b8
 80033e4:	0800d830 	.word	0x0800d830
 80033e8:	2000018c 	.word	0x2000018c
 80033ec:	20000be4 	.word	0x20000be4
 80033f0:	0800d838 	.word	0x0800d838
 80033f4:	200003c0 	.word	0x200003c0
 80033f8:	0800d840 	.word	0x0800d840
 80033fc:	2000051c 	.word	0x2000051c
 8003400:	0800d844 	.word	0x0800d844
 8003404:	20000540 	.word	0x20000540
 8003408:	0800d84c 	.word	0x0800d84c
 800340c:	20000568 	.word	0x20000568
 8003410:	0800d854 	.word	0x0800d854
 8003414:	20000590 	.word	0x20000590
 8003418:	0800d85c 	.word	0x0800d85c
 800341c:	0800d864 	.word	0x0800d864
 8003420:	0800d868 	.word	0x0800d868
 8003424:	200005a8 	.word	0x200005a8
 8003428:	0800d86c 	.word	0x0800d86c
 800342c:	2000090c 	.word	0x2000090c
 8003430:	20000914 	.word	0x20000914
 8003434:	0800d878 	.word	0x0800d878
 8003438:	2000010c 	.word	0x2000010c
 800343c:	20000918 	.word	0x20000918
 8003440:	0800d884 	.word	0x0800d884
 8003444:	200005d8 	.word	0x200005d8
 8003448:	0800d88c 	.word	0x0800d88c
 800344c:	0800d894 	.word	0x0800d894

08003450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <HAL_MspInit+0x5c>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	4a14      	ldr	r2, [pc, #80]	; (80034ac <HAL_MspInit+0x5c>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6193      	str	r3, [r2, #24]
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <HAL_MspInit+0x5c>)
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_MspInit+0x5c>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <HAL_MspInit+0x5c>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	61d3      	str	r3, [r2, #28]
 800347a:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <HAL_MspInit+0x5c>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_MspInit+0x60>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <HAL_MspInit+0x60>)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034a2:	bf00      	nop
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40010000 	.word	0x40010000

080034b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b8:	e7fe      	b.n	80034b8 <NMI_Handler+0x4>

080034ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034be:	e7fe      	b.n	80034be <HardFault_Handler+0x4>

080034c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c4:	e7fe      	b.n	80034c4 <MemManage_Handler+0x4>

080034c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ca:	e7fe      	b.n	80034ca <BusFault_Handler+0x4>

080034cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d0:	e7fe      	b.n	80034d0 <UsageFault_Handler+0x4>

080034d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034fa:	f000 fe9f 	bl	800423c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <TIM1_UP_IRQHandler+0x10>)
 800350a:	f003 ffe5 	bl	80074d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	200009e4 	.word	0x200009e4

08003518 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800351c:	4802      	ldr	r0, [pc, #8]	; (8003528 <TIM4_IRQHandler+0x10>)
 800351e:	f003 ffdb 	bl	80074d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000abc 	.word	0x20000abc

0800352c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <USART1_IRQHandler+0x10>)
 8003532:	f004 ff3d 	bl	80083b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000be4 	.word	0x20000be4

08003540 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <USART2_IRQHandler+0x10>)
 8003546:	f004 ff33 	bl	80083b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000c28 	.word	0x20000c28

08003554 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8003558:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800355c:	f001 fdb4 	bl	80050c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}

08003564 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <TIM6_IRQHandler+0x10>)
 800356a:	f003 ffb5 	bl	80074d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000b4c 	.word	0x20000b4c

08003578 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <TIM7_IRQHandler+0x10>)
 800357e:	f003 ffab 	bl	80074d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000b94 	.word	0x20000b94

0800358c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
	return 1;
 8003590:	2301      	movs	r3, #1
}
 8003592:	4618      	mov	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <_kill>:

int _kill(int pid, int sig)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035a4:	f005 fb30 	bl	8008c08 <__errno>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2216      	movs	r2, #22
 80035ac:	601a      	str	r2, [r3, #0]
	return -1;
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <_exit>:

void _exit (int status)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035c2:	f04f 31ff 	mov.w	r1, #4294967295
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ffe7 	bl	800359a <_kill>
	while (1) {}		/* Make sure we hang here */
 80035cc:	e7fe      	b.n	80035cc <_exit+0x12>

080035ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e00a      	b.n	80035f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035e0:	f3af 8000 	nop.w
 80035e4:	4601      	mov	r1, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	60ba      	str	r2, [r7, #8]
 80035ec:	b2ca      	uxtb	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3301      	adds	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	dbf0      	blt.n	80035e0 <_read+0x12>
	}

return len;
 80035fe:	687b      	ldr	r3, [r7, #4]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e009      	b.n	800362e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	60ba      	str	r2, [r7, #8]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fae2 	bl	8002bec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3301      	adds	r3, #1
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	dbf1      	blt.n	800361a <_write+0x12>
	}
	return len;
 8003636:	687b      	ldr	r3, [r7, #4]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <_close>:

int _close(int file)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	return -1;
 8003648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003666:	605a      	str	r2, [r3, #4]
	return 0;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <_isatty>:

int _isatty(int file)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	return 1;
 800367c:	2301      	movs	r3, #1
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
	return 0;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a8:	4a14      	ldr	r2, [pc, #80]	; (80036fc <_sbrk+0x5c>)
 80036aa:	4b15      	ldr	r3, [pc, #84]	; (8003700 <_sbrk+0x60>)
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <_sbrk+0x64>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <_sbrk+0x64>)
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <_sbrk+0x68>)
 80036c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <_sbrk+0x64>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d207      	bcs.n	80036e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036d0:	f005 fa9a 	bl	8008c08 <__errno>
 80036d4:	4603      	mov	r3, r0
 80036d6:	220c      	movs	r2, #12
 80036d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295
 80036de:	e009      	b.n	80036f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <_sbrk+0x64>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <_sbrk+0x64>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	4a05      	ldr	r2, [pc, #20]	; (8003704 <_sbrk+0x64>)
 80036f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036f2:	68fb      	ldr	r3, [r7, #12]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	2000c000 	.word	0x2000c000
 8003700:	00000400 	.word	0x00000400
 8003704:	200009e0 	.word	0x200009e0
 8003708:	20000c80 	.word	0x20000c80

0800370c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b096      	sub	sp, #88	; 0x58
 800371c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800371e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	609a      	str	r2, [r3, #8]
 800372a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800372c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	611a      	str	r2, [r3, #16]
 8003746:	615a      	str	r2, [r3, #20]
 8003748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	2220      	movs	r2, #32
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f005 fa91 	bl	8008c78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003756:	4b50      	ldr	r3, [pc, #320]	; (8003898 <MX_TIM1_Init+0x180>)
 8003758:	4a50      	ldr	r2, [pc, #320]	; (800389c <MX_TIM1_Init+0x184>)
 800375a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 800375c:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <MX_TIM1_Init+0x180>)
 800375e:	2211      	movs	r2, #17
 8003760:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003762:	4b4d      	ldr	r3, [pc, #308]	; (8003898 <MX_TIM1_Init+0x180>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8003768:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <MX_TIM1_Init+0x180>)
 800376a:	22c7      	movs	r2, #199	; 0xc7
 800376c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376e:	4b4a      	ldr	r3, [pc, #296]	; (8003898 <MX_TIM1_Init+0x180>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003774:	4b48      	ldr	r3, [pc, #288]	; (8003898 <MX_TIM1_Init+0x180>)
 8003776:	2200      	movs	r2, #0
 8003778:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800377a:	4b47      	ldr	r3, [pc, #284]	; (8003898 <MX_TIM1_Init+0x180>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003780:	4845      	ldr	r0, [pc, #276]	; (8003898 <MX_TIM1_Init+0x180>)
 8003782:	f003 fab7 	bl	8006cf4 <HAL_TIM_Base_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800378c:	f7ff fc28 	bl	8002fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003794:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003796:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800379a:	4619      	mov	r1, r3
 800379c:	483e      	ldr	r0, [pc, #248]	; (8003898 <MX_TIM1_Init+0x180>)
 800379e:	f004 f861 	bl	8007864 <HAL_TIM_ConfigClockSource>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80037a8:	f7ff fc1a 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037ac:	483a      	ldr	r0, [pc, #232]	; (8003898 <MX_TIM1_Init+0x180>)
 80037ae:	f003 fb51 	bl	8006e54 <HAL_TIM_PWM_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80037b8:	f7ff fc12 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037bc:	2300      	movs	r3, #0
 80037be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037c8:	4619      	mov	r1, r3
 80037ca:	4833      	ldr	r0, [pc, #204]	; (8003898 <MX_TIM1_Init+0x180>)
 80037cc:	f004 fc12 	bl	8007ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80037d6:	f7ff fc03 	bl	8002fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037da:	2360      	movs	r3, #96	; 0x60
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037e2:	2300      	movs	r3, #0
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037e6:	2300      	movs	r3, #0
 80037e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fa:	2200      	movs	r2, #0
 80037fc:	4619      	mov	r1, r3
 80037fe:	4826      	ldr	r0, [pc, #152]	; (8003898 <MX_TIM1_Init+0x180>)
 8003800:	f003 ff72 	bl	80076e8 <HAL_TIM_PWM_ConfigChannel>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800380a:	f7ff fbe9 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800380e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003812:	2204      	movs	r2, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4820      	ldr	r0, [pc, #128]	; (8003898 <MX_TIM1_Init+0x180>)
 8003818:	f003 ff66 	bl	80076e8 <HAL_TIM_PWM_ConfigChannel>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003822:	f7ff fbdd 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382a:	2208      	movs	r2, #8
 800382c:	4619      	mov	r1, r3
 800382e:	481a      	ldr	r0, [pc, #104]	; (8003898 <MX_TIM1_Init+0x180>)
 8003830:	f003 ff5a 	bl	80076e8 <HAL_TIM_PWM_ConfigChannel>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800383a:	f7ff fbd1 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800383e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003842:	220c      	movs	r2, #12
 8003844:	4619      	mov	r1, r3
 8003846:	4814      	ldr	r0, [pc, #80]	; (8003898 <MX_TIM1_Init+0x180>)
 8003848:	f003 ff4e 	bl	80076e8 <HAL_TIM_PWM_ConfigChannel>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8003852:	f7ff fbc5 	bl	8002fe0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800386a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800386e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003870:	2300      	movs	r3, #0
 8003872:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	4619      	mov	r1, r3
 8003878:	4807      	ldr	r0, [pc, #28]	; (8003898 <MX_TIM1_Init+0x180>)
 800387a:	f004 fc27 	bl	80080cc <HAL_TIMEx_ConfigBreakDeadTime>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003884:	f7ff fbac 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003888:	4803      	ldr	r0, [pc, #12]	; (8003898 <MX_TIM1_Init+0x180>)
 800388a:	f000 fb09 	bl	8003ea0 <HAL_TIM_MspPostInit>

}
 800388e:	bf00      	nop
 8003890:	3758      	adds	r7, #88	; 0x58
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200009e4 	.word	0x200009e4
 800389c:	40012c00 	.word	0x40012c00

080038a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	; 0x30
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f005 f9e2 	bl	8008c78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <MX_TIM2_Init+0xa4>)
 80038be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80038c4:	4b1f      	ldr	r3, [pc, #124]	; (8003944 <MX_TIM2_Init+0xa4>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ca:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <MX_TIM2_Init+0xa4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80038d0:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <MX_TIM2_Init+0xa4>)
 80038d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <MX_TIM2_Init+0xa4>)
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038de:	4b19      	ldr	r3, [pc, #100]	; (8003944 <MX_TIM2_Init+0xa4>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80038e4:	2301      	movs	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038ec:	2301      	movs	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038f8:	2300      	movs	r3, #0
 80038fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038fc:	2301      	movs	r3, #1
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003900:	2300      	movs	r3, #0
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	4619      	mov	r1, r3
 800390e:	480d      	ldr	r0, [pc, #52]	; (8003944 <MX_TIM2_Init+0xa4>)
 8003910:	f003 fcb2 	bl	8007278 <HAL_TIM_Encoder_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800391a:	f7ff fb61 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	4619      	mov	r1, r3
 800392a:	4806      	ldr	r0, [pc, #24]	; (8003944 <MX_TIM2_Init+0xa4>)
 800392c:	f004 fb62 	bl	8007ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003936:	f7ff fb53 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800393a:	bf00      	nop
 800393c:	3730      	adds	r7, #48	; 0x30
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000a2c 	.word	0x20000a2c

08003948 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08e      	sub	sp, #56	; 0x38
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800394e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800395c:	f107 0320 	add.w	r3, r7, #32
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003966:	1d3b      	adds	r3, r7, #4
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	611a      	str	r2, [r3, #16]
 8003974:	615a      	str	r2, [r3, #20]
 8003976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <MX_TIM3_Init+0xe8>)
 800397a:	4a2e      	ldr	r2, [pc, #184]	; (8003a34 <MX_TIM3_Init+0xec>)
 800397c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800397e:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <MX_TIM3_Init+0xe8>)
 8003980:	2247      	movs	r2, #71	; 0x47
 8003982:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <MX_TIM3_Init+0xe8>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800398a:	4b29      	ldr	r3, [pc, #164]	; (8003a30 <MX_TIM3_Init+0xe8>)
 800398c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003990:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003992:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <MX_TIM3_Init+0xe8>)
 8003994:	2200      	movs	r2, #0
 8003996:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003998:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <MX_TIM3_Init+0xe8>)
 800399a:	2200      	movs	r2, #0
 800399c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800399e:	4824      	ldr	r0, [pc, #144]	; (8003a30 <MX_TIM3_Init+0xe8>)
 80039a0:	f003 f9a8 	bl	8006cf4 <HAL_TIM_Base_Init>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80039aa:	f7ff fb19 	bl	8002fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039b8:	4619      	mov	r1, r3
 80039ba:	481d      	ldr	r0, [pc, #116]	; (8003a30 <MX_TIM3_Init+0xe8>)
 80039bc:	f003 ff52 	bl	8007864 <HAL_TIM_ConfigClockSource>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80039c6:	f7ff fb0b 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039ca:	4819      	ldr	r0, [pc, #100]	; (8003a30 <MX_TIM3_Init+0xe8>)
 80039cc:	f003 fa42 	bl	8006e54 <HAL_TIM_PWM_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80039d6:	f7ff fb03 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039e2:	f107 0320 	add.w	r3, r7, #32
 80039e6:	4619      	mov	r1, r3
 80039e8:	4811      	ldr	r0, [pc, #68]	; (8003a30 <MX_TIM3_Init+0xe8>)
 80039ea:	f004 fb03 	bl	8007ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80039f4:	f7ff faf4 	bl	8002fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039f8:	2360      	movs	r3, #96	; 0x60
 80039fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 512;
 80039fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4807      	ldr	r0, [pc, #28]	; (8003a30 <MX_TIM3_Init+0xe8>)
 8003a12:	f003 fe69 	bl	80076e8 <HAL_TIM_PWM_ConfigChannel>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003a1c:	f7ff fae0 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a20:	4803      	ldr	r0, [pc, #12]	; (8003a30 <MX_TIM3_Init+0xe8>)
 8003a22:	f000 fa3d 	bl	8003ea0 <HAL_TIM_MspPostInit>

}
 8003a26:	bf00      	nop
 8003a28:	3738      	adds	r7, #56	; 0x38
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000a74 	.word	0x20000a74
 8003a34:	40000400 	.word	0x40000400

08003a38 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4c:	463b      	mov	r3, r7
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <MX_TIM4_Init+0x94>)
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <MX_TIM4_Init+0x98>)
 8003a58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <MX_TIM4_Init+0x94>)
 8003a5c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003a60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a62:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <MX_TIM4_Init+0x94>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8003a68:	4b18      	ldr	r3, [pc, #96]	; (8003acc <MX_TIM4_Init+0x94>)
 8003a6a:	220a      	movs	r2, #10
 8003a6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a6e:	4b17      	ldr	r3, [pc, #92]	; (8003acc <MX_TIM4_Init+0x94>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a74:	4b15      	ldr	r3, [pc, #84]	; (8003acc <MX_TIM4_Init+0x94>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a7a:	4814      	ldr	r0, [pc, #80]	; (8003acc <MX_TIM4_Init+0x94>)
 8003a7c:	f003 f93a 	bl	8006cf4 <HAL_TIM_Base_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003a86:	f7ff faab 	bl	8002fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a90:	f107 0308 	add.w	r3, r7, #8
 8003a94:	4619      	mov	r1, r3
 8003a96:	480d      	ldr	r0, [pc, #52]	; (8003acc <MX_TIM4_Init+0x94>)
 8003a98:	f003 fee4 	bl	8007864 <HAL_TIM_ConfigClockSource>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003aa2:	f7ff fa9d 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003aae:	463b      	mov	r3, r7
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4806      	ldr	r0, [pc, #24]	; (8003acc <MX_TIM4_Init+0x94>)
 8003ab4:	f004 fa9e 	bl	8007ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003abe:	f7ff fa8f 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ac2:	bf00      	nop
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000abc 	.word	0x20000abc
 8003ad0:	40000800 	.word	0x40000800

08003ad4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08c      	sub	sp, #48	; 0x30
 8003ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f005 f8c8 	bl	8008c78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003af0:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <MX_TIM5_Init+0xa0>)
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <MX_TIM5_Init+0xa4>)
 8003af4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003af6:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <MX_TIM5_Init+0xa0>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <MX_TIM5_Init+0xa0>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <MX_TIM5_Init+0xa0>)
 8003b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b08:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0a:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <MX_TIM5_Init+0xa0>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b10:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <MX_TIM5_Init+0xa0>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003b16:	2301      	movs	r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b32:	2300      	movs	r3, #0
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003b3a:	f107 030c 	add.w	r3, r7, #12
 8003b3e:	4619      	mov	r1, r3
 8003b40:	480c      	ldr	r0, [pc, #48]	; (8003b74 <MX_TIM5_Init+0xa0>)
 8003b42:	f003 fb99 	bl	8007278 <HAL_TIM_Encoder_Init>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003b4c:	f7ff fa48 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b50:	2300      	movs	r3, #0
 8003b52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b58:	1d3b      	adds	r3, r7, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4805      	ldr	r0, [pc, #20]	; (8003b74 <MX_TIM5_Init+0xa0>)
 8003b5e:	f004 fa49 	bl	8007ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003b68:	f7ff fa3a 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003b6c:	bf00      	nop
 8003b6e:	3730      	adds	r7, #48	; 0x30
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000b04 	.word	0x20000b04
 8003b78:	40000c00 	.word	0x40000c00

08003b7c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b82:	463b      	mov	r3, r7
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <MX_TIM6_Init+0x64>)
 8003b8c:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <MX_TIM6_Init+0x68>)
 8003b8e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200;
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <MX_TIM6_Init+0x64>)
 8003b92:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003b96:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <MX_TIM6_Init+0x64>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <MX_TIM6_Init+0x64>)
 8003ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ba4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <MX_TIM6_Init+0x64>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003bac:	480c      	ldr	r0, [pc, #48]	; (8003be0 <MX_TIM6_Init+0x64>)
 8003bae:	f003 f8a1 	bl	8006cf4 <HAL_TIM_Base_Init>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003bb8:	f7ff fa12 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003bc4:	463b      	mov	r3, r7
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4805      	ldr	r0, [pc, #20]	; (8003be0 <MX_TIM6_Init+0x64>)
 8003bca:	f004 fa13 	bl	8007ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003bd4:	f7ff fa04 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000b4c 	.word	0x20000b4c
 8003be4:	40001000 	.word	0x40001000

08003be8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bee:	463b      	mov	r3, r7
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003bf6:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <MX_TIM7_Init+0x64>)
 8003bf8:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <MX_TIM7_Init+0x68>)
 8003bfa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200;
 8003bfc:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <MX_TIM7_Init+0x64>)
 8003bfe:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003c02:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <MX_TIM7_Init+0x64>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <MX_TIM7_Init+0x64>)
 8003c0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c10:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <MX_TIM7_Init+0x64>)
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c18:	480c      	ldr	r0, [pc, #48]	; (8003c4c <MX_TIM7_Init+0x64>)
 8003c1a:	f003 f86b 	bl	8006cf4 <HAL_TIM_Base_Init>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003c24:	f7ff f9dc 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c30:	463b      	mov	r3, r7
 8003c32:	4619      	mov	r1, r3
 8003c34:	4805      	ldr	r0, [pc, #20]	; (8003c4c <MX_TIM7_Init+0x64>)
 8003c36:	f004 f9dd 	bl	8007ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003c40:	f7ff f9ce 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000b94 	.word	0x20000b94
 8003c50:	40001400 	.word	0x40001400

08003c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a3d      	ldr	r2, [pc, #244]	; (8003d58 <HAL_TIM_Base_MspInit+0x104>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d114      	bne.n	8003c90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c66:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	4a3c      	ldr	r2, [pc, #240]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003c6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c70:	6193      	str	r3, [r2, #24]
 8003c72:	4b3a      	ldr	r3, [pc, #232]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	2019      	movs	r0, #25
 8003c84:	f000 fe15 	bl	80048b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003c88:	2019      	movs	r0, #25
 8003c8a:	f000 fe2e 	bl	80048ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003c8e:	e05e      	b.n	8003d4e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM3)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a32      	ldr	r2, [pc, #200]	; (8003d60 <HAL_TIM_Base_MspInit+0x10c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10c      	bne.n	8003cb4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c9a:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4a2f      	ldr	r2, [pc, #188]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	61d3      	str	r3, [r2, #28]
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	69bb      	ldr	r3, [r7, #24]
}
 8003cb2:	e04c      	b.n	8003d4e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM4)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a2a      	ldr	r2, [pc, #168]	; (8003d64 <HAL_TIM_Base_MspInit+0x110>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d114      	bne.n	8003ce8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cbe:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003cc4:	f043 0304 	orr.w	r3, r3, #4
 8003cc8:	61d3      	str	r3, [r2, #28]
 8003cca:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2100      	movs	r1, #0
 8003cda:	201e      	movs	r0, #30
 8003cdc:	f000 fde9 	bl	80048b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ce0:	201e      	movs	r0, #30
 8003ce2:	f000 fe02 	bl	80048ea <HAL_NVIC_EnableIRQ>
}
 8003ce6:	e032      	b.n	8003d4e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM6)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_TIM_Base_MspInit+0x114>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d114      	bne.n	8003d1c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003cf2:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003cf8:	f043 0310 	orr.w	r3, r3, #16
 8003cfc:	61d3      	str	r3, [r2, #28]
 8003cfe:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	2036      	movs	r0, #54	; 0x36
 8003d10:	f000 fdcf 	bl	80048b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003d14:	2036      	movs	r0, #54	; 0x36
 8003d16:	f000 fde8 	bl	80048ea <HAL_NVIC_EnableIRQ>
}
 8003d1a:	e018      	b.n	8003d4e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM7)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <HAL_TIM_Base_MspInit+0x118>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d113      	bne.n	8003d4e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003d2c:	f043 0320 	orr.w	r3, r3, #32
 8003d30:	61d3      	str	r3, [r2, #28]
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_TIM_Base_MspInit+0x108>)
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2100      	movs	r1, #0
 8003d42:	2037      	movs	r0, #55	; 0x37
 8003d44:	f000 fdb5 	bl	80048b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003d48:	2037      	movs	r0, #55	; 0x37
 8003d4a:	f000 fdce 	bl	80048ea <HAL_NVIC_EnableIRQ>
}
 8003d4e:	bf00      	nop
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40001000 	.word	0x40001000
 8003d6c:	40001400 	.word	0x40001400

08003d70 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	; 0x30
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d78:	f107 031c 	add.w	r3, r7, #28
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d14f      	bne.n	8003e30 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d90:	4b3e      	ldr	r3, [pc, #248]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4a3d      	ldr	r2, [pc, #244]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	61d3      	str	r3, [r2, #28]
 8003d9c:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da8:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4a37      	ldr	r2, [pc, #220]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003dae:	f043 0304 	orr.w	r3, r3, #4
 8003db2:	6193      	str	r3, [r2, #24]
 8003db4:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc0:	4b32      	ldr	r3, [pc, #200]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4a31      	ldr	r2, [pc, #196]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003dc6:	f043 0308 	orr.w	r3, r3, #8
 8003dca:	6193      	str	r3, [r2, #24]
 8003dcc:	4b2f      	ldr	r3, [pc, #188]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_A_Pin;
 8003dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dde:	2300      	movs	r3, #0
 8003de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8003de6:	f107 031c 	add.w	r3, r7, #28
 8003dea:	4619      	mov	r1, r3
 8003dec:	4828      	ldr	r0, [pc, #160]	; (8003e90 <HAL_TIM_Encoder_MspInit+0x120>)
 8003dee:	f000 fed9 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_1_ENCODER_B_Pin;
 8003df2:	2308      	movs	r3, #8
 8003df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df6:	2300      	movs	r3, #0
 8003df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8003dfe:	f107 031c 	add.w	r3, r7, #28
 8003e02:	4619      	mov	r1, r3
 8003e04:	4823      	ldr	r0, [pc, #140]	; (8003e94 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e06:	f000 fecd 	bl	8004ba4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003e0a:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <HAL_TIM_Encoder_MspInit+0x128>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e28:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <HAL_TIM_Encoder_MspInit+0x128>)
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003e2e:	e028      	b.n	8003e82 <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM5)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <HAL_TIM_Encoder_MspInit+0x12c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d123      	bne.n	8003e82 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003e40:	f043 0308 	orr.w	r3, r3, #8
 8003e44:	61d3      	str	r3, [r2, #28]
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	6193      	str	r3, [r2, #24]
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_2_ENCODER_A_Pin|MOTOR_2_ENCODER_B_Pin;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e76:	f107 031c 	add.w	r3, r7, #28
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4804      	ldr	r0, [pc, #16]	; (8003e90 <HAL_TIM_Encoder_MspInit+0x120>)
 8003e7e:	f000 fe91 	bl	8004ba4 <HAL_GPIO_Init>
}
 8003e82:	bf00      	nop
 8003e84:	3730      	adds	r7, #48	; 0x30
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40010800 	.word	0x40010800
 8003e94:	40010c00 	.word	0x40010c00
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40000c00 	.word	0x40000c00

08003ea0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea8:	f107 0314 	add.w	r3, r7, #20
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <HAL_TIM_MspPostInit+0xbc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d119      	bne.n	8003ef4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec0:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <HAL_TIM_MspPostInit+0xc0>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	4a26      	ldr	r2, [pc, #152]	; (8003f60 <HAL_TIM_MspPostInit+0xc0>)
 8003ec6:	f043 0304 	orr.w	r3, r3, #4
 8003eca:	6193      	str	r3, [r2, #24]
 8003ecc:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <HAL_TIM_MspPostInit+0xc0>)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_IN2_Pin|MOTOR_2_PWM_IN1_Pin|MOTOR_1_PWM_IN2_Pin|MOTOR_1_PWM_IN1_Pin;
 8003ed8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee6:	f107 0314 	add.w	r3, r7, #20
 8003eea:	4619      	mov	r1, r3
 8003eec:	481d      	ldr	r0, [pc, #116]	; (8003f64 <HAL_TIM_MspPostInit+0xc4>)
 8003eee:	f000 fe59 	bl	8004ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ef2:	e02e      	b.n	8003f52 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM3)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	; (8003f68 <HAL_TIM_MspPostInit+0xc8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d129      	bne.n	8003f52 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efe:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <HAL_TIM_MspPostInit+0xc0>)
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	4a17      	ldr	r2, [pc, #92]	; (8003f60 <HAL_TIM_MspPostInit+0xc0>)
 8003f04:	f043 0310 	orr.w	r3, r3, #16
 8003f08:	6193      	str	r3, [r2, #24]
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_TIM_MspPostInit+0xc0>)
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINCE_PWM_Pin;
 8003f16:	2340      	movs	r3, #64	; 0x40
 8003f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PINCE_PWM_GPIO_Port, &GPIO_InitStruct);
 8003f22:	f107 0314 	add.w	r3, r7, #20
 8003f26:	4619      	mov	r1, r3
 8003f28:	4810      	ldr	r0, [pc, #64]	; (8003f6c <HAL_TIM_MspPostInit+0xcc>)
 8003f2a:	f000 fe3b 	bl	8004ba4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_TIM_MspPostInit+0xd0>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <HAL_TIM_MspPostInit+0xd0>)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	6053      	str	r3, [r2, #4]
}
 8003f52:	bf00      	nop
 8003f54:	3728      	adds	r7, #40	; 0x28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40010800 	.word	0x40010800
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40011000 	.word	0x40011000
 8003f70:	40010000 	.word	0x40010000

08003f74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f78:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <MX_USART1_UART_Init+0x4c>)
 8003f7a:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <MX_USART1_UART_Init+0x50>)
 8003f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <MX_USART1_UART_Init+0x4c>)
 8003f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f86:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <MX_USART1_UART_Init+0x4c>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <MX_USART1_UART_Init+0x4c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <MX_USART1_UART_Init+0x4c>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f98:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <MX_USART1_UART_Init+0x4c>)
 8003f9a:	220c      	movs	r2, #12
 8003f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <MX_USART1_UART_Init+0x4c>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <MX_USART1_UART_Init+0x4c>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003faa:	4805      	ldr	r0, [pc, #20]	; (8003fc0 <MX_USART1_UART_Init+0x4c>)
 8003fac:	f004 f8f1 	bl	8008192 <HAL_UART_Init>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003fb6:	f7ff f813 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000be4 	.word	0x20000be4
 8003fc4:	40013800 	.word	0x40013800

08003fc8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <MX_USART2_UART_Init+0x4c>)
 8003fce:	4a12      	ldr	r2, [pc, #72]	; (8004018 <MX_USART2_UART_Init+0x50>)
 8003fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <MX_USART2_UART_Init+0x4c>)
 8003fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <MX_USART2_UART_Init+0x4c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <MX_USART2_UART_Init+0x4c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <MX_USART2_UART_Init+0x4c>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <MX_USART2_UART_Init+0x4c>)
 8003fee:	220c      	movs	r2, #12
 8003ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <MX_USART2_UART_Init+0x4c>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <MX_USART2_UART_Init+0x4c>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ffe:	4805      	ldr	r0, [pc, #20]	; (8004014 <MX_USART2_UART_Init+0x4c>)
 8004000:	f004 f8c7 	bl	8008192 <HAL_UART_Init>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800400a:	f7fe ffe9 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000c28 	.word	0x20000c28
 8004018:	40004400 	.word	0x40004400

0800401c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08c      	sub	sp, #48	; 0x30
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004024:	f107 031c 	add.w	r3, r7, #28
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a45      	ldr	r2, [pc, #276]	; (800414c <HAL_UART_MspInit+0x130>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d146      	bne.n	80040ca <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800403c:	4b44      	ldr	r3, [pc, #272]	; (8004150 <HAL_UART_MspInit+0x134>)
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4a43      	ldr	r2, [pc, #268]	; (8004150 <HAL_UART_MspInit+0x134>)
 8004042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004046:	6193      	str	r3, [r2, #24]
 8004048:	4b41      	ldr	r3, [pc, #260]	; (8004150 <HAL_UART_MspInit+0x134>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004054:	4b3e      	ldr	r3, [pc, #248]	; (8004150 <HAL_UART_MspInit+0x134>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	4a3d      	ldr	r2, [pc, #244]	; (8004150 <HAL_UART_MspInit+0x134>)
 800405a:	f043 0308 	orr.w	r3, r3, #8
 800405e:	6193      	str	r3, [r2, #24]
 8004060:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_UART_MspInit+0x134>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_USART1_TX_Pin;
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004074:	2303      	movs	r3, #3
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(STLINK_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8004078:	f107 031c 	add.w	r3, r7, #28
 800407c:	4619      	mov	r1, r3
 800407e:	4835      	ldr	r0, [pc, #212]	; (8004154 <HAL_UART_MspInit+0x138>)
 8004080:	f000 fd90 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_USART1_RX_Pin;
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004088:	2300      	movs	r3, #0
 800408a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408c:	2300      	movs	r3, #0
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STLINK_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8004090:	f107 031c 	add.w	r3, r7, #28
 8004094:	4619      	mov	r1, r3
 8004096:	482f      	ldr	r0, [pc, #188]	; (8004154 <HAL_UART_MspInit+0x138>)
 8004098:	f000 fd84 	bl	8004ba4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800409c:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_UART_MspInit+0x13c>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b2:	4a29      	ldr	r2, [pc, #164]	; (8004158 <HAL_UART_MspInit+0x13c>)
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80040b8:	2200      	movs	r2, #0
 80040ba:	2100      	movs	r1, #0
 80040bc:	2025      	movs	r0, #37	; 0x25
 80040be:	f000 fbf8 	bl	80048b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040c2:	2025      	movs	r0, #37	; 0x25
 80040c4:	f000 fc11 	bl	80048ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80040c8:	e03c      	b.n	8004144 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a23      	ldr	r2, [pc, #140]	; (800415c <HAL_UART_MspInit+0x140>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d137      	bne.n	8004144 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 80040d4:	4b1e      	ldr	r3, [pc, #120]	; (8004150 <HAL_UART_MspInit+0x134>)
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <HAL_UART_MspInit+0x134>)
 80040da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040de:	61d3      	str	r3, [r2, #28]
 80040e0:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <HAL_UART_MspInit+0x134>)
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ec:	4b18      	ldr	r3, [pc, #96]	; (8004150 <HAL_UART_MspInit+0x134>)
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	4a17      	ldr	r2, [pc, #92]	; (8004150 <HAL_UART_MspInit+0x134>)
 80040f2:	f043 0304 	orr.w	r3, r3, #4
 80040f6:	6193      	str	r3, [r2, #24]
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <HAL_UART_MspInit+0x134>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RASP_USART2_TX_Pin;
 8004104:	2304      	movs	r3, #4
 8004106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004108:	2302      	movs	r3, #2
 800410a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800410c:	2303      	movs	r3, #3
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RASP_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8004110:	f107 031c 	add.w	r3, r7, #28
 8004114:	4619      	mov	r1, r3
 8004116:	4812      	ldr	r0, [pc, #72]	; (8004160 <HAL_UART_MspInit+0x144>)
 8004118:	f000 fd44 	bl	8004ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RASP_USART2_RX_Pin;
 800411c:	2308      	movs	r3, #8
 800411e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004120:	2300      	movs	r3, #0
 8004122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004124:	2300      	movs	r3, #0
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RASP_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8004128:	f107 031c 	add.w	r3, r7, #28
 800412c:	4619      	mov	r1, r3
 800412e:	480c      	ldr	r0, [pc, #48]	; (8004160 <HAL_UART_MspInit+0x144>)
 8004130:	f000 fd38 	bl	8004ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004134:	2200      	movs	r2, #0
 8004136:	2100      	movs	r1, #0
 8004138:	2026      	movs	r0, #38	; 0x26
 800413a:	f000 fbba 	bl	80048b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800413e:	2026      	movs	r0, #38	; 0x26
 8004140:	f000 fbd3 	bl	80048ea <HAL_NVIC_EnableIRQ>
}
 8004144:	bf00      	nop
 8004146:	3730      	adds	r7, #48	; 0x30
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40013800 	.word	0x40013800
 8004150:	40021000 	.word	0x40021000
 8004154:	40010c00 	.word	0x40010c00
 8004158:	40010000 	.word	0x40010000
 800415c:	40004400 	.word	0x40004400
 8004160:	40010800 	.word	0x40010800

08004164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004164:	480c      	ldr	r0, [pc, #48]	; (8004198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004166:	490d      	ldr	r1, [pc, #52]	; (800419c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004168:	4a0d      	ldr	r2, [pc, #52]	; (80041a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800416a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800416c:	e002      	b.n	8004174 <LoopCopyDataInit>

0800416e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800416e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004172:	3304      	adds	r3, #4

08004174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004178:	d3f9      	bcc.n	800416e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800417a:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800417c:	4c0a      	ldr	r4, [pc, #40]	; (80041a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800417e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004180:	e001      	b.n	8004186 <LoopFillZerobss>

08004182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004184:	3204      	adds	r2, #4

08004186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004188:	d3fb      	bcc.n	8004182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800418a:	f7ff fabf 	bl	800370c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800418e:	f004 fd41 	bl	8008c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004192:	f7fe fc47 	bl	8002a24 <main>
  bx lr
 8004196:	4770      	bx	lr
  ldr r0, =_sdata
 8004198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800419c:	200007e4 	.word	0x200007e4
  ldr r2, =_sidata
 80041a0:	0800ddd8 	.word	0x0800ddd8
  ldr r2, =_sbss
 80041a4:	200007e4 	.word	0x200007e4
  ldr r4, =_ebss
 80041a8:	20000c80 	.word	0x20000c80

080041ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041ac:	e7fe      	b.n	80041ac <ADC1_2_IRQHandler>
	...

080041b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <HAL_Init+0x28>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <HAL_Init+0x28>)
 80041ba:	f043 0310 	orr.w	r3, r3, #16
 80041be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c0:	2003      	movs	r0, #3
 80041c2:	f000 fb6b 	bl	800489c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041c6:	200f      	movs	r0, #15
 80041c8:	f000 f808 	bl	80041dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041cc:	f7ff f940 	bl	8003450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40022000 	.word	0x40022000

080041dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_InitTick+0x54>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_InitTick+0x58>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fb83 	bl	8004906 <HAL_SYSTICK_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e00e      	b.n	8004228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b0f      	cmp	r3, #15
 800420e:	d80a      	bhi.n	8004226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004210:	2200      	movs	r2, #0
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	f000 fb4b 	bl	80048b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800421c:	4a06      	ldr	r2, [pc, #24]	; (8004238 <HAL_InitTick+0x5c>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000604 	.word	0x20000604
 8004234:	2000060c 	.word	0x2000060c
 8004238:	20000608 	.word	0x20000608

0800423c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_IncTick+0x1c>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_IncTick+0x20>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4413      	add	r3, r2
 800424c:	4a03      	ldr	r2, [pc, #12]	; (800425c <HAL_IncTick+0x20>)
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	2000060c 	.word	0x2000060c
 800425c:	20000c6c 	.word	0x20000c6c

08004260 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return uwTick;
 8004264:	4b02      	ldr	r3, [pc, #8]	; (8004270 <HAL_GetTick+0x10>)
 8004266:	681b      	ldr	r3, [r3, #0]
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	20000c6c 	.word	0x20000c6c

08004274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800427c:	f7ff fff0 	bl	8004260 <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d005      	beq.n	800429a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800428e:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <HAL_Delay+0x44>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800429a:	bf00      	nop
 800429c:	f7ff ffe0 	bl	8004260 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d8f7      	bhi.n	800429c <HAL_Delay+0x28>
  {
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	2000060c 	.word	0x2000060c

080042bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e0ce      	b.n	800447c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fd fa78 	bl	80017f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f9bd 	bl	8004680 <ADC_ConversionStop_Disable>
 8004306:	4603      	mov	r3, r0
 8004308:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 80a9 	bne.w	800446a <HAL_ADC_Init+0x1ae>
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 80a5 	bne.w	800446a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004328:	f023 0302 	bic.w	r3, r3, #2
 800432c:	f043 0202 	orr.w	r2, r3, #2
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4951      	ldr	r1, [pc, #324]	; (8004484 <HAL_ADC_Init+0x1c8>)
 800433e:	428b      	cmp	r3, r1
 8004340:	d10a      	bne.n	8004358 <HAL_ADC_Init+0x9c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800434a:	d002      	beq.n	8004352 <HAL_ADC_Init+0x96>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	e004      	b.n	800435c <HAL_ADC_Init+0xa0>
 8004352:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004356:	e001      	b.n	800435c <HAL_ADC_Init+0xa0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800435c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	7b1b      	ldrb	r3, [r3, #12]
 8004362:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004364:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	4313      	orrs	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004374:	d003      	beq.n	800437e <HAL_ADC_Init+0xc2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d102      	bne.n	8004384 <HAL_ADC_Init+0xc8>
 800437e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004382:	e000      	b.n	8004386 <HAL_ADC_Init+0xca>
 8004384:	2300      	movs	r3, #0
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	7d1b      	ldrb	r3, [r3, #20]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d119      	bne.n	80043c8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	7b1b      	ldrb	r3, [r3, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	035a      	lsls	r2, r3, #13
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	e00b      	b.n	80043c8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	f043 0220 	orr.w	r2, r3, #32
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	f043 0201 	orr.w	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	430a      	orrs	r2, r1
 80043da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	4b29      	ldr	r3, [pc, #164]	; (8004488 <HAL_ADC_Init+0x1cc>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f8:	d003      	beq.n	8004402 <HAL_ADC_Init+0x146>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d104      	bne.n	800440c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	3b01      	subs	r3, #1
 8004408:	051b      	lsls	r3, r3, #20
 800440a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	430a      	orrs	r2, r1
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_ADC_Init+0x1d0>)
 8004428:	4013      	ands	r3, r2
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d10b      	bne.n	8004448 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	f023 0303 	bic.w	r3, r3, #3
 800443e:	f043 0201 	orr.w	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004446:	e018      	b.n	800447a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	f023 0312 	bic.w	r3, r3, #18
 8004450:	f043 0210 	orr.w	r2, r3, #16
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	f043 0201 	orr.w	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004468:	e007      	b.n	800447a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	f043 0210 	orr.w	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800447a:	7dfb      	ldrb	r3, [r7, #23]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40013c00 	.word	0x40013c00
 8004488:	ffe1f7fd 	.word	0xffe1f7fd
 800448c:	ff1f0efe 	.word	0xff1f0efe

08004490 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x20>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e0dc      	b.n	800466a <HAL_ADC_ConfigChannel+0x1da>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b06      	cmp	r3, #6
 80044be:	d81c      	bhi.n	80044fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	3b05      	subs	r3, #5
 80044d2:	221f      	movs	r2, #31
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	4019      	ands	r1, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	3b05      	subs	r3, #5
 80044ec:	fa00 f203 	lsl.w	r2, r0, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	635a      	str	r2, [r3, #52]	; 0x34
 80044f8:	e03c      	b.n	8004574 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b0c      	cmp	r3, #12
 8004500:	d81c      	bhi.n	800453c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	3b23      	subs	r3, #35	; 0x23
 8004514:	221f      	movs	r2, #31
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	4019      	ands	r1, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	3b23      	subs	r3, #35	; 0x23
 800452e:	fa00 f203 	lsl.w	r2, r0, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
 800453a:	e01b      	b.n	8004574 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	3b41      	subs	r3, #65	; 0x41
 800454e:	221f      	movs	r2, #31
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	4019      	ands	r1, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	3b41      	subs	r3, #65	; 0x41
 8004568:	fa00 f203 	lsl.w	r2, r0, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b09      	cmp	r3, #9
 800457a:	d91c      	bls.n	80045b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68d9      	ldr	r1, [r3, #12]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4613      	mov	r3, r2
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	4413      	add	r3, r2
 800458c:	3b1e      	subs	r3, #30
 800458e:	2207      	movs	r2, #7
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	4019      	ands	r1, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6898      	ldr	r0, [r3, #8]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	4413      	add	r3, r2
 80045a6:	3b1e      	subs	r3, #30
 80045a8:	fa00 f203 	lsl.w	r2, r0, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	60da      	str	r2, [r3, #12]
 80045b4:	e019      	b.n	80045ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6919      	ldr	r1, [r3, #16]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4613      	mov	r3, r2
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	4413      	add	r3, r2
 80045c6:	2207      	movs	r2, #7
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	4019      	ands	r1, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6898      	ldr	r0, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	fa00 f203 	lsl.w	r2, r0, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d003      	beq.n	80045fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045f6:	2b11      	cmp	r3, #17
 80045f8:	d132      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_ADC_ConfigChannel+0x1e4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d125      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d126      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004620:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b10      	cmp	r3, #16
 8004628:	d11a      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <HAL_ADC_ConfigChannel+0x1e8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a13      	ldr	r2, [pc, #76]	; (800467c <HAL_ADC_ConfigChannel+0x1ec>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	0c9a      	lsrs	r2, r3, #18
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004640:	e002      	b.n	8004648 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3b01      	subs	r3, #1
 8004646:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f9      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x1b2>
 800464e:	e007      	b.n	8004660 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	f043 0220 	orr.w	r2, r3, #32
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	40012400 	.word	0x40012400
 8004678:	20000604 	.word	0x20000604
 800467c:	431bde83 	.word	0x431bde83

08004680 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d12e      	bne.n	80046f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046aa:	f7ff fdd9 	bl	8004260 <HAL_GetTick>
 80046ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80046b0:	e01b      	b.n	80046ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046b2:	f7ff fdd5 	bl	8004260 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d914      	bls.n	80046ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10d      	bne.n	80046ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	f043 0210 	orr.w	r2, r3, #16
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e007      	b.n	80046fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d0dc      	beq.n	80046b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <__NVIC_SetPriorityGrouping+0x44>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004720:	4013      	ands	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800472c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004736:	4a04      	ldr	r2, [pc, #16]	; (8004748 <__NVIC_SetPriorityGrouping+0x44>)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	60d3      	str	r3, [r2, #12]
}
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004750:	4b04      	ldr	r3, [pc, #16]	; (8004764 <__NVIC_GetPriorityGrouping+0x18>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	f003 0307 	and.w	r3, r3, #7
}
 800475a:	4618      	mov	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	2b00      	cmp	r3, #0
 8004778:	db0b      	blt.n	8004792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	f003 021f 	and.w	r2, r3, #31
 8004780:	4906      	ldr	r1, [pc, #24]	; (800479c <__NVIC_EnableIRQ+0x34>)
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2001      	movs	r0, #1
 800478a:	fa00 f202 	lsl.w	r2, r0, r2
 800478e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr
 800479c:	e000e100 	.word	0xe000e100

080047a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	6039      	str	r1, [r7, #0]
 80047aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db0a      	blt.n	80047ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	490c      	ldr	r1, [pc, #48]	; (80047ec <__NVIC_SetPriority+0x4c>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	0112      	lsls	r2, r2, #4
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	440b      	add	r3, r1
 80047c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047c8:	e00a      	b.n	80047e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	4908      	ldr	r1, [pc, #32]	; (80047f0 <__NVIC_SetPriority+0x50>)
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	3b04      	subs	r3, #4
 80047d8:	0112      	lsls	r2, r2, #4
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	440b      	add	r3, r1
 80047de:	761a      	strb	r2, [r3, #24]
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	e000e100 	.word	0xe000e100
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f1c3 0307 	rsb	r3, r3, #7
 800480e:	2b04      	cmp	r3, #4
 8004810:	bf28      	it	cs
 8004812:	2304      	movcs	r3, #4
 8004814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3304      	adds	r3, #4
 800481a:	2b06      	cmp	r3, #6
 800481c:	d902      	bls.n	8004824 <NVIC_EncodePriority+0x30>
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3b03      	subs	r3, #3
 8004822:	e000      	b.n	8004826 <NVIC_EncodePriority+0x32>
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004828:	f04f 32ff 	mov.w	r2, #4294967295
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43da      	mvns	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	401a      	ands	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800483c:	f04f 31ff 	mov.w	r1, #4294967295
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	fa01 f303 	lsl.w	r3, r1, r3
 8004846:	43d9      	mvns	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800484c:	4313      	orrs	r3, r2
         );
}
 800484e:	4618      	mov	r0, r3
 8004850:	3724      	adds	r7, #36	; 0x24
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3b01      	subs	r3, #1
 8004864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004868:	d301      	bcc.n	800486e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800486a:	2301      	movs	r3, #1
 800486c:	e00f      	b.n	800488e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800486e:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <SysTick_Config+0x40>)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004876:	210f      	movs	r1, #15
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	f7ff ff90 	bl	80047a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <SysTick_Config+0x40>)
 8004882:	2200      	movs	r2, #0
 8004884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004886:	4b04      	ldr	r3, [pc, #16]	; (8004898 <SysTick_Config+0x40>)
 8004888:	2207      	movs	r2, #7
 800488a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	e000e010 	.word	0xe000e010

0800489c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ff2d 	bl	8004704 <__NVIC_SetPriorityGrouping>
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b086      	sub	sp, #24
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	4603      	mov	r3, r0
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
 80048be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048c4:	f7ff ff42 	bl	800474c <__NVIC_GetPriorityGrouping>
 80048c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	6978      	ldr	r0, [r7, #20]
 80048d0:	f7ff ff90 	bl	80047f4 <NVIC_EncodePriority>
 80048d4:	4602      	mov	r2, r0
 80048d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ff5f 	bl	80047a0 <__NVIC_SetPriority>
}
 80048e2:	bf00      	nop
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	4603      	mov	r3, r0
 80048f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ff35 	bl	8004768 <__NVIC_EnableIRQ>
}
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ffa2 	bl	8004858 <SysTick_Config>
 8004914:	4603      	mov	r3, r0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004930:	2b02      	cmp	r3, #2
 8004932:	d008      	beq.n	8004946 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2204      	movs	r2, #4
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e020      	b.n	8004988 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 020e 	bic.w	r2, r2, #14
 8004954:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	2101      	movs	r1, #1
 8004970:	fa01 f202 	lsl.w	r2, r1, r2
 8004974:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
	...

08004994 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d005      	beq.n	80049b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2204      	movs	r2, #4
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
 80049b4:	e0d6      	b.n	8004b64 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 020e 	bic.w	r2, r2, #14
 80049c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	4b64      	ldr	r3, [pc, #400]	; (8004b70 <HAL_DMA_Abort_IT+0x1dc>)
 80049de:	429a      	cmp	r2, r3
 80049e0:	d958      	bls.n	8004a94 <HAL_DMA_Abort_IT+0x100>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a63      	ldr	r2, [pc, #396]	; (8004b74 <HAL_DMA_Abort_IT+0x1e0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d04f      	beq.n	8004a8c <HAL_DMA_Abort_IT+0xf8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a61      	ldr	r2, [pc, #388]	; (8004b78 <HAL_DMA_Abort_IT+0x1e4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d048      	beq.n	8004a88 <HAL_DMA_Abort_IT+0xf4>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a60      	ldr	r2, [pc, #384]	; (8004b7c <HAL_DMA_Abort_IT+0x1e8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d040      	beq.n	8004a82 <HAL_DMA_Abort_IT+0xee>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a5e      	ldr	r2, [pc, #376]	; (8004b80 <HAL_DMA_Abort_IT+0x1ec>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d038      	beq.n	8004a7c <HAL_DMA_Abort_IT+0xe8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a5d      	ldr	r2, [pc, #372]	; (8004b84 <HAL_DMA_Abort_IT+0x1f0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d030      	beq.n	8004a76 <HAL_DMA_Abort_IT+0xe2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a5b      	ldr	r2, [pc, #364]	; (8004b88 <HAL_DMA_Abort_IT+0x1f4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d028      	beq.n	8004a70 <HAL_DMA_Abort_IT+0xdc>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a53      	ldr	r2, [pc, #332]	; (8004b70 <HAL_DMA_Abort_IT+0x1dc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d020      	beq.n	8004a6a <HAL_DMA_Abort_IT+0xd6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a57      	ldr	r2, [pc, #348]	; (8004b8c <HAL_DMA_Abort_IT+0x1f8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d019      	beq.n	8004a66 <HAL_DMA_Abort_IT+0xd2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a56      	ldr	r2, [pc, #344]	; (8004b90 <HAL_DMA_Abort_IT+0x1fc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d012      	beq.n	8004a62 <HAL_DMA_Abort_IT+0xce>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a54      	ldr	r2, [pc, #336]	; (8004b94 <HAL_DMA_Abort_IT+0x200>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00a      	beq.n	8004a5c <HAL_DMA_Abort_IT+0xc8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a53      	ldr	r2, [pc, #332]	; (8004b98 <HAL_DMA_Abort_IT+0x204>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d102      	bne.n	8004a56 <HAL_DMA_Abort_IT+0xc2>
 8004a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a54:	e01b      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a5a:	e018      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a60:	e015      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a62:	2310      	movs	r3, #16
 8004a64:	e013      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e011      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a6e:	e00e      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a74:	e00b      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a7a:	e008      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a80:	e005      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a86:	e002      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	e000      	b.n	8004a8e <HAL_DMA_Abort_IT+0xfa>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4a43      	ldr	r2, [pc, #268]	; (8004b9c <HAL_DMA_Abort_IT+0x208>)
 8004a90:	6053      	str	r3, [r2, #4]
 8004a92:	e057      	b.n	8004b44 <HAL_DMA_Abort_IT+0x1b0>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a36      	ldr	r2, [pc, #216]	; (8004b74 <HAL_DMA_Abort_IT+0x1e0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d04f      	beq.n	8004b3e <HAL_DMA_Abort_IT+0x1aa>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a35      	ldr	r2, [pc, #212]	; (8004b78 <HAL_DMA_Abort_IT+0x1e4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d048      	beq.n	8004b3a <HAL_DMA_Abort_IT+0x1a6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a33      	ldr	r2, [pc, #204]	; (8004b7c <HAL_DMA_Abort_IT+0x1e8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d040      	beq.n	8004b34 <HAL_DMA_Abort_IT+0x1a0>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a32      	ldr	r2, [pc, #200]	; (8004b80 <HAL_DMA_Abort_IT+0x1ec>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d038      	beq.n	8004b2e <HAL_DMA_Abort_IT+0x19a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a30      	ldr	r2, [pc, #192]	; (8004b84 <HAL_DMA_Abort_IT+0x1f0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d030      	beq.n	8004b28 <HAL_DMA_Abort_IT+0x194>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a2f      	ldr	r2, [pc, #188]	; (8004b88 <HAL_DMA_Abort_IT+0x1f4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d028      	beq.n	8004b22 <HAL_DMA_Abort_IT+0x18e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <HAL_DMA_Abort_IT+0x1dc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d020      	beq.n	8004b1c <HAL_DMA_Abort_IT+0x188>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2b      	ldr	r2, [pc, #172]	; (8004b8c <HAL_DMA_Abort_IT+0x1f8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d019      	beq.n	8004b18 <HAL_DMA_Abort_IT+0x184>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a29      	ldr	r2, [pc, #164]	; (8004b90 <HAL_DMA_Abort_IT+0x1fc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d012      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x180>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a28      	ldr	r2, [pc, #160]	; (8004b94 <HAL_DMA_Abort_IT+0x200>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00a      	beq.n	8004b0e <HAL_DMA_Abort_IT+0x17a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a26      	ldr	r2, [pc, #152]	; (8004b98 <HAL_DMA_Abort_IT+0x204>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d102      	bne.n	8004b08 <HAL_DMA_Abort_IT+0x174>
 8004b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b06:	e01b      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b0c:	e018      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b12:	e015      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b14:	2310      	movs	r3, #16
 8004b16:	e013      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e011      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b20:	e00e      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b26:	e00b      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b2c:	e008      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b32:	e005      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b38:	e002      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	e000      	b.n	8004b40 <HAL_DMA_Abort_IT+0x1ac>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <HAL_DMA_Abort_IT+0x20c>)
 8004b42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
    } 
  }
  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40020080 	.word	0x40020080
 8004b74:	40020008 	.word	0x40020008
 8004b78:	4002001c 	.word	0x4002001c
 8004b7c:	40020030 	.word	0x40020030
 8004b80:	40020044 	.word	0x40020044
 8004b84:	40020058 	.word	0x40020058
 8004b88:	4002006c 	.word	0x4002006c
 8004b8c:	40020408 	.word	0x40020408
 8004b90:	4002041c 	.word	0x4002041c
 8004b94:	40020430 	.word	0x40020430
 8004b98:	40020444 	.word	0x40020444
 8004b9c:	40020400 	.word	0x40020400
 8004ba0:	40020000 	.word	0x40020000

08004ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b08b      	sub	sp, #44	; 0x2c
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bb6:	e179      	b.n	8004eac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004bb8:	2201      	movs	r2, #1
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	f040 8168 	bne.w	8004ea6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4a96      	ldr	r2, [pc, #600]	; (8004e34 <HAL_GPIO_Init+0x290>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d05e      	beq.n	8004c9e <HAL_GPIO_Init+0xfa>
 8004be0:	4a94      	ldr	r2, [pc, #592]	; (8004e34 <HAL_GPIO_Init+0x290>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d875      	bhi.n	8004cd2 <HAL_GPIO_Init+0x12e>
 8004be6:	4a94      	ldr	r2, [pc, #592]	; (8004e38 <HAL_GPIO_Init+0x294>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d058      	beq.n	8004c9e <HAL_GPIO_Init+0xfa>
 8004bec:	4a92      	ldr	r2, [pc, #584]	; (8004e38 <HAL_GPIO_Init+0x294>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d86f      	bhi.n	8004cd2 <HAL_GPIO_Init+0x12e>
 8004bf2:	4a92      	ldr	r2, [pc, #584]	; (8004e3c <HAL_GPIO_Init+0x298>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d052      	beq.n	8004c9e <HAL_GPIO_Init+0xfa>
 8004bf8:	4a90      	ldr	r2, [pc, #576]	; (8004e3c <HAL_GPIO_Init+0x298>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d869      	bhi.n	8004cd2 <HAL_GPIO_Init+0x12e>
 8004bfe:	4a90      	ldr	r2, [pc, #576]	; (8004e40 <HAL_GPIO_Init+0x29c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d04c      	beq.n	8004c9e <HAL_GPIO_Init+0xfa>
 8004c04:	4a8e      	ldr	r2, [pc, #568]	; (8004e40 <HAL_GPIO_Init+0x29c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d863      	bhi.n	8004cd2 <HAL_GPIO_Init+0x12e>
 8004c0a:	4a8e      	ldr	r2, [pc, #568]	; (8004e44 <HAL_GPIO_Init+0x2a0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d046      	beq.n	8004c9e <HAL_GPIO_Init+0xfa>
 8004c10:	4a8c      	ldr	r2, [pc, #560]	; (8004e44 <HAL_GPIO_Init+0x2a0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d85d      	bhi.n	8004cd2 <HAL_GPIO_Init+0x12e>
 8004c16:	2b12      	cmp	r3, #18
 8004c18:	d82a      	bhi.n	8004c70 <HAL_GPIO_Init+0xcc>
 8004c1a:	2b12      	cmp	r3, #18
 8004c1c:	d859      	bhi.n	8004cd2 <HAL_GPIO_Init+0x12e>
 8004c1e:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <HAL_GPIO_Init+0x80>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c9f 	.word	0x08004c9f
 8004c28:	08004c79 	.word	0x08004c79
 8004c2c:	08004c8b 	.word	0x08004c8b
 8004c30:	08004ccd 	.word	0x08004ccd
 8004c34:	08004cd3 	.word	0x08004cd3
 8004c38:	08004cd3 	.word	0x08004cd3
 8004c3c:	08004cd3 	.word	0x08004cd3
 8004c40:	08004cd3 	.word	0x08004cd3
 8004c44:	08004cd3 	.word	0x08004cd3
 8004c48:	08004cd3 	.word	0x08004cd3
 8004c4c:	08004cd3 	.word	0x08004cd3
 8004c50:	08004cd3 	.word	0x08004cd3
 8004c54:	08004cd3 	.word	0x08004cd3
 8004c58:	08004cd3 	.word	0x08004cd3
 8004c5c:	08004cd3 	.word	0x08004cd3
 8004c60:	08004cd3 	.word	0x08004cd3
 8004c64:	08004cd3 	.word	0x08004cd3
 8004c68:	08004c81 	.word	0x08004c81
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	4a75      	ldr	r2, [pc, #468]	; (8004e48 <HAL_GPIO_Init+0x2a4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004c76:	e02c      	b.n	8004cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	623b      	str	r3, [r7, #32]
          break;
 8004c7e:	e029      	b.n	8004cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	3304      	adds	r3, #4
 8004c86:	623b      	str	r3, [r7, #32]
          break;
 8004c88:	e024      	b.n	8004cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	623b      	str	r3, [r7, #32]
          break;
 8004c92:	e01f      	b.n	8004cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	623b      	str	r3, [r7, #32]
          break;
 8004c9c:	e01a      	b.n	8004cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ca6:	2304      	movs	r3, #4
 8004ca8:	623b      	str	r3, [r7, #32]
          break;
 8004caa:	e013      	b.n	8004cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d105      	bne.n	8004cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	611a      	str	r2, [r3, #16]
          break;
 8004cbe:	e009      	b.n	8004cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	615a      	str	r2, [r3, #20]
          break;
 8004cca:	e003      	b.n	8004cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	623b      	str	r3, [r7, #32]
          break;
 8004cd0:	e000      	b.n	8004cd4 <HAL_GPIO_Init+0x130>
          break;
 8004cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2bff      	cmp	r3, #255	; 0xff
 8004cd8:	d801      	bhi.n	8004cde <HAL_GPIO_Init+0x13a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	e001      	b.n	8004ce2 <HAL_GPIO_Init+0x13e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2bff      	cmp	r3, #255	; 0xff
 8004ce8:	d802      	bhi.n	8004cf0 <HAL_GPIO_Init+0x14c>
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	e002      	b.n	8004cf6 <HAL_GPIO_Init+0x152>
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3b08      	subs	r3, #8
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	210f      	movs	r1, #15
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	43db      	mvns	r3, r3
 8004d06:	401a      	ands	r2, r3
 8004d08:	6a39      	ldr	r1, [r7, #32]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d10:	431a      	orrs	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 80c1 	beq.w	8004ea6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004d24:	4b49      	ldr	r3, [pc, #292]	; (8004e4c <HAL_GPIO_Init+0x2a8>)
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	4a48      	ldr	r2, [pc, #288]	; (8004e4c <HAL_GPIO_Init+0x2a8>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6193      	str	r3, [r2, #24]
 8004d30:	4b46      	ldr	r3, [pc, #280]	; (8004e4c <HAL_GPIO_Init+0x2a8>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004d3c:	4a44      	ldr	r2, [pc, #272]	; (8004e50 <HAL_GPIO_Init+0x2ac>)
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	089b      	lsrs	r3, r3, #2
 8004d42:	3302      	adds	r3, #2
 8004d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	220f      	movs	r2, #15
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3c      	ldr	r2, [pc, #240]	; (8004e54 <HAL_GPIO_Init+0x2b0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01f      	beq.n	8004da8 <HAL_GPIO_Init+0x204>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3b      	ldr	r2, [pc, #236]	; (8004e58 <HAL_GPIO_Init+0x2b4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d019      	beq.n	8004da4 <HAL_GPIO_Init+0x200>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3a      	ldr	r2, [pc, #232]	; (8004e5c <HAL_GPIO_Init+0x2b8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d013      	beq.n	8004da0 <HAL_GPIO_Init+0x1fc>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a39      	ldr	r2, [pc, #228]	; (8004e60 <HAL_GPIO_Init+0x2bc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00d      	beq.n	8004d9c <HAL_GPIO_Init+0x1f8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a38      	ldr	r2, [pc, #224]	; (8004e64 <HAL_GPIO_Init+0x2c0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d007      	beq.n	8004d98 <HAL_GPIO_Init+0x1f4>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a37      	ldr	r2, [pc, #220]	; (8004e68 <HAL_GPIO_Init+0x2c4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d101      	bne.n	8004d94 <HAL_GPIO_Init+0x1f0>
 8004d90:	2305      	movs	r3, #5
 8004d92:	e00a      	b.n	8004daa <HAL_GPIO_Init+0x206>
 8004d94:	2306      	movs	r3, #6
 8004d96:	e008      	b.n	8004daa <HAL_GPIO_Init+0x206>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	e006      	b.n	8004daa <HAL_GPIO_Init+0x206>
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e004      	b.n	8004daa <HAL_GPIO_Init+0x206>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e002      	b.n	8004daa <HAL_GPIO_Init+0x206>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_GPIO_Init+0x206>
 8004da8:	2300      	movs	r3, #0
 8004daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dac:	f002 0203 	and.w	r2, r2, #3
 8004db0:	0092      	lsls	r2, r2, #2
 8004db2:	4093      	lsls	r3, r2
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004dba:	4925      	ldr	r1, [pc, #148]	; (8004e50 <HAL_GPIO_Init+0x2ac>)
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d006      	beq.n	8004de2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <HAL_GPIO_Init+0x2c8>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4924      	ldr	r1, [pc, #144]	; (8004e6c <HAL_GPIO_Init+0x2c8>)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]
 8004de0:	e006      	b.n	8004df0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004de2:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <HAL_GPIO_Init+0x2c8>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	4920      	ldr	r1, [pc, #128]	; (8004e6c <HAL_GPIO_Init+0x2c8>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d006      	beq.n	8004e0a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <HAL_GPIO_Init+0x2c8>)
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	491a      	ldr	r1, [pc, #104]	; (8004e6c <HAL_GPIO_Init+0x2c8>)
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]
 8004e08:	e006      	b.n	8004e18 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <HAL_GPIO_Init+0x2c8>)
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	4916      	ldr	r1, [pc, #88]	; (8004e6c <HAL_GPIO_Init+0x2c8>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d025      	beq.n	8004e70 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e24:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <HAL_GPIO_Init+0x2c8>)
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	4910      	ldr	r1, [pc, #64]	; (8004e6c <HAL_GPIO_Init+0x2c8>)
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	608b      	str	r3, [r1, #8]
 8004e30:	e025      	b.n	8004e7e <HAL_GPIO_Init+0x2da>
 8004e32:	bf00      	nop
 8004e34:	10320000 	.word	0x10320000
 8004e38:	10310000 	.word	0x10310000
 8004e3c:	10220000 	.word	0x10220000
 8004e40:	10210000 	.word	0x10210000
 8004e44:	10120000 	.word	0x10120000
 8004e48:	10110000 	.word	0x10110000
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40010800 	.word	0x40010800
 8004e58:	40010c00 	.word	0x40010c00
 8004e5c:	40011000 	.word	0x40011000
 8004e60:	40011400 	.word	0x40011400
 8004e64:	40011800 	.word	0x40011800
 8004e68:	40011c00 	.word	0x40011c00
 8004e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004e70:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	43db      	mvns	r3, r3
 8004e78:	4913      	ldr	r1, [pc, #76]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d006      	beq.n	8004e98 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60cb      	str	r3, [r1, #12]
 8004e96:	e006      	b.n	8004ea6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	4909      	ldr	r1, [pc, #36]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f47f ae7e 	bne.w	8004bb8 <HAL_GPIO_Init+0x14>
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	372c      	adds	r7, #44	; 0x2c
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	40010400 	.word	0x40010400

08004ecc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	; 0x24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8004eda:	e0a6      	b.n	800502a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004edc:	2201      	movs	r2, #1
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8099 	beq.w	8005024 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8004ef2:	4a54      	ldr	r2, [pc, #336]	; (8005044 <HAL_GPIO_DeInit+0x178>)
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	089b      	lsrs	r3, r3, #2
 8004ef8:	3302      	adds	r3, #2
 8004efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efe:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	220f      	movs	r2, #15
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4013      	ands	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a4c      	ldr	r2, [pc, #304]	; (8005048 <HAL_GPIO_DeInit+0x17c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d01f      	beq.n	8004f5c <HAL_GPIO_DeInit+0x90>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a4b      	ldr	r2, [pc, #300]	; (800504c <HAL_GPIO_DeInit+0x180>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d019      	beq.n	8004f58 <HAL_GPIO_DeInit+0x8c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a4a      	ldr	r2, [pc, #296]	; (8005050 <HAL_GPIO_DeInit+0x184>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d013      	beq.n	8004f54 <HAL_GPIO_DeInit+0x88>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a49      	ldr	r2, [pc, #292]	; (8005054 <HAL_GPIO_DeInit+0x188>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00d      	beq.n	8004f50 <HAL_GPIO_DeInit+0x84>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a48      	ldr	r2, [pc, #288]	; (8005058 <HAL_GPIO_DeInit+0x18c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <HAL_GPIO_DeInit+0x80>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a47      	ldr	r2, [pc, #284]	; (800505c <HAL_GPIO_DeInit+0x190>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d101      	bne.n	8004f48 <HAL_GPIO_DeInit+0x7c>
 8004f44:	2305      	movs	r3, #5
 8004f46:	e00a      	b.n	8004f5e <HAL_GPIO_DeInit+0x92>
 8004f48:	2306      	movs	r3, #6
 8004f4a:	e008      	b.n	8004f5e <HAL_GPIO_DeInit+0x92>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	e006      	b.n	8004f5e <HAL_GPIO_DeInit+0x92>
 8004f50:	2303      	movs	r3, #3
 8004f52:	e004      	b.n	8004f5e <HAL_GPIO_DeInit+0x92>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e002      	b.n	8004f5e <HAL_GPIO_DeInit+0x92>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <HAL_GPIO_DeInit+0x92>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	f002 0203 	and.w	r2, r2, #3
 8004f64:	0092      	lsls	r2, r2, #2
 8004f66:	4093      	lsls	r3, r2
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d132      	bne.n	8004fd4 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	220f      	movs	r2, #15
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004f7e:	4a31      	ldr	r2, [pc, #196]	; (8005044 <HAL_GPIO_DeInit+0x178>)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	3302      	adds	r3, #2
 8004f86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	43da      	mvns	r2, r3
 8004f8e:	482d      	ldr	r0, [pc, #180]	; (8005044 <HAL_GPIO_DeInit+0x178>)
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	089b      	lsrs	r3, r3, #2
 8004f94:	400a      	ands	r2, r1
 8004f96:	3302      	adds	r3, #2
 8004f98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004f9c:	4b30      	ldr	r3, [pc, #192]	; (8005060 <HAL_GPIO_DeInit+0x194>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	492e      	ldr	r1, [pc, #184]	; (8005060 <HAL_GPIO_DeInit+0x194>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004faa:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <HAL_GPIO_DeInit+0x194>)
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	492b      	ldr	r1, [pc, #172]	; (8005060 <HAL_GPIO_DeInit+0x194>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004fb8:	4b29      	ldr	r3, [pc, #164]	; (8005060 <HAL_GPIO_DeInit+0x194>)
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	4927      	ldr	r1, [pc, #156]	; (8005060 <HAL_GPIO_DeInit+0x194>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004fc6:	4b26      	ldr	r3, [pc, #152]	; (8005060 <HAL_GPIO_DeInit+0x194>)
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	4924      	ldr	r1, [pc, #144]	; (8005060 <HAL_GPIO_DeInit+0x194>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2bff      	cmp	r3, #255	; 0xff
 8004fd8:	d801      	bhi.n	8004fde <HAL_GPIO_DeInit+0x112>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	e001      	b.n	8004fe2 <HAL_GPIO_DeInit+0x116>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2bff      	cmp	r3, #255	; 0xff
 8004fe8:	d802      	bhi.n	8004ff0 <HAL_GPIO_DeInit+0x124>
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	e002      	b.n	8004ff6 <HAL_GPIO_DeInit+0x12a>
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3b08      	subs	r3, #8
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	210f      	movs	r1, #15
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	401a      	ands	r2, r3
 8005008:	2104      	movs	r1, #4
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	fa01 f303 	lsl.w	r3, r1, r3
 8005010:	431a      	orrs	r2, r3
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	43db      	mvns	r3, r3
 800501e:	401a      	ands	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	3301      	adds	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	fa22 f303 	lsr.w	r3, r2, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	f47f af52 	bne.w	8004edc <HAL_GPIO_DeInit+0x10>
  }
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	3724      	adds	r7, #36	; 0x24
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr
 8005044:	40010000 	.word	0x40010000
 8005048:	40010800 	.word	0x40010800
 800504c:	40010c00 	.word	0x40010c00
 8005050:	40011000 	.word	0x40011000
 8005054:	40011400 	.word	0x40011400
 8005058:	40011800 	.word	0x40011800
 800505c:	40011c00 	.word	0x40011c00
 8005060:	40010400 	.word	0x40010400

08005064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	807b      	strh	r3, [r7, #2]
 8005070:	4613      	mov	r3, r2
 8005072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005074:	787b      	ldrb	r3, [r7, #1]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800507a:	887a      	ldrh	r2, [r7, #2]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005080:	e003      	b.n	800508a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005082:	887b      	ldrh	r3, [r7, #2]
 8005084:	041a      	lsls	r2, r3, #16
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	611a      	str	r2, [r3, #16]
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050a6:	887a      	ldrh	r2, [r7, #2]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4013      	ands	r3, r2
 80050ac:	041a      	lsls	r2, r3, #16
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	43d9      	mvns	r1, r3
 80050b2:	887b      	ldrh	r3, [r7, #2]
 80050b4:	400b      	ands	r3, r1
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	611a      	str	r2, [r3, #16]
}
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
	...

080050c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050d2:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	4013      	ands	r3, r2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d006      	beq.n	80050ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050de:	4a05      	ldr	r2, [pc, #20]	; (80050f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fd ff34 	bl	8002f54 <HAL_GPIO_EXTI_Callback>
  }
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40010400 	.word	0x40010400

080050f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e12b      	b.n	8005362 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fd fb56 	bl	80027d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2224      	movs	r2, #36	; 0x24
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0201 	bic.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800514a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800515a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800515c:	f001 fcce 	bl	8006afc <HAL_RCC_GetPCLK1Freq>
 8005160:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4a81      	ldr	r2, [pc, #516]	; (800536c <HAL_I2C_Init+0x274>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d807      	bhi.n	800517c <HAL_I2C_Init+0x84>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4a80      	ldr	r2, [pc, #512]	; (8005370 <HAL_I2C_Init+0x278>)
 8005170:	4293      	cmp	r3, r2
 8005172:	bf94      	ite	ls
 8005174:	2301      	movls	r3, #1
 8005176:	2300      	movhi	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	e006      	b.n	800518a <HAL_I2C_Init+0x92>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4a7d      	ldr	r2, [pc, #500]	; (8005374 <HAL_I2C_Init+0x27c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	bf94      	ite	ls
 8005184:	2301      	movls	r3, #1
 8005186:	2300      	movhi	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e0e7      	b.n	8005362 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4a78      	ldr	r2, [pc, #480]	; (8005378 <HAL_I2C_Init+0x280>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	0c9b      	lsrs	r3, r3, #18
 800519c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a6a      	ldr	r2, [pc, #424]	; (800536c <HAL_I2C_Init+0x274>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d802      	bhi.n	80051cc <HAL_I2C_Init+0xd4>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	3301      	adds	r3, #1
 80051ca:	e009      	b.n	80051e0 <HAL_I2C_Init+0xe8>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	4a69      	ldr	r2, [pc, #420]	; (800537c <HAL_I2C_Init+0x284>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	099b      	lsrs	r3, r3, #6
 80051de:	3301      	adds	r3, #1
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	495c      	ldr	r1, [pc, #368]	; (800536c <HAL_I2C_Init+0x274>)
 80051fc:	428b      	cmp	r3, r1
 80051fe:	d819      	bhi.n	8005234 <HAL_I2C_Init+0x13c>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1e59      	subs	r1, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	fbb1 f3f3 	udiv	r3, r1, r3
 800520e:	1c59      	adds	r1, r3, #1
 8005210:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005214:	400b      	ands	r3, r1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_I2C_Init+0x138>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	1e59      	subs	r1, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	fbb1 f3f3 	udiv	r3, r1, r3
 8005228:	3301      	adds	r3, #1
 800522a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522e:	e051      	b.n	80052d4 <HAL_I2C_Init+0x1dc>
 8005230:	2304      	movs	r3, #4
 8005232:	e04f      	b.n	80052d4 <HAL_I2C_Init+0x1dc>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d111      	bne.n	8005260 <HAL_I2C_Init+0x168>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1e58      	subs	r0, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6859      	ldr	r1, [r3, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	440b      	add	r3, r1
 800524a:	fbb0 f3f3 	udiv	r3, r0, r3
 800524e:	3301      	adds	r3, #1
 8005250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005254:	2b00      	cmp	r3, #0
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	e012      	b.n	8005286 <HAL_I2C_Init+0x18e>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	1e58      	subs	r0, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6859      	ldr	r1, [r3, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	0099      	lsls	r1, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	fbb0 f3f3 	udiv	r3, r0, r3
 8005276:	3301      	adds	r3, #1
 8005278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_I2C_Init+0x196>
 800528a:	2301      	movs	r3, #1
 800528c:	e022      	b.n	80052d4 <HAL_I2C_Init+0x1dc>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10e      	bne.n	80052b4 <HAL_I2C_Init+0x1bc>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1e58      	subs	r0, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	460b      	mov	r3, r1
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	440b      	add	r3, r1
 80052a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80052a8:	3301      	adds	r3, #1
 80052aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b2:	e00f      	b.n	80052d4 <HAL_I2C_Init+0x1dc>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	1e58      	subs	r0, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6859      	ldr	r1, [r3, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	0099      	lsls	r1, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ca:	3301      	adds	r3, #1
 80052cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	6809      	ldr	r1, [r1, #0]
 80052d8:	4313      	orrs	r3, r2
 80052da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005302:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6911      	ldr	r1, [r2, #16]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68d2      	ldr	r2, [r2, #12]
 800530e:	4311      	orrs	r1, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	430b      	orrs	r3, r1
 8005316:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	000186a0 	.word	0x000186a0
 8005370:	001e847f 	.word	0x001e847f
 8005374:	003d08ff 	.word	0x003d08ff
 8005378:	431bde83 	.word	0x431bde83
 800537c:	10624dd3 	.word	0x10624dd3

08005380 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e021      	b.n	80053d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2224      	movs	r2, #36	; 0x24
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fd fa50 	bl	8002850 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	461a      	mov	r2, r3
 80053ec:	460b      	mov	r3, r1
 80053ee:	817b      	strh	r3, [r7, #10]
 80053f0:	4613      	mov	r3, r2
 80053f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053f4:	f7fe ff34 	bl	8004260 <HAL_GetTick>
 80053f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b20      	cmp	r3, #32
 8005404:	f040 80e0 	bne.w	80055c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2319      	movs	r3, #25
 800540e:	2201      	movs	r2, #1
 8005410:	4970      	ldr	r1, [pc, #448]	; (80055d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fdc0 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800541e:	2302      	movs	r3, #2
 8005420:	e0d3      	b.n	80055ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_I2C_Master_Transmit+0x50>
 800542c:	2302      	movs	r3, #2
 800542e:	e0cc      	b.n	80055ca <HAL_I2C_Master_Transmit+0x1ea>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b01      	cmp	r3, #1
 8005444:	d007      	beq.n	8005456 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005464:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2221      	movs	r2, #33	; 0x21
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2210      	movs	r2, #16
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	893a      	ldrh	r2, [r7, #8]
 8005486:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a50      	ldr	r2, [pc, #320]	; (80055d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005496:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005498:	8979      	ldrh	r1, [r7, #10]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	6a3a      	ldr	r2, [r7, #32]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fc2a 	bl	8005cf8 <I2C_MasterRequestWrite>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e08d      	b.n	80055ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80054c4:	e066      	b.n	8005594 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	6a39      	ldr	r1, [r7, #32]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 fe3a 	bl	8006144 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00d      	beq.n	80054f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d107      	bne.n	80054ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e06b      	b.n	80055ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	781a      	ldrb	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b04      	cmp	r3, #4
 800552e:	d11b      	bne.n	8005568 <HAL_I2C_Master_Transmit+0x188>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005534:	2b00      	cmp	r3, #0
 8005536:	d017      	beq.n	8005568 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	781a      	ldrb	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	6a39      	ldr	r1, [r7, #32]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 fe2a 	bl	80061c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	2b04      	cmp	r3, #4
 800557e:	d107      	bne.n	8005590 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e01a      	b.n	80055ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005598:	2b00      	cmp	r3, #0
 800559a:	d194      	bne.n	80054c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e000      	b.n	80055ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055c8:	2302      	movs	r3, #2
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	00100002 	.word	0x00100002
 80055d8:	ffff0000 	.word	0xffff0000

080055dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	; 0x30
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	461a      	mov	r2, r3
 80055e8:	460b      	mov	r3, r1
 80055ea:	817b      	strh	r3, [r7, #10]
 80055ec:	4613      	mov	r3, r2
 80055ee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055f4:	f7fe fe34 	bl	8004260 <HAL_GetTick>
 80055f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b20      	cmp	r3, #32
 8005604:	f040 823f 	bne.w	8005a86 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	2319      	movs	r3, #25
 800560e:	2201      	movs	r2, #1
 8005610:	497f      	ldr	r1, [pc, #508]	; (8005810 <HAL_I2C_Master_Receive+0x234>)
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fcc0 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	e232      	b.n	8005a88 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_I2C_Master_Receive+0x54>
 800562c:	2302      	movs	r3, #2
 800562e:	e22b      	b.n	8005a88 <HAL_I2C_Master_Receive+0x4ac>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d007      	beq.n	8005656 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005664:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2222      	movs	r2, #34	; 0x22
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2210      	movs	r2, #16
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	893a      	ldrh	r2, [r7, #8]
 8005686:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a5f      	ldr	r2, [pc, #380]	; (8005814 <HAL_I2C_Master_Receive+0x238>)
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005698:	8979      	ldrh	r1, [r7, #10]
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fbac 	bl	8005dfc <I2C_MasterRequestRead>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e1ec      	b.n	8005a88 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d113      	bne.n	80056de <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	e1c0      	b.n	8005a60 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d11e      	bne.n	8005724 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056f6:	b672      	cpsid	i
}
 80056f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800571e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005720:	b662      	cpsie	i
}
 8005722:	e035      	b.n	8005790 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005728:	2b02      	cmp	r3, #2
 800572a:	d11e      	bne.n	800576a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800573a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800573c:	b672      	cpsid	i
}
 800573e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005764:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005766:	b662      	cpsie	i
}
 8005768:	e012      	b.n	8005790 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800577a:	2300      	movs	r3, #0
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005790:	e166      	b.n	8005a60 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005796:	2b03      	cmp	r3, #3
 8005798:	f200 811f 	bhi.w	80059da <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d123      	bne.n	80057ec <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fd4d 	bl	8006248 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e167      	b.n	8005a88 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057ea:	e139      	b.n	8005a60 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d152      	bne.n	800589a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	2200      	movs	r2, #0
 80057fc:	4906      	ldr	r1, [pc, #24]	; (8005818 <HAL_I2C_Master_Receive+0x23c>)
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fbca 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e13c      	b.n	8005a88 <HAL_I2C_Master_Receive+0x4ac>
 800580e:	bf00      	nop
 8005810:	00100002 	.word	0x00100002
 8005814:	ffff0000 	.word	0xffff0000
 8005818:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800581c:	b672      	cpsid	i
}
 800581e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005862:	b662      	cpsie	i
}
 8005864:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005898:	e0e2      	b.n	8005a60 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	2200      	movs	r2, #0
 80058a2:	497b      	ldr	r1, [pc, #492]	; (8005a90 <HAL_I2C_Master_Receive+0x4b4>)
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fb77 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0e9      	b.n	8005a88 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80058c4:	b672      	cpsid	i
}
 80058c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80058fa:	4b66      	ldr	r3, [pc, #408]	; (8005a94 <HAL_I2C_Master_Receive+0x4b8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	08db      	lsrs	r3, r3, #3
 8005900:	4a65      	ldr	r2, [pc, #404]	; (8005a98 <HAL_I2C_Master_Receive+0x4bc>)
 8005902:	fba2 2303 	umull	r2, r3, r2, r3
 8005906:	0a1a      	lsrs	r2, r3, #8
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	00da      	lsls	r2, r3, #3
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	3b01      	subs	r3, #1
 8005918:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d118      	bne.n	8005952 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005942:	b662      	cpsie	i
}
 8005944:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e09a      	b.n	8005a88 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b04      	cmp	r3, #4
 800595e:	d1d9      	bne.n	8005914 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80059a2:	b662      	cpsie	i
}
 80059a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059d8:	e042      	b.n	8005a60 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fc32 	bl	8006248 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e04c      	b.n	8005a88 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d118      	bne.n	8005a60 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f47f ae94 	bne.w	8005792 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e000      	b.n	8005a88 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005a86:	2302      	movs	r3, #2
  }
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3728      	adds	r7, #40	; 0x28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	00010004 	.word	0x00010004
 8005a94:	20000604 	.word	0x20000604
 8005a98:	14f8b589 	.word	0x14f8b589

08005a9c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005aac:	f7fe fbd8 	bl	8004260 <HAL_GetTick>
 8005ab0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	f040 8111 	bne.w	8005ce6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	2319      	movs	r3, #25
 8005aca:	2201      	movs	r2, #1
 8005acc:	4988      	ldr	r1, [pc, #544]	; (8005cf0 <HAL_I2C_IsDeviceReady+0x254>)
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fa62 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005ada:	2302      	movs	r3, #2
 8005adc:	e104      	b.n	8005ce8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_I2C_IsDeviceReady+0x50>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e0fd      	b.n	8005ce8 <HAL_I2C_IsDeviceReady+0x24c>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d007      	beq.n	8005b12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0201 	orr.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2224      	movs	r2, #36	; 0x24
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a70      	ldr	r2, [pc, #448]	; (8005cf4 <HAL_I2C_IsDeviceReady+0x258>)
 8005b34:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fa20 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6c:	d103      	bne.n	8005b76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e0b6      	b.n	8005ce8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b7a:	897b      	ldrh	r3, [r7, #10]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005b8a:	f7fe fb69 	bl	8004260 <HAL_GetTick>
 8005b8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	bf0c      	ite	eq
 8005b9e:	2301      	moveq	r3, #1
 8005ba0:	2300      	movne	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb4:	bf0c      	ite	eq
 8005bb6:	2301      	moveq	r3, #1
 8005bb8:	2300      	movne	r3, #0
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005bbe:	e025      	b.n	8005c0c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bc0:	f7fe fb4e 	bl	8004260 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d302      	bcc.n	8005bd6 <HAL_I2C_IsDeviceReady+0x13a>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	22a0      	movs	r2, #160	; 0xa0
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	bf0c      	ite	eq
 8005bec:	2301      	moveq	r3, #1
 8005bee:	2300      	movne	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c02:	bf0c      	ite	eq
 8005c04:	2301      	moveq	r3, #1
 8005c06:	2300      	movne	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2ba0      	cmp	r3, #160	; 0xa0
 8005c16:	d005      	beq.n	8005c24 <HAL_I2C_IsDeviceReady+0x188>
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <HAL_I2C_IsDeviceReady+0x188>
 8005c1e:	7dbb      	ldrb	r3, [r7, #22]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0cd      	beq.n	8005bc0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d129      	bne.n	8005c8e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c48:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	2319      	movs	r3, #25
 8005c66:	2201      	movs	r2, #1
 8005c68:	4921      	ldr	r1, [pc, #132]	; (8005cf0 <HAL_I2C_IsDeviceReady+0x254>)
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f994 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e036      	b.n	8005ce8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e02c      	b.n	8005ce8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ca6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	2319      	movs	r3, #25
 8005cae:	2201      	movs	r2, #1
 8005cb0:	490f      	ldr	r1, [pc, #60]	; (8005cf0 <HAL_I2C_IsDeviceReady+0x254>)
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f970 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e012      	b.n	8005ce8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	f4ff af32 	bcc.w	8005b36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005ce6:	2302      	movs	r3, #2
  }
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	00100002 	.word	0x00100002
 8005cf4:	ffff0000 	.word	0xffff0000

08005cf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	460b      	mov	r3, r1
 8005d06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d006      	beq.n	8005d22 <I2C_MasterRequestWrite+0x2a>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d003      	beq.n	8005d22 <I2C_MasterRequestWrite+0x2a>
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d20:	d108      	bne.n	8005d34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	e00b      	b.n	8005d4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d38:	2b12      	cmp	r3, #18
 8005d3a:	d107      	bne.n	8005d4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f91d 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00d      	beq.n	8005d80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d72:	d103      	bne.n	8005d7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e035      	b.n	8005dec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d88:	d108      	bne.n	8005d9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d8a:	897b      	ldrh	r3, [r7, #10]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d98:	611a      	str	r2, [r3, #16]
 8005d9a:	e01b      	b.n	8005dd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d9c:	897b      	ldrh	r3, [r7, #10]
 8005d9e:	11db      	asrs	r3, r3, #7
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 0306 	and.w	r3, r3, #6
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f063 030f 	orn	r3, r3, #15
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	490e      	ldr	r1, [pc, #56]	; (8005df4 <I2C_MasterRequestWrite+0xfc>)
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f943 	bl	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e010      	b.n	8005dec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dca:	897b      	ldrh	r3, [r7, #10]
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	4907      	ldr	r1, [pc, #28]	; (8005df8 <I2C_MasterRequestWrite+0x100>)
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f933 	bl	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	00010008 	.word	0x00010008
 8005df8:	00010002 	.word	0x00010002

08005dfc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d006      	beq.n	8005e36 <I2C_MasterRequestRead+0x3a>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d003      	beq.n	8005e36 <I2C_MasterRequestRead+0x3a>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e34:	d108      	bne.n	8005e48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e00b      	b.n	8005e60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	2b11      	cmp	r3, #17
 8005e4e:	d107      	bne.n	8005e60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 f893 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00d      	beq.n	8005e94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e86:	d103      	bne.n	8005e90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e079      	b.n	8005f88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e9c:	d108      	bne.n	8005eb0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f043 0301 	orr.w	r3, r3, #1
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	611a      	str	r2, [r3, #16]
 8005eae:	e05f      	b.n	8005f70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005eb0:	897b      	ldrh	r3, [r7, #10]
 8005eb2:	11db      	asrs	r3, r3, #7
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f003 0306 	and.w	r3, r3, #6
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f063 030f 	orn	r3, r3, #15
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4930      	ldr	r1, [pc, #192]	; (8005f90 <I2C_MasterRequestRead+0x194>)
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f8b9 	bl	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e054      	b.n	8005f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ede:	897b      	ldrh	r3, [r7, #10]
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	4929      	ldr	r1, [pc, #164]	; (8005f94 <I2C_MasterRequestRead+0x198>)
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 f8a9 	bl	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e044      	b.n	8005f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f831 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00d      	beq.n	8005f58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4a:	d103      	bne.n	8005f54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e017      	b.n	8005f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f58:	897b      	ldrh	r3, [r7, #10]
 8005f5a:	11db      	asrs	r3, r3, #7
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 0306 	and.w	r3, r3, #6
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f063 030e 	orn	r3, r3, #14
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	4907      	ldr	r1, [pc, #28]	; (8005f94 <I2C_MasterRequestRead+0x198>)
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f865 	bl	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	00010008 	.word	0x00010008
 8005f94:	00010002 	.word	0x00010002

08005f98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fa8:	e025      	b.n	8005ff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d021      	beq.n	8005ff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb2:	f7fe f955 	bl	8004260 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d116      	bne.n	8005ff6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e023      	b.n	800603e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	0c1b      	lsrs	r3, r3, #16
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d10d      	bne.n	800601c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	43da      	mvns	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4013      	ands	r3, r2
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	bf0c      	ite	eq
 8006012:	2301      	moveq	r3, #1
 8006014:	2300      	movne	r3, #0
 8006016:	b2db      	uxtb	r3, r3
 8006018:	461a      	mov	r2, r3
 800601a:	e00c      	b.n	8006036 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	43da      	mvns	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4013      	ands	r3, r2
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	bf0c      	ite	eq
 800602e:	2301      	moveq	r3, #1
 8006030:	2300      	movne	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	429a      	cmp	r2, r3
 800603a:	d0b6      	beq.n	8005faa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
 8006052:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006054:	e051      	b.n	80060fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006064:	d123      	bne.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006074:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800607e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f043 0204 	orr.w	r2, r3, #4
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e046      	b.n	800613c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d021      	beq.n	80060fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b6:	f7fe f8d3 	bl	8004260 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d116      	bne.n	80060fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e020      	b.n	800613c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d10c      	bne.n	800611e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	43da      	mvns	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4013      	ands	r3, r2
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	bf14      	ite	ne
 8006116:	2301      	movne	r3, #1
 8006118:	2300      	moveq	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	e00b      	b.n	8006136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	43da      	mvns	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	4013      	ands	r3, r2
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	bf14      	ite	ne
 8006130:	2301      	movne	r3, #1
 8006132:	2300      	moveq	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d18d      	bne.n	8006056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006150:	e02d      	b.n	80061ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 f8ce 	bl	80062f4 <I2C_IsAcknowledgeFailed>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e02d      	b.n	80061be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006168:	d021      	beq.n	80061ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616a:	f7fe f879 	bl	8004260 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	d302      	bcc.n	8006180 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d116      	bne.n	80061ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	f043 0220 	orr.w	r2, r3, #32
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e007      	b.n	80061be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b80      	cmp	r3, #128	; 0x80
 80061ba:	d1ca      	bne.n	8006152 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061d2:	e02d      	b.n	8006230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f88d 	bl	80062f4 <I2C_IsAcknowledgeFailed>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e02d      	b.n	8006240 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ea:	d021      	beq.n	8006230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ec:	f7fe f838 	bl	8004260 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d302      	bcc.n	8006202 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d116      	bne.n	8006230 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	f043 0220 	orr.w	r2, r3, #32
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e007      	b.n	8006240 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b04      	cmp	r3, #4
 800623c:	d1ca      	bne.n	80061d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006254:	e042      	b.n	80062dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b10      	cmp	r3, #16
 8006262:	d119      	bne.n	8006298 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0210 	mvn.w	r2, #16
 800626c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e029      	b.n	80062ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006298:	f7fd ffe2 	bl	8004260 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d302      	bcc.n	80062ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d116      	bne.n	80062dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	f043 0220 	orr.w	r2, r3, #32
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e007      	b.n	80062ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d1b5      	bne.n	8006256 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630a:	d11b      	bne.n	8006344 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006314:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	f043 0204 	orr.w	r2, r3, #4
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr

08006350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e272      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 8087 	beq.w	800647e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006370:	4b92      	ldr	r3, [pc, #584]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f003 030c 	and.w	r3, r3, #12
 8006378:	2b04      	cmp	r3, #4
 800637a:	d00c      	beq.n	8006396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800637c:	4b8f      	ldr	r3, [pc, #572]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 030c 	and.w	r3, r3, #12
 8006384:	2b08      	cmp	r3, #8
 8006386:	d112      	bne.n	80063ae <HAL_RCC_OscConfig+0x5e>
 8006388:	4b8c      	ldr	r3, [pc, #560]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006394:	d10b      	bne.n	80063ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006396:	4b89      	ldr	r3, [pc, #548]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d06c      	beq.n	800647c <HAL_RCC_OscConfig+0x12c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d168      	bne.n	800647c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e24c      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b6:	d106      	bne.n	80063c6 <HAL_RCC_OscConfig+0x76>
 80063b8:	4b80      	ldr	r3, [pc, #512]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a7f      	ldr	r2, [pc, #508]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	e02e      	b.n	8006424 <HAL_RCC_OscConfig+0xd4>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x98>
 80063ce:	4b7b      	ldr	r3, [pc, #492]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a7a      	ldr	r2, [pc, #488]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4b78      	ldr	r3, [pc, #480]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a77      	ldr	r2, [pc, #476]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e01d      	b.n	8006424 <HAL_RCC_OscConfig+0xd4>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063f0:	d10c      	bne.n	800640c <HAL_RCC_OscConfig+0xbc>
 80063f2:	4b72      	ldr	r3, [pc, #456]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a71      	ldr	r2, [pc, #452]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80063f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	4b6f      	ldr	r3, [pc, #444]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a6e      	ldr	r2, [pc, #440]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e00b      	b.n	8006424 <HAL_RCC_OscConfig+0xd4>
 800640c:	4b6b      	ldr	r3, [pc, #428]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a6a      	ldr	r2, [pc, #424]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	4b68      	ldr	r3, [pc, #416]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a67      	ldr	r2, [pc, #412]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 800641e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d013      	beq.n	8006454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642c:	f7fd ff18 	bl	8004260 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006434:	f7fd ff14 	bl	8004260 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b64      	cmp	r3, #100	; 0x64
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e200      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006446:	4b5d      	ldr	r3, [pc, #372]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0f0      	beq.n	8006434 <HAL_RCC_OscConfig+0xe4>
 8006452:	e014      	b.n	800647e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006454:	f7fd ff04 	bl	8004260 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800645c:	f7fd ff00 	bl	8004260 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	; 0x64
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e1ec      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646e:	4b53      	ldr	r3, [pc, #332]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f0      	bne.n	800645c <HAL_RCC_OscConfig+0x10c>
 800647a:	e000      	b.n	800647e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d063      	beq.n	8006552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800648a:	4b4c      	ldr	r3, [pc, #304]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006496:	4b49      	ldr	r3, [pc, #292]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d11c      	bne.n	80064dc <HAL_RCC_OscConfig+0x18c>
 80064a2:	4b46      	ldr	r3, [pc, #280]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d116      	bne.n	80064dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ae:	4b43      	ldr	r3, [pc, #268]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <HAL_RCC_OscConfig+0x176>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d001      	beq.n	80064c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e1c0      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c6:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4939      	ldr	r1, [pc, #228]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064da:	e03a      	b.n	8006552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d020      	beq.n	8006526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ea:	f7fd feb9 	bl	8004260 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f2:	f7fd feb5 	bl	8004260 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e1a1      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006504:	4b2d      	ldr	r3, [pc, #180]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006510:	4b2a      	ldr	r3, [pc, #168]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	4927      	ldr	r1, [pc, #156]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006520:	4313      	orrs	r3, r2
 8006522:	600b      	str	r3, [r1, #0]
 8006524:	e015      	b.n	8006552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006526:	4b26      	ldr	r3, [pc, #152]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fd fe98 	bl	8004260 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006534:	f7fd fe94 	bl	8004260 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e180      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f0      	bne.n	8006534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d03a      	beq.n	80065d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d019      	beq.n	800659a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006566:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <HAL_RCC_OscConfig+0x274>)
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800656c:	f7fd fe78 	bl	8004260 <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006574:	f7fd fe74 	bl	8004260 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e160      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006586:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <HAL_RCC_OscConfig+0x26c>)
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f0      	beq.n	8006574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006592:	2001      	movs	r0, #1
 8006594:	f000 fada 	bl	8006b4c <RCC_Delay>
 8006598:	e01c      	b.n	80065d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800659a:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <HAL_RCC_OscConfig+0x274>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a0:	f7fd fe5e 	bl	8004260 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a6:	e00f      	b.n	80065c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a8:	f7fd fe5a 	bl	8004260 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d908      	bls.n	80065c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e146      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
 80065ba:	bf00      	nop
 80065bc:	40021000 	.word	0x40021000
 80065c0:	42420000 	.word	0x42420000
 80065c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c8:	4b92      	ldr	r3, [pc, #584]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e9      	bne.n	80065a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 80a6 	beq.w	800672e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065e2:	2300      	movs	r3, #0
 80065e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065e6:	4b8b      	ldr	r3, [pc, #556]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10d      	bne.n	800660e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065f2:	4b88      	ldr	r3, [pc, #544]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	4a87      	ldr	r2, [pc, #540]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80065f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fc:	61d3      	str	r3, [r2, #28]
 80065fe:	4b85      	ldr	r3, [pc, #532]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006606:	60bb      	str	r3, [r7, #8]
 8006608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800660a:	2301      	movs	r3, #1
 800660c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660e:	4b82      	ldr	r3, [pc, #520]	; (8006818 <HAL_RCC_OscConfig+0x4c8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006616:	2b00      	cmp	r3, #0
 8006618:	d118      	bne.n	800664c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800661a:	4b7f      	ldr	r3, [pc, #508]	; (8006818 <HAL_RCC_OscConfig+0x4c8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a7e      	ldr	r2, [pc, #504]	; (8006818 <HAL_RCC_OscConfig+0x4c8>)
 8006620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006626:	f7fd fe1b 	bl	8004260 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800662e:	f7fd fe17 	bl	8004260 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b64      	cmp	r3, #100	; 0x64
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e103      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006640:	4b75      	ldr	r3, [pc, #468]	; (8006818 <HAL_RCC_OscConfig+0x4c8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d106      	bne.n	8006662 <HAL_RCC_OscConfig+0x312>
 8006654:	4b6f      	ldr	r3, [pc, #444]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	4a6e      	ldr	r2, [pc, #440]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6213      	str	r3, [r2, #32]
 8006660:	e02d      	b.n	80066be <HAL_RCC_OscConfig+0x36e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10c      	bne.n	8006684 <HAL_RCC_OscConfig+0x334>
 800666a:	4b6a      	ldr	r3, [pc, #424]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	4a69      	ldr	r2, [pc, #420]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	6213      	str	r3, [r2, #32]
 8006676:	4b67      	ldr	r3, [pc, #412]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	4a66      	ldr	r2, [pc, #408]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800667c:	f023 0304 	bic.w	r3, r3, #4
 8006680:	6213      	str	r3, [r2, #32]
 8006682:	e01c      	b.n	80066be <HAL_RCC_OscConfig+0x36e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	2b05      	cmp	r3, #5
 800668a:	d10c      	bne.n	80066a6 <HAL_RCC_OscConfig+0x356>
 800668c:	4b61      	ldr	r3, [pc, #388]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	4a60      	ldr	r2, [pc, #384]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006692:	f043 0304 	orr.w	r3, r3, #4
 8006696:	6213      	str	r3, [r2, #32]
 8006698:	4b5e      	ldr	r3, [pc, #376]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	4a5d      	ldr	r2, [pc, #372]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	6213      	str	r3, [r2, #32]
 80066a4:	e00b      	b.n	80066be <HAL_RCC_OscConfig+0x36e>
 80066a6:	4b5b      	ldr	r3, [pc, #364]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	4a5a      	ldr	r2, [pc, #360]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	6213      	str	r3, [r2, #32]
 80066b2:	4b58      	ldr	r3, [pc, #352]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	4a57      	ldr	r2, [pc, #348]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80066b8:	f023 0304 	bic.w	r3, r3, #4
 80066bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d015      	beq.n	80066f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c6:	f7fd fdcb 	bl	8004260 <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066cc:	e00a      	b.n	80066e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ce:	f7fd fdc7 	bl	8004260 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e0b1      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e4:	4b4b      	ldr	r3, [pc, #300]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0ee      	beq.n	80066ce <HAL_RCC_OscConfig+0x37e>
 80066f0:	e014      	b.n	800671c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f2:	f7fd fdb5 	bl	8004260 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fd fdb1 	bl	8004260 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e09b      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006710:	4b40      	ldr	r3, [pc, #256]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1ee      	bne.n	80066fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d105      	bne.n	800672e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006722:	4b3c      	ldr	r3, [pc, #240]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	4a3b      	ldr	r2, [pc, #236]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800672c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8087 	beq.w	8006846 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006738:	4b36      	ldr	r3, [pc, #216]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f003 030c 	and.w	r3, r3, #12
 8006740:	2b08      	cmp	r3, #8
 8006742:	d061      	beq.n	8006808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d146      	bne.n	80067da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674c:	4b33      	ldr	r3, [pc, #204]	; (800681c <HAL_RCC_OscConfig+0x4cc>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006752:	f7fd fd85 	bl	8004260 <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800675a:	f7fd fd81 	bl	8004260 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e06d      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800676c:	4b29      	ldr	r3, [pc, #164]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f0      	bne.n	800675a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006780:	d108      	bne.n	8006794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006782:	4b24      	ldr	r3, [pc, #144]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	4921      	ldr	r1, [pc, #132]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006790:	4313      	orrs	r3, r2
 8006792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006794:	4b1f      	ldr	r3, [pc, #124]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a19      	ldr	r1, [r3, #32]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	430b      	orrs	r3, r1
 80067a6:	491b      	ldr	r1, [pc, #108]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ac:	4b1b      	ldr	r3, [pc, #108]	; (800681c <HAL_RCC_OscConfig+0x4cc>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b2:	f7fd fd55 	bl	8004260 <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ba:	f7fd fd51 	bl	8004260 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e03d      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067cc:	4b11      	ldr	r3, [pc, #68]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCC_OscConfig+0x46a>
 80067d8:	e035      	b.n	8006846 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067da:	4b10      	ldr	r3, [pc, #64]	; (800681c <HAL_RCC_OscConfig+0x4cc>)
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e0:	f7fd fd3e 	bl	8004260 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e8:	f7fd fd3a 	bl	8004260 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e026      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <HAL_RCC_OscConfig+0x4c4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f0      	bne.n	80067e8 <HAL_RCC_OscConfig+0x498>
 8006806:	e01e      	b.n	8006846 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d107      	bne.n	8006820 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e019      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
 8006814:	40021000 	.word	0x40021000
 8006818:	40007000 	.word	0x40007000
 800681c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <HAL_RCC_OscConfig+0x500>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	429a      	cmp	r2, r3
 8006832:	d106      	bne.n	8006842 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800683e:	429a      	cmp	r2, r3
 8006840:	d001      	beq.n	8006846 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40021000 	.word	0x40021000

08006854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0d0      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006868:	4b6a      	ldr	r3, [pc, #424]	; (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d910      	bls.n	8006898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006876:	4b67      	ldr	r3, [pc, #412]	; (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 0207 	bic.w	r2, r3, #7
 800687e:	4965      	ldr	r1, [pc, #404]	; (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	4313      	orrs	r3, r2
 8006884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006886:	4b63      	ldr	r3, [pc, #396]	; (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d001      	beq.n	8006898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0b8      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d020      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068b0:	4b59      	ldr	r3, [pc, #356]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4a58      	ldr	r2, [pc, #352]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068c8:	4b53      	ldr	r3, [pc, #332]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	4a52      	ldr	r2, [pc, #328]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d4:	4b50      	ldr	r3, [pc, #320]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	494d      	ldr	r1, [pc, #308]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d040      	beq.n	8006974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d107      	bne.n	800690a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068fa:	4b47      	ldr	r3, [pc, #284]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d115      	bne.n	8006932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e07f      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d107      	bne.n	8006922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006912:	4b41      	ldr	r3, [pc, #260]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e073      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006922:	4b3d      	ldr	r3, [pc, #244]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e06b      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006932:	4b39      	ldr	r3, [pc, #228]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f023 0203 	bic.w	r2, r3, #3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	4936      	ldr	r1, [pc, #216]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 8006940:	4313      	orrs	r3, r2
 8006942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006944:	f7fd fc8c 	bl	8004260 <HAL_GetTick>
 8006948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	e00a      	b.n	8006962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800694c:	f7fd fc88 	bl	8004260 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	; 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e053      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006962:	4b2d      	ldr	r3, [pc, #180]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f003 020c 	and.w	r2, r3, #12
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	429a      	cmp	r2, r3
 8006972:	d1eb      	bne.n	800694c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006974:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d210      	bcs.n	80069a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006982:	4b24      	ldr	r3, [pc, #144]	; (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 0207 	bic.w	r2, r3, #7
 800698a:	4922      	ldr	r1, [pc, #136]	; (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	4313      	orrs	r3, r2
 8006990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006992:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <HAL_RCC_ClockConfig+0x1c0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d001      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e032      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b0:	4b19      	ldr	r3, [pc, #100]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4916      	ldr	r1, [pc, #88]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069ce:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	490e      	ldr	r1, [pc, #56]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069e2:	f000 f821 	bl	8006a28 <HAL_RCC_GetSysClockFreq>
 80069e6:	4602      	mov	r2, r0
 80069e8:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	091b      	lsrs	r3, r3, #4
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	490a      	ldr	r1, [pc, #40]	; (8006a1c <HAL_RCC_ClockConfig+0x1c8>)
 80069f4:	5ccb      	ldrb	r3, [r1, r3]
 80069f6:	fa22 f303 	lsr.w	r3, r2, r3
 80069fa:	4a09      	ldr	r2, [pc, #36]	; (8006a20 <HAL_RCC_ClockConfig+0x1cc>)
 80069fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069fe:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <HAL_RCC_ClockConfig+0x1d0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fd fbea 	bl	80041dc <HAL_InitTick>

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40022000 	.word	0x40022000
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	0800d8ac 	.word	0x0800d8ac
 8006a20:	20000604 	.word	0x20000604
 8006a24:	20000608 	.word	0x20000608

08006a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a28:	b490      	push	{r4, r7}
 8006a2a:	b08a      	sub	sp, #40	; 0x28
 8006a2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a2e:	4b29      	ldr	r3, [pc, #164]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006a30:	1d3c      	adds	r4, r7, #4
 8006a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a38:	f240 2301 	movw	r3, #513	; 0x201
 8006a3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	2300      	movs	r3, #0
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	2300      	movs	r3, #0
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a52:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f003 030c 	and.w	r3, r3, #12
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d002      	beq.n	8006a68 <HAL_RCC_GetSysClockFreq+0x40>
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d003      	beq.n	8006a6e <HAL_RCC_GetSysClockFreq+0x46>
 8006a66:	e02b      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a68:	4b1c      	ldr	r3, [pc, #112]	; (8006adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a6a:	623b      	str	r3, [r7, #32]
      break;
 8006a6c:	e02b      	b.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	0c9b      	lsrs	r3, r3, #18
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	3328      	adds	r3, #40	; 0x28
 8006a78:	443b      	add	r3, r7
 8006a7a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a7e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d012      	beq.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a8a:	4b13      	ldr	r3, [pc, #76]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	0c5b      	lsrs	r3, r3, #17
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	3328      	adds	r3, #40	; 0x28
 8006a96:	443b      	add	r3, r7
 8006a98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	4a0e      	ldr	r2, [pc, #56]	; (8006adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8006aa2:	fb03 f202 	mul.w	r2, r3, r2
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
 8006aae:	e004      	b.n	8006aba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	4a0b      	ldr	r2, [pc, #44]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ab4:	fb02 f303 	mul.w	r3, r2, r3
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	623b      	str	r3, [r7, #32]
      break;
 8006abe:	e002      	b.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ac0:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ac2:	623b      	str	r3, [r7, #32]
      break;
 8006ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3728      	adds	r7, #40	; 0x28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc90      	pop	{r4, r7}
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	0800d89c 	.word	0x0800d89c
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	00f42400 	.word	0x00f42400
 8006ae0:	003d0900 	.word	0x003d0900
 8006ae4:	007a1200 	.word	0x007a1200

08006ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aec:	4b02      	ldr	r3, [pc, #8]	; (8006af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006aee:	681b      	ldr	r3, [r3, #0]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr
 8006af8:	20000604 	.word	0x20000604

08006afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b00:	f7ff fff2 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8006b04:	4602      	mov	r2, r0
 8006b06:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	0a1b      	lsrs	r3, r3, #8
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	4903      	ldr	r1, [pc, #12]	; (8006b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b12:	5ccb      	ldrb	r3, [r1, r3]
 8006b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	0800d8bc 	.word	0x0800d8bc

08006b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b28:	f7ff ffde 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	0adb      	lsrs	r3, r3, #11
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	4903      	ldr	r1, [pc, #12]	; (8006b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b3a:	5ccb      	ldrb	r3, [r1, r3]
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40021000 	.word	0x40021000
 8006b48:	0800d8bc 	.word	0x0800d8bc

08006b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b54:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <RCC_Delay+0x34>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a0a      	ldr	r2, [pc, #40]	; (8006b84 <RCC_Delay+0x38>)
 8006b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5e:	0a5b      	lsrs	r3, r3, #9
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b68:	bf00      	nop
  }
  while (Delay --);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1e5a      	subs	r2, r3, #1
 8006b6e:	60fa      	str	r2, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1f9      	bne.n	8006b68 <RCC_Delay+0x1c>
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr
 8006b80:	20000604 	.word	0x20000604
 8006b84:	10624dd3 	.word	0x10624dd3

08006b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d07d      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ba8:	4b4f      	ldr	r3, [pc, #316]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10d      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bb4:	4b4c      	ldr	r3, [pc, #304]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	4a4b      	ldr	r2, [pc, #300]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bbe:	61d3      	str	r3, [r2, #28]
 8006bc0:	4b49      	ldr	r3, [pc, #292]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	60bb      	str	r3, [r7, #8]
 8006bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bd0:	4b46      	ldr	r3, [pc, #280]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d118      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bdc:	4b43      	ldr	r3, [pc, #268]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a42      	ldr	r2, [pc, #264]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006be8:	f7fd fb3a 	bl	8004260 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bee:	e008      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf0:	f7fd fb36 	bl	8004260 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b64      	cmp	r3, #100	; 0x64
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e06d      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c02:	4b3a      	ldr	r3, [pc, #232]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c0e:	4b36      	ldr	r3, [pc, #216]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d02e      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d027      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c2c:	4b2e      	ldr	r3, [pc, #184]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c36:	4b2e      	ldr	r3, [pc, #184]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c3c:	4b2c      	ldr	r3, [pc, #176]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c42:	4a29      	ldr	r2, [pc, #164]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d014      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c52:	f7fd fb05 	bl	8004260 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c58:	e00a      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c5a:	f7fd fb01 	bl	8004260 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e036      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c70:	4b1d      	ldr	r3, [pc, #116]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0ee      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4917      	ldr	r1, [pc, #92]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d105      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c94:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	4a13      	ldr	r2, [pc, #76]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cac:	4b0e      	ldr	r3, [pc, #56]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	490b      	ldr	r1, [pc, #44]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d008      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cca:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	4904      	ldr	r1, [pc, #16]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	40007000 	.word	0x40007000
 8006cf0:	42420440 	.word	0x42420440

08006cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e041      	b.n	8006d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fc ff9a 	bl	8003c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f000 fe7e 	bl	8007a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d001      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e044      	b.n	8006e36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a1d      	ldr	r2, [pc, #116]	; (8006e40 <HAL_TIM_Base_Start_IT+0xac>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d018      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x6c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1c      	ldr	r2, [pc, #112]	; (8006e44 <HAL_TIM_Base_Start_IT+0xb0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d013      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x6c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de0:	d00e      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x6c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a18      	ldr	r2, [pc, #96]	; (8006e48 <HAL_TIM_Base_Start_IT+0xb4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d009      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x6c>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a16      	ldr	r2, [pc, #88]	; (8006e4c <HAL_TIM_Base_Start_IT+0xb8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d004      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x6c>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a15      	ldr	r2, [pc, #84]	; (8006e50 <HAL_TIM_Base_Start_IT+0xbc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d111      	bne.n	8006e24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b06      	cmp	r3, #6
 8006e10:	d010      	beq.n	8006e34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0201 	orr.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e22:	e007      	b.n	8006e34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0201 	orr.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr
 8006e40:	40012c00 	.word	0x40012c00
 8006e44:	40013400 	.word	0x40013400
 8006e48:	40000400 	.word	0x40000400
 8006e4c:	40000800 	.word	0x40000800
 8006e50:	40000c00 	.word	0x40000c00

08006e54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e041      	b.n	8006eea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f839 	bl	8006ef2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	4619      	mov	r1, r3
 8006e92:	4610      	mov	r0, r2
 8006e94:	f000 fdce 	bl	8007a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bc80      	pop	{r7}
 8006f02:	4770      	bx	lr

08006f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d109      	bne.n	8006f28 <HAL_TIM_PWM_Start+0x24>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	bf14      	ite	ne
 8006f20:	2301      	movne	r3, #1
 8006f22:	2300      	moveq	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	e022      	b.n	8006f6e <HAL_TIM_PWM_Start+0x6a>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d109      	bne.n	8006f42 <HAL_TIM_PWM_Start+0x3e>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	bf14      	ite	ne
 8006f3a:	2301      	movne	r3, #1
 8006f3c:	2300      	moveq	r3, #0
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	e015      	b.n	8006f6e <HAL_TIM_PWM_Start+0x6a>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d109      	bne.n	8006f5c <HAL_TIM_PWM_Start+0x58>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	bf14      	ite	ne
 8006f54:	2301      	movne	r3, #1
 8006f56:	2300      	moveq	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	e008      	b.n	8006f6e <HAL_TIM_PWM_Start+0x6a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	bf14      	ite	ne
 8006f68:	2301      	movne	r3, #1
 8006f6a:	2300      	moveq	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e072      	b.n	800705c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_PWM_Start+0x82>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f84:	e013      	b.n	8006fae <HAL_TIM_PWM_Start+0xaa>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d104      	bne.n	8006f96 <HAL_TIM_PWM_Start+0x92>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f94:	e00b      	b.n	8006fae <HAL_TIM_PWM_Start+0xaa>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d104      	bne.n	8006fa6 <HAL_TIM_PWM_Start+0xa2>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fa4:	e003      	b.n	8006fae <HAL_TIM_PWM_Start+0xaa>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fff8 	bl	8007fac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a28      	ldr	r2, [pc, #160]	; (8007064 <HAL_TIM_PWM_Start+0x160>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIM_PWM_Start+0xcc>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a27      	ldr	r2, [pc, #156]	; (8007068 <HAL_TIM_PWM_Start+0x164>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIM_PWM_Start+0xd0>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e000      	b.n	8006fd6 <HAL_TIM_PWM_Start+0xd2>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d007      	beq.n	8006fea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <HAL_TIM_PWM_Start+0x160>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d018      	beq.n	8007026 <HAL_TIM_PWM_Start+0x122>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1b      	ldr	r2, [pc, #108]	; (8007068 <HAL_TIM_PWM_Start+0x164>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <HAL_TIM_PWM_Start+0x122>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007006:	d00e      	beq.n	8007026 <HAL_TIM_PWM_Start+0x122>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a17      	ldr	r2, [pc, #92]	; (800706c <HAL_TIM_PWM_Start+0x168>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_TIM_PWM_Start+0x122>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a16      	ldr	r2, [pc, #88]	; (8007070 <HAL_TIM_PWM_Start+0x16c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d004      	beq.n	8007026 <HAL_TIM_PWM_Start+0x122>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a14      	ldr	r2, [pc, #80]	; (8007074 <HAL_TIM_PWM_Start+0x170>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d111      	bne.n	800704a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b06      	cmp	r3, #6
 8007036:	d010      	beq.n	800705a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007048:	e007      	b.n	800705a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0201 	orr.w	r2, r2, #1
 8007058:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40012c00 	.word	0x40012c00
 8007068:	40013400 	.word	0x40013400
 800706c:	40000400 	.word	0x40000400
 8007070:	40000800 	.word	0x40000800
 8007074:	40000c00 	.word	0x40000c00

08007078 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d109      	bne.n	800709c <HAL_TIM_PWM_Start_IT+0x24>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	bf14      	ite	ne
 8007094:	2301      	movne	r3, #1
 8007096:	2300      	moveq	r3, #0
 8007098:	b2db      	uxtb	r3, r3
 800709a:	e022      	b.n	80070e2 <HAL_TIM_PWM_Start_IT+0x6a>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d109      	bne.n	80070b6 <HAL_TIM_PWM_Start_IT+0x3e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	bf14      	ite	ne
 80070ae:	2301      	movne	r3, #1
 80070b0:	2300      	moveq	r3, #0
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	e015      	b.n	80070e2 <HAL_TIM_PWM_Start_IT+0x6a>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d109      	bne.n	80070d0 <HAL_TIM_PWM_Start_IT+0x58>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	bf14      	ite	ne
 80070c8:	2301      	movne	r3, #1
 80070ca:	2300      	moveq	r3, #0
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	e008      	b.n	80070e2 <HAL_TIM_PWM_Start_IT+0x6a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	bf14      	ite	ne
 80070dc:	2301      	movne	r3, #1
 80070de:	2300      	moveq	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e0b8      	b.n	800725c <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Start_IT+0x82>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070f8:	e013      	b.n	8007122 <HAL_TIM_PWM_Start_IT+0xaa>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d104      	bne.n	800710a <HAL_TIM_PWM_Start_IT+0x92>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007108:	e00b      	b.n	8007122 <HAL_TIM_PWM_Start_IT+0xaa>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b08      	cmp	r3, #8
 800710e:	d104      	bne.n	800711a <HAL_TIM_PWM_Start_IT+0xa2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007118:	e003      	b.n	8007122 <HAL_TIM_PWM_Start_IT+0xaa>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2202      	movs	r2, #2
 800711e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b0c      	cmp	r3, #12
 8007126:	d841      	bhi.n	80071ac <HAL_TIM_PWM_Start_IT+0x134>
 8007128:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <HAL_TIM_PWM_Start_IT+0xb8>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007165 	.word	0x08007165
 8007134:	080071ad 	.word	0x080071ad
 8007138:	080071ad 	.word	0x080071ad
 800713c:	080071ad 	.word	0x080071ad
 8007140:	08007177 	.word	0x08007177
 8007144:	080071ad 	.word	0x080071ad
 8007148:	080071ad 	.word	0x080071ad
 800714c:	080071ad 	.word	0x080071ad
 8007150:	08007189 	.word	0x08007189
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071ad 	.word	0x080071ad
 800715c:	080071ad 	.word	0x080071ad
 8007160:	0800719b 	.word	0x0800719b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0202 	orr.w	r2, r2, #2
 8007172:	60da      	str	r2, [r3, #12]
      break;
 8007174:	e01b      	b.n	80071ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0204 	orr.w	r2, r2, #4
 8007184:	60da      	str	r2, [r3, #12]
      break;
 8007186:	e012      	b.n	80071ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0208 	orr.w	r2, r2, #8
 8007196:	60da      	str	r2, [r3, #12]
      break;
 8007198:	e009      	b.n	80071ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f042 0210 	orr.w	r2, r2, #16
 80071a8:	60da      	str	r2, [r3, #12]
      break;
 80071aa:	e000      	b.n	80071ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80071ac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2201      	movs	r2, #1
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fef8 	bl	8007fac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a28      	ldr	r2, [pc, #160]	; (8007264 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d004      	beq.n	80071d0 <HAL_TIM_PWM_Start_IT+0x158>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a27      	ldr	r2, [pc, #156]	; (8007268 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d101      	bne.n	80071d4 <HAL_TIM_PWM_Start_IT+0x15c>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <HAL_TIM_PWM_Start_IT+0x15e>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d007      	beq.n	80071ea <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d018      	beq.n	8007226 <HAL_TIM_PWM_Start_IT+0x1ae>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1b      	ldr	r2, [pc, #108]	; (8007268 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d013      	beq.n	8007226 <HAL_TIM_PWM_Start_IT+0x1ae>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007206:	d00e      	beq.n	8007226 <HAL_TIM_PWM_Start_IT+0x1ae>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a17      	ldr	r2, [pc, #92]	; (800726c <HAL_TIM_PWM_Start_IT+0x1f4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d009      	beq.n	8007226 <HAL_TIM_PWM_Start_IT+0x1ae>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a16      	ldr	r2, [pc, #88]	; (8007270 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d004      	beq.n	8007226 <HAL_TIM_PWM_Start_IT+0x1ae>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a14      	ldr	r2, [pc, #80]	; (8007274 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d111      	bne.n	800724a <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b06      	cmp	r3, #6
 8007236:	d010      	beq.n	800725a <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007248:	e007      	b.n	800725a <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0201 	orr.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40012c00 	.word	0x40012c00
 8007268:	40013400 	.word	0x40013400
 800726c:	40000400 	.word	0x40000400
 8007270:	40000800 	.word	0x40000800
 8007274:	40000c00 	.word	0x40000c00

08007278 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e093      	b.n	80073b4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d106      	bne.n	80072a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7fc fd65 	bl	8003d70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072bc:	f023 0307 	bic.w	r3, r3, #7
 80072c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f000 fbb1 	bl	8007a34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fa:	f023 0303 	bic.w	r3, r3, #3
 80072fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	021b      	lsls	r3, r3, #8
 800730a:	4313      	orrs	r3, r2
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007318:	f023 030c 	bic.w	r3, r3, #12
 800731c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	021b      	lsls	r3, r3, #8
 8007334:	4313      	orrs	r3, r2
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	011a      	lsls	r2, r3, #4
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	031b      	lsls	r3, r3, #12
 8007348:	4313      	orrs	r3, r2
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007356:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	4313      	orrs	r3, r2
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d110      	bne.n	800740e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d102      	bne.n	80073f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80073f2:	7b7b      	ldrb	r3, [r7, #13]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d001      	beq.n	80073fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e069      	b.n	80074d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800740c:	e031      	b.n	8007472 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b04      	cmp	r3, #4
 8007412:	d110      	bne.n	8007436 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d102      	bne.n	8007420 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800741a:	7b3b      	ldrb	r3, [r7, #12]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d001      	beq.n	8007424 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e055      	b.n	80074d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007434:	e01d      	b.n	8007472 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d108      	bne.n	800744e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d105      	bne.n	800744e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007442:	7b7b      	ldrb	r3, [r7, #13]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d102      	bne.n	800744e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007448:	7b3b      	ldrb	r3, [r7, #12]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d001      	beq.n	8007452 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e03e      	b.n	80074d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2202      	movs	r2, #2
 8007456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2202      	movs	r2, #2
 800745e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2202      	movs	r2, #2
 8007466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2202      	movs	r2, #2
 800746e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_TIM_Encoder_Start+0xc4>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b04      	cmp	r3, #4
 800747c:	d008      	beq.n	8007490 <HAL_TIM_Encoder_Start+0xd4>
 800747e:	e00f      	b.n	80074a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2201      	movs	r2, #1
 8007486:	2100      	movs	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f000 fd8f 	bl	8007fac <TIM_CCxChannelCmd>
      break;
 800748e:	e016      	b.n	80074be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2201      	movs	r2, #1
 8007496:	2104      	movs	r1, #4
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fd87 	bl	8007fac <TIM_CCxChannelCmd>
      break;
 800749e:	e00e      	b.n	80074be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2201      	movs	r2, #1
 80074a6:	2100      	movs	r1, #0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fd7f 	bl	8007fac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2201      	movs	r2, #1
 80074b4:	2104      	movs	r1, #4
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fd78 	bl	8007fac <TIM_CCxChannelCmd>
      break;
 80074bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0201 	orr.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d122      	bne.n	8007534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d11b      	bne.n	8007534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f06f 0202 	mvn.w	r2, #2
 8007504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fa6f 	bl	80079fe <HAL_TIM_IC_CaptureCallback>
 8007520:	e005      	b.n	800752e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa62 	bl	80079ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fa71 	bl	8007a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b04      	cmp	r3, #4
 8007540:	d122      	bne.n	8007588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b04      	cmp	r3, #4
 800754e:	d11b      	bne.n	8007588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0204 	mvn.w	r2, #4
 8007558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2202      	movs	r2, #2
 800755e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa45 	bl	80079fe <HAL_TIM_IC_CaptureCallback>
 8007574:	e005      	b.n	8007582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa38 	bl	80079ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa47 	bl	8007a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	2b08      	cmp	r3, #8
 8007594:	d122      	bne.n	80075dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d11b      	bne.n	80075dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0208 	mvn.w	r2, #8
 80075ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2204      	movs	r2, #4
 80075b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa1b 	bl	80079fe <HAL_TIM_IC_CaptureCallback>
 80075c8:	e005      	b.n	80075d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa0e 	bl	80079ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fa1d 	bl	8007a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	2b10      	cmp	r3, #16
 80075e8:	d122      	bne.n	8007630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f003 0310 	and.w	r3, r3, #16
 80075f4:	2b10      	cmp	r3, #16
 80075f6:	d11b      	bne.n	8007630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f06f 0210 	mvn.w	r2, #16
 8007600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2208      	movs	r2, #8
 8007606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9f1 	bl	80079fe <HAL_TIM_IC_CaptureCallback>
 800761c:	e005      	b.n	800762a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9e4 	bl	80079ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f9f3 	bl	8007a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b01      	cmp	r3, #1
 800763c:	d10e      	bne.n	800765c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b01      	cmp	r3, #1
 800764a:	d107      	bne.n	800765c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f06f 0201 	mvn.w	r2, #1
 8007654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fb fada 	bl	8002c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007666:	2b80      	cmp	r3, #128	; 0x80
 8007668:	d10e      	bne.n	8007688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007674:	2b80      	cmp	r3, #128	; 0x80
 8007676:	d107      	bne.n	8007688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fd7c 	bl	8008180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007692:	2b40      	cmp	r3, #64	; 0x40
 8007694:	d10e      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b40      	cmp	r3, #64	; 0x40
 80076a2:	d107      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f9b7 	bl	8007a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f003 0320 	and.w	r3, r3, #32
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d10e      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d107      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f06f 0220 	mvn.w	r2, #32
 80076d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fd47 	bl	800816e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80076fe:	2302      	movs	r3, #2
 8007700:	e0ac      	b.n	800785c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b0c      	cmp	r3, #12
 800770e:	f200 809f 	bhi.w	8007850 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	0800774d 	.word	0x0800774d
 800771c:	08007851 	.word	0x08007851
 8007720:	08007851 	.word	0x08007851
 8007724:	08007851 	.word	0x08007851
 8007728:	0800778d 	.word	0x0800778d
 800772c:	08007851 	.word	0x08007851
 8007730:	08007851 	.word	0x08007851
 8007734:	08007851 	.word	0x08007851
 8007738:	080077cf 	.word	0x080077cf
 800773c:	08007851 	.word	0x08007851
 8007740:	08007851 	.word	0x08007851
 8007744:	08007851 	.word	0x08007851
 8007748:	0800780f 	.word	0x0800780f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 f9e8 	bl	8007b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0208 	orr.w	r2, r2, #8
 8007766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0204 	bic.w	r2, r2, #4
 8007776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6999      	ldr	r1, [r3, #24]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691a      	ldr	r2, [r3, #16]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	619a      	str	r2, [r3, #24]
      break;
 800778a:	e062      	b.n	8007852 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fa38 	bl	8007c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6999      	ldr	r1, [r3, #24]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	021a      	lsls	r2, r3, #8
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	619a      	str	r2, [r3, #24]
      break;
 80077cc:	e041      	b.n	8007852 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fa8b 	bl	8007cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f042 0208 	orr.w	r2, r2, #8
 80077e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 0204 	bic.w	r2, r2, #4
 80077f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69d9      	ldr	r1, [r3, #28]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	61da      	str	r2, [r3, #28]
      break;
 800780c:	e021      	b.n	8007852 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fadf 	bl	8007dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69da      	ldr	r2, [r3, #28]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69d9      	ldr	r1, [r3, #28]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	021a      	lsls	r2, r3, #8
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	61da      	str	r2, [r3, #28]
      break;
 800784e:	e000      	b.n	8007852 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007850:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007874:	2b01      	cmp	r3, #1
 8007876:	d101      	bne.n	800787c <HAL_TIM_ConfigClockSource+0x18>
 8007878:	2302      	movs	r3, #2
 800787a:	e0b3      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x180>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800789a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b4:	d03e      	beq.n	8007934 <HAL_TIM_ConfigClockSource+0xd0>
 80078b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ba:	f200 8087 	bhi.w	80079cc <HAL_TIM_ConfigClockSource+0x168>
 80078be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c2:	f000 8085 	beq.w	80079d0 <HAL_TIM_ConfigClockSource+0x16c>
 80078c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ca:	d87f      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x168>
 80078cc:	2b70      	cmp	r3, #112	; 0x70
 80078ce:	d01a      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0xa2>
 80078d0:	2b70      	cmp	r3, #112	; 0x70
 80078d2:	d87b      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x168>
 80078d4:	2b60      	cmp	r3, #96	; 0x60
 80078d6:	d050      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x116>
 80078d8:	2b60      	cmp	r3, #96	; 0x60
 80078da:	d877      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x168>
 80078dc:	2b50      	cmp	r3, #80	; 0x50
 80078de:	d03c      	beq.n	800795a <HAL_TIM_ConfigClockSource+0xf6>
 80078e0:	2b50      	cmp	r3, #80	; 0x50
 80078e2:	d873      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x168>
 80078e4:	2b40      	cmp	r3, #64	; 0x40
 80078e6:	d058      	beq.n	800799a <HAL_TIM_ConfigClockSource+0x136>
 80078e8:	2b40      	cmp	r3, #64	; 0x40
 80078ea:	d86f      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x168>
 80078ec:	2b30      	cmp	r3, #48	; 0x30
 80078ee:	d064      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0x156>
 80078f0:	2b30      	cmp	r3, #48	; 0x30
 80078f2:	d86b      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x168>
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d060      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0x156>
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	d867      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x168>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d05c      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0x156>
 8007900:	2b10      	cmp	r3, #16
 8007902:	d05a      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007904:	e062      	b.n	80079cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6899      	ldr	r1, [r3, #8]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f000 fb2a 	bl	8007f6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007928:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	609a      	str	r2, [r3, #8]
      break;
 8007932:	e04e      	b.n	80079d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	6899      	ldr	r1, [r3, #8]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f000 fb13 	bl	8007f6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007956:	609a      	str	r2, [r3, #8]
      break;
 8007958:	e03b      	b.n	80079d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6859      	ldr	r1, [r3, #4]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	461a      	mov	r2, r3
 8007968:	f000 fa8a 	bl	8007e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2150      	movs	r1, #80	; 0x50
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fae1 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 8007978:	e02b      	b.n	80079d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	6859      	ldr	r1, [r3, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	461a      	mov	r2, r3
 8007988:	f000 faa8 	bl	8007edc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2160      	movs	r1, #96	; 0x60
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fad1 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 8007998:	e01b      	b.n	80079d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	6859      	ldr	r1, [r3, #4]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	461a      	mov	r2, r3
 80079a8:	f000 fa6a 	bl	8007e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2140      	movs	r1, #64	; 0x40
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fac1 	bl	8007f3a <TIM_ITRx_SetConfig>
      break;
 80079b8:	e00b      	b.n	80079d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f000 fab8 	bl	8007f3a <TIM_ITRx_SetConfig>
        break;
 80079ca:	e002      	b.n	80079d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80079cc:	bf00      	nop
 80079ce:	e000      	b.n	80079d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80079d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bc80      	pop	{r7}
 80079fc:	4770      	bx	lr

080079fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr

08007a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr

08007a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr

08007a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a33      	ldr	r2, [pc, #204]	; (8007b14 <TIM_Base_SetConfig+0xe0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a32      	ldr	r2, [pc, #200]	; (8007b18 <TIM_Base_SetConfig+0xe4>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00f      	beq.n	8007a74 <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a5a:	d00b      	beq.n	8007a74 <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a2f      	ldr	r2, [pc, #188]	; (8007b1c <TIM_Base_SetConfig+0xe8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d007      	beq.n	8007a74 <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a2e      	ldr	r2, [pc, #184]	; (8007b20 <TIM_Base_SetConfig+0xec>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_Base_SetConfig+0x40>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <TIM_Base_SetConfig+0xf0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d108      	bne.n	8007a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a22      	ldr	r2, [pc, #136]	; (8007b14 <TIM_Base_SetConfig+0xe0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d013      	beq.n	8007ab6 <TIM_Base_SetConfig+0x82>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a21      	ldr	r2, [pc, #132]	; (8007b18 <TIM_Base_SetConfig+0xe4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00f      	beq.n	8007ab6 <TIM_Base_SetConfig+0x82>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9c:	d00b      	beq.n	8007ab6 <TIM_Base_SetConfig+0x82>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a1e      	ldr	r2, [pc, #120]	; (8007b1c <TIM_Base_SetConfig+0xe8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d007      	beq.n	8007ab6 <TIM_Base_SetConfig+0x82>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a1d      	ldr	r2, [pc, #116]	; (8007b20 <TIM_Base_SetConfig+0xec>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <TIM_Base_SetConfig+0x82>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a1c      	ldr	r2, [pc, #112]	; (8007b24 <TIM_Base_SetConfig+0xf0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d108      	bne.n	8007ac8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <TIM_Base_SetConfig+0xe0>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <TIM_Base_SetConfig+0xc8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a08      	ldr	r2, [pc, #32]	; (8007b18 <TIM_Base_SetConfig+0xe4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d103      	bne.n	8007b04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	615a      	str	r2, [r3, #20]
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr
 8007b14:	40012c00 	.word	0x40012c00
 8007b18:	40013400 	.word	0x40013400
 8007b1c:	40000400 	.word	0x40000400
 8007b20:	40000800 	.word	0x40000800
 8007b24:	40000c00 	.word	0x40000c00

08007b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f023 0201 	bic.w	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0303 	bic.w	r3, r3, #3
 8007b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f023 0302 	bic.w	r3, r3, #2
 8007b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a20      	ldr	r2, [pc, #128]	; (8007c00 <TIM_OC1_SetConfig+0xd8>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d003      	beq.n	8007b8c <TIM_OC1_SetConfig+0x64>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a1f      	ldr	r2, [pc, #124]	; (8007c04 <TIM_OC1_SetConfig+0xdc>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d10c      	bne.n	8007ba6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f023 0308 	bic.w	r3, r3, #8
 8007b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f023 0304 	bic.w	r3, r3, #4
 8007ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <TIM_OC1_SetConfig+0xd8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d003      	beq.n	8007bb6 <TIM_OC1_SetConfig+0x8e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a14      	ldr	r2, [pc, #80]	; (8007c04 <TIM_OC1_SetConfig+0xdc>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d111      	bne.n	8007bda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	621a      	str	r2, [r3, #32]
}
 8007bf4:	bf00      	nop
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40013400 	.word	0x40013400

08007c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f023 0210 	bic.w	r2, r3, #16
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f023 0320 	bic.w	r3, r3, #32
 8007c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	011b      	lsls	r3, r3, #4
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a21      	ldr	r2, [pc, #132]	; (8007ce8 <TIM_OC2_SetConfig+0xe0>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_OC2_SetConfig+0x68>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a20      	ldr	r2, [pc, #128]	; (8007cec <TIM_OC2_SetConfig+0xe4>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10d      	bne.n	8007c8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a16      	ldr	r2, [pc, #88]	; (8007ce8 <TIM_OC2_SetConfig+0xe0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d003      	beq.n	8007c9c <TIM_OC2_SetConfig+0x94>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a15      	ldr	r2, [pc, #84]	; (8007cec <TIM_OC2_SetConfig+0xe4>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d113      	bne.n	8007cc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ca2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007caa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	621a      	str	r2, [r3, #32]
}
 8007cde:	bf00      	nop
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bc80      	pop	{r7}
 8007ce6:	4770      	bx	lr
 8007ce8:	40012c00 	.word	0x40012c00
 8007cec:	40013400 	.word	0x40013400

08007cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0303 	bic.w	r3, r3, #3
 8007d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a21      	ldr	r2, [pc, #132]	; (8007dd0 <TIM_OC3_SetConfig+0xe0>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d003      	beq.n	8007d56 <TIM_OC3_SetConfig+0x66>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a20      	ldr	r2, [pc, #128]	; (8007dd4 <TIM_OC3_SetConfig+0xe4>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d10d      	bne.n	8007d72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a16      	ldr	r2, [pc, #88]	; (8007dd0 <TIM_OC3_SetConfig+0xe0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d003      	beq.n	8007d82 <TIM_OC3_SetConfig+0x92>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <TIM_OC3_SetConfig+0xe4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d113      	bne.n	8007daa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	621a      	str	r2, [r3, #32]
}
 8007dc4:	bf00      	nop
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	40012c00 	.word	0x40012c00
 8007dd4:	40013400 	.word	0x40013400

08007dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	031b      	lsls	r3, r3, #12
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a11      	ldr	r2, [pc, #68]	; (8007e78 <TIM_OC4_SetConfig+0xa0>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d003      	beq.n	8007e40 <TIM_OC4_SetConfig+0x68>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a10      	ldr	r2, [pc, #64]	; (8007e7c <TIM_OC4_SetConfig+0xa4>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d109      	bne.n	8007e54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	019b      	lsls	r3, r3, #6
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	621a      	str	r2, [r3, #32]
}
 8007e6e:	bf00      	nop
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bc80      	pop	{r7}
 8007e76:	4770      	bx	lr
 8007e78:	40012c00 	.word	0x40012c00
 8007e7c:	40013400 	.word	0x40013400

08007e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	f023 0201 	bic.w	r2, r3, #1
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	011b      	lsls	r3, r3, #4
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f023 030a 	bic.w	r3, r3, #10
 8007ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	621a      	str	r2, [r3, #32]
}
 8007ed2:	bf00      	nop
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bc80      	pop	{r7}
 8007eda:	4770      	bx	lr

08007edc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	f023 0210 	bic.w	r2, r3, #16
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	031b      	lsls	r3, r3, #12
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	621a      	str	r2, [r3, #32]
}
 8007f30:	bf00      	nop
 8007f32:	371c      	adds	r7, #28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr

08007f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f043 0307 	orr.w	r3, r3, #7
 8007f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	609a      	str	r2, [r3, #8]
}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr

08007f6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b087      	sub	sp, #28
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	607a      	str	r2, [r7, #4]
 8007f7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	021a      	lsls	r2, r3, #8
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	609a      	str	r2, [r3, #8]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bc80      	pop	{r7}
 8007faa:	4770      	bx	lr

08007fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f003 031f 	and.w	r3, r3, #31
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a1a      	ldr	r2, [r3, #32]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	43db      	mvns	r3, r3
 8007fce:	401a      	ands	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a1a      	ldr	r2, [r3, #32]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	621a      	str	r2, [r3, #32]
}
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008008:	2302      	movs	r3, #2
 800800a:	e050      	b.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a1b      	ldr	r2, [pc, #108]	; (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d018      	beq.n	8008082 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a19      	ldr	r2, [pc, #100]	; (80080bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d013      	beq.n	8008082 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008062:	d00e      	beq.n	8008082 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a15      	ldr	r2, [pc, #84]	; (80080c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d009      	beq.n	8008082 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a14      	ldr	r2, [pc, #80]	; (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d004      	beq.n	8008082 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a12      	ldr	r2, [pc, #72]	; (80080c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d10c      	bne.n	800809c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008088:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	4313      	orrs	r3, r2
 8008092:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr
 80080b8:	40012c00 	.word	0x40012c00
 80080bc:	40013400 	.word	0x40013400
 80080c0:	40000400 	.word	0x40000400
 80080c4:	40000800 	.word	0x40000800
 80080c8:	40000c00 	.word	0x40000c00

080080cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d101      	bne.n	80080e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080e4:	2302      	movs	r3, #2
 80080e6:	e03d      	b.n	8008164 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	4313      	orrs	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4313      	orrs	r3, r2
 8008126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	4313      	orrs	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr

0800816e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	bc80      	pop	{r7}
 800817e:	4770      	bx	lr

08008180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e03f      	b.n	8008224 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7fb ff2f 	bl	800401c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2224      	movs	r2, #36	; 0x24
 80081c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fc84 	bl	8008ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691a      	ldr	r2, [r3, #16]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695a      	ldr	r2, [r3, #20]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800820a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	; 0x28
 8008230:	af02      	add	r7, sp, #8
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	4613      	mov	r3, r2
 800823a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b20      	cmp	r3, #32
 800824a:	d17c      	bne.n	8008346 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <HAL_UART_Transmit+0x2c>
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e075      	b.n	8008348 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008262:	2b01      	cmp	r3, #1
 8008264:	d101      	bne.n	800826a <HAL_UART_Transmit+0x3e>
 8008266:	2302      	movs	r3, #2
 8008268:	e06e      	b.n	8008348 <HAL_UART_Transmit+0x11c>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2221      	movs	r2, #33	; 0x21
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008280:	f7fb ffee 	bl	8004260 <HAL_GetTick>
 8008284:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	88fa      	ldrh	r2, [r7, #6]
 800828a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829a:	d108      	bne.n	80082ae <HAL_UART_Transmit+0x82>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d104      	bne.n	80082ae <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	61bb      	str	r3, [r7, #24]
 80082ac:	e003      	b.n	80082b6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80082be:	e02a      	b.n	8008316 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2200      	movs	r2, #0
 80082c8:	2180      	movs	r1, #128	; 0x80
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 fa37 	bl	800873e <UART_WaitOnFlagUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e036      	b.n	8008348 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10b      	bne.n	80082f8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	3302      	adds	r3, #2
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	e007      	b.n	8008308 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	3301      	adds	r3, #1
 8008306:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800831a:	b29b      	uxth	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1cf      	bne.n	80082c0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2200      	movs	r2, #0
 8008328:	2140      	movs	r1, #64	; 0x40
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fa07 	bl	800873e <UART_WaitOnFlagUntilTimeout>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e006      	b.n	8008348 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2220      	movs	r2, #32
 800833e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	e000      	b.n	8008348 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008346:	2302      	movs	r3, #2
  }
}
 8008348:	4618      	mov	r0, r3
 800834a:	3720      	adds	r7, #32
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b20      	cmp	r3, #32
 8008368:	d11d      	bne.n	80083a6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <HAL_UART_Receive_IT+0x26>
 8008370:	88fb      	ldrh	r3, [r7, #6]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e016      	b.n	80083a8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <HAL_UART_Receive_IT+0x38>
 8008384:	2302      	movs	r3, #2
 8008386:	e00f      	b.n	80083a8 <HAL_UART_Receive_IT+0x58>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008396:	88fb      	ldrh	r3, [r7, #6]
 8008398:	461a      	mov	r2, r3
 800839a:	68b9      	ldr	r1, [r7, #8]
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 fa18 	bl	80087d2 <UART_Start_Receive_IT>
 80083a2:	4603      	mov	r3, r0
 80083a4:	e000      	b.n	80083a8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80083a6:	2302      	movs	r3, #2
  }
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	; 0x28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	f003 030f 	and.w	r3, r3, #15
 80083de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10d      	bne.n	8008402 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	f003 0320 	and.w	r3, r3, #32
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d008      	beq.n	8008402 <HAL_UART_IRQHandler+0x52>
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fac9 	bl	8008992 <UART_Receive_IT>
      return;
 8008400:	e17b      	b.n	80086fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 80b1 	beq.w	800856c <HAL_UART_IRQHandler+0x1bc>
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d105      	bne.n	8008420 <HAL_UART_IRQHandler+0x70>
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 80a6 	beq.w	800856c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <HAL_UART_IRQHandler+0x90>
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008438:	f043 0201 	orr.w	r2, r3, #1
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	f003 0304 	and.w	r3, r3, #4
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00a      	beq.n	8008460 <HAL_UART_IRQHandler+0xb0>
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008458:	f043 0202 	orr.w	r2, r3, #2
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <HAL_UART_IRQHandler+0xd0>
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	f043 0204 	orr.w	r2, r3, #4
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	f003 0308 	and.w	r3, r3, #8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00f      	beq.n	80084aa <HAL_UART_IRQHandler+0xfa>
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	d104      	bne.n	800849e <HAL_UART_IRQHandler+0xee>
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d005      	beq.n	80084aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	f043 0208 	orr.w	r2, r3, #8
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 811e 	beq.w	80086f0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d007      	beq.n	80084ce <HAL_UART_IRQHandler+0x11e>
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fa62 	bl	8008992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	bf14      	ite	ne
 80084dc:	2301      	movne	r3, #1
 80084de:	2300      	moveq	r3, #0
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	f003 0308 	and.w	r3, r3, #8
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <HAL_UART_IRQHandler+0x146>
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d031      	beq.n	800855a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9a4 	bl	8008844 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	d023      	beq.n	8008552 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	695a      	ldr	r2, [r3, #20]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008518:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	2b00      	cmp	r3, #0
 8008520:	d013      	beq.n	800854a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	4a76      	ldr	r2, [pc, #472]	; (8008700 <HAL_UART_IRQHandler+0x350>)
 8008528:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	4618      	mov	r0, r3
 8008530:	f7fc fa30 	bl	8004994 <HAL_DMA_Abort_IT>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d016      	beq.n	8008568 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008544:	4610      	mov	r0, r2
 8008546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008548:	e00e      	b.n	8008568 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f8e3 	bl	8008716 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008550:	e00a      	b.n	8008568 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f8df 	bl	8008716 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008558:	e006      	b.n	8008568 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f8db 	bl	8008716 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008566:	e0c3      	b.n	80086f0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008568:	bf00      	nop
    return;
 800856a:	e0c1      	b.n	80086f0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	2b01      	cmp	r3, #1
 8008572:	f040 80a1 	bne.w	80086b8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	f003 0310 	and.w	r3, r3, #16
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 809b 	beq.w	80086b8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	f003 0310 	and.w	r3, r3, #16
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8095 	beq.w	80086b8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d04e      	beq.n	8008650 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80085bc:	8a3b      	ldrh	r3, [r7, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 8098 	beq.w	80086f4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085c8:	8a3a      	ldrh	r2, [r7, #16]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	f080 8092 	bcs.w	80086f4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8a3a      	ldrh	r2, [r7, #16]
 80085d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	2b20      	cmp	r3, #32
 80085de:	d02b      	beq.n	8008638 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085ee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0201 	bic.w	r2, r2, #1
 80085fe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695a      	ldr	r2, [r3, #20]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800860e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2220      	movs	r2, #32
 8008614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0210 	bic.w	r2, r2, #16
 800862c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	4618      	mov	r0, r3
 8008634:	f7fc f973 	bl	800491e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008640:	b29b      	uxth	r3, r3
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	b29b      	uxth	r3, r3
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f86d 	bl	8008728 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800864e:	e051      	b.n	80086f4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008658:	b29b      	uxth	r3, r3
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008662:	b29b      	uxth	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d047      	beq.n	80086f8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008668:	8a7b      	ldrh	r3, [r7, #18]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d044      	beq.n	80086f8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800867c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695a      	ldr	r2, [r3, #20]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 0201 	bic.w	r2, r2, #1
 800868c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2220      	movs	r2, #32
 8008692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 0210 	bic.w	r2, r2, #16
 80086aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086ac:	8a7b      	ldrh	r3, [r7, #18]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f839 	bl	8008728 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80086b6:	e01f      	b.n	80086f8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d008      	beq.n	80086d4 <HAL_UART_IRQHandler+0x324>
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f8f9 	bl	80088c4 <UART_Transmit_IT>
    return;
 80086d2:	e012      	b.n	80086fa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00d      	beq.n	80086fa <HAL_UART_IRQHandler+0x34a>
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f93a 	bl	8008962 <UART_EndTransmit_IT>
    return;
 80086ee:	e004      	b.n	80086fa <HAL_UART_IRQHandler+0x34a>
    return;
 80086f0:	bf00      	nop
 80086f2:	e002      	b.n	80086fa <HAL_UART_IRQHandler+0x34a>
      return;
 80086f4:	bf00      	nop
 80086f6:	e000      	b.n	80086fa <HAL_UART_IRQHandler+0x34a>
      return;
 80086f8:	bf00      	nop
  }
}
 80086fa:	3728      	adds	r7, #40	; 0x28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	0800889d 	.word	0x0800889d

08008704 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr

08008716 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr

08008728 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	bc80      	pop	{r7}
 800873c:	4770      	bx	lr

0800873e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	603b      	str	r3, [r7, #0]
 800874a:	4613      	mov	r3, r2
 800874c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800874e:	e02c      	b.n	80087aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008756:	d028      	beq.n	80087aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d007      	beq.n	800876e <UART_WaitOnFlagUntilTimeout+0x30>
 800875e:	f7fb fd7f 	bl	8004260 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	429a      	cmp	r2, r3
 800876c:	d21d      	bcs.n	80087aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800877c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695a      	ldr	r2, [r3, #20]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 0201 	bic.w	r2, r2, #1
 800878c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2220      	movs	r2, #32
 8008792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2220      	movs	r2, #32
 800879a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e00f      	b.n	80087ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4013      	ands	r3, r2
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	bf0c      	ite	eq
 80087ba:	2301      	moveq	r3, #1
 80087bc:	2300      	movne	r3, #0
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d0c3      	beq.n	8008750 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	4613      	mov	r3, r2
 80087de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	88fa      	ldrh	r2, [r7, #6]
 80087ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	88fa      	ldrh	r2, [r7, #6]
 80087f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2222      	movs	r2, #34	; 0x22
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008816:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	695a      	ldr	r2, [r3, #20]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0201 	orr.w	r2, r2, #1
 8008826:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0220 	orr.w	r2, r2, #32
 8008836:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr

08008844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800885a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	695a      	ldr	r2, [r3, #20]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f022 0201 	bic.w	r2, r2, #1
 800886a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	2b01      	cmp	r3, #1
 8008872:	d107      	bne.n	8008884 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 0210 	bic.w	r2, r2, #16
 8008882:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr

0800889c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7ff ff2d 	bl	8008716 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088bc:	bf00      	nop
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b21      	cmp	r3, #33	; 0x21
 80088d6:	d13e      	bne.n	8008956 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e0:	d114      	bne.n	800890c <UART_Transmit_IT+0x48>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d110      	bne.n	800890c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a1b      	ldr	r3, [r3, #32]
 8008904:	1c9a      	adds	r2, r3, #2
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	621a      	str	r2, [r3, #32]
 800890a:	e008      	b.n	800891e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	1c59      	adds	r1, r3, #1
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6211      	str	r1, [r2, #32]
 8008916:	781a      	ldrb	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008922:	b29b      	uxth	r3, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	b29b      	uxth	r3, r3
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	4619      	mov	r1, r3
 800892c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10f      	bne.n	8008952 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68da      	ldr	r2, [r3, #12]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	e000      	b.n	8008958 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008956:	2302      	movs	r3, #2
  }
}
 8008958:	4618      	mov	r0, r3
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr

08008962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff febe 	bl	8008704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b086      	sub	sp, #24
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b22      	cmp	r3, #34	; 0x22
 80089a4:	f040 8099 	bne.w	8008ada <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b0:	d117      	bne.n	80089e2 <UART_Receive_IT+0x50>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d113      	bne.n	80089e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089da:	1c9a      	adds	r2, r3, #2
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	629a      	str	r2, [r3, #40]	; 0x28
 80089e0:	e026      	b.n	8008a30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80089e8:	2300      	movs	r3, #0
 80089ea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f4:	d007      	beq.n	8008a06 <UART_Receive_IT+0x74>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <UART_Receive_IT+0x82>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d106      	bne.n	8008a14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	701a      	strb	r2, [r3, #0]
 8008a12:	e008      	b.n	8008a26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d148      	bne.n	8008ad6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 0220 	bic.w	r2, r2, #32
 8008a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695a      	ldr	r2, [r3, #20]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0201 	bic.w	r2, r2, #1
 8008a72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d123      	bne.n	8008acc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68da      	ldr	r2, [r3, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f022 0210 	bic.w	r2, r2, #16
 8008a98:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b10      	cmp	r3, #16
 8008aa6:	d10a      	bne.n	8008abe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff fe2f 	bl	8008728 <HAL_UARTEx_RxEventCallback>
 8008aca:	e002      	b.n	8008ad2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7fa fa4d 	bl	8002f6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e002      	b.n	8008adc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e000      	b.n	8008adc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008ada:	2302      	movs	r3, #2
  }
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689a      	ldr	r2, [r3, #8]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008b1e:	f023 030c 	bic.w	r3, r3, #12
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	430b      	orrs	r3, r1
 8008b2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	699a      	ldr	r2, [r3, #24]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a2c      	ldr	r2, [pc, #176]	; (8008bf8 <UART_SetConfig+0x114>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d103      	bne.n	8008b54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008b4c:	f7fd ffea 	bl	8006b24 <HAL_RCC_GetPCLK2Freq>
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	e002      	b.n	8008b5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008b54:	f7fd ffd2 	bl	8006afc <HAL_RCC_GetPCLK1Freq>
 8008b58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	009a      	lsls	r2, r3, #2
 8008b64:	441a      	add	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b70:	4a22      	ldr	r2, [pc, #136]	; (8008bfc <UART_SetConfig+0x118>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	0119      	lsls	r1, r3, #4
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009a      	lsls	r2, r3, #2
 8008b84:	441a      	add	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b90:	4b1a      	ldr	r3, [pc, #104]	; (8008bfc <UART_SetConfig+0x118>)
 8008b92:	fba3 0302 	umull	r0, r3, r3, r2
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	2064      	movs	r0, #100	; 0x64
 8008b9a:	fb00 f303 	mul.w	r3, r0, r3
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	3332      	adds	r3, #50	; 0x32
 8008ba4:	4a15      	ldr	r2, [pc, #84]	; (8008bfc <UART_SetConfig+0x118>)
 8008ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8008baa:	095b      	lsrs	r3, r3, #5
 8008bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bb0:	4419      	add	r1, r3
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	009a      	lsls	r2, r3, #2
 8008bbc:	441a      	add	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bc8:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <UART_SetConfig+0x118>)
 8008bca:	fba3 0302 	umull	r0, r3, r3, r2
 8008bce:	095b      	lsrs	r3, r3, #5
 8008bd0:	2064      	movs	r0, #100	; 0x64
 8008bd2:	fb00 f303 	mul.w	r3, r0, r3
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	3332      	adds	r3, #50	; 0x32
 8008bdc:	4a07      	ldr	r2, [pc, #28]	; (8008bfc <UART_SetConfig+0x118>)
 8008bde:	fba2 2303 	umull	r2, r3, r2, r3
 8008be2:	095b      	lsrs	r3, r3, #5
 8008be4:	f003 020f 	and.w	r2, r3, #15
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	440a      	add	r2, r1
 8008bee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008bf0:	bf00      	nop
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	40013800 	.word	0x40013800
 8008bfc:	51eb851f 	.word	0x51eb851f

08008c00 <atoi>:
 8008c00:	220a      	movs	r2, #10
 8008c02:	2100      	movs	r1, #0
 8008c04:	f001 be60 	b.w	800a8c8 <strtol>

08008c08 <__errno>:
 8008c08:	4b01      	ldr	r3, [pc, #4]	; (8008c10 <__errno+0x8>)
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	20000610 	.word	0x20000610

08008c14 <__libc_init_array>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	2600      	movs	r6, #0
 8008c18:	4d0c      	ldr	r5, [pc, #48]	; (8008c4c <__libc_init_array+0x38>)
 8008c1a:	4c0d      	ldr	r4, [pc, #52]	; (8008c50 <__libc_init_array+0x3c>)
 8008c1c:	1b64      	subs	r4, r4, r5
 8008c1e:	10a4      	asrs	r4, r4, #2
 8008c20:	42a6      	cmp	r6, r4
 8008c22:	d109      	bne.n	8008c38 <__libc_init_array+0x24>
 8008c24:	f004 fda2 	bl	800d76c <_init>
 8008c28:	2600      	movs	r6, #0
 8008c2a:	4d0a      	ldr	r5, [pc, #40]	; (8008c54 <__libc_init_array+0x40>)
 8008c2c:	4c0a      	ldr	r4, [pc, #40]	; (8008c58 <__libc_init_array+0x44>)
 8008c2e:	1b64      	subs	r4, r4, r5
 8008c30:	10a4      	asrs	r4, r4, #2
 8008c32:	42a6      	cmp	r6, r4
 8008c34:	d105      	bne.n	8008c42 <__libc_init_array+0x2e>
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3c:	4798      	blx	r3
 8008c3e:	3601      	adds	r6, #1
 8008c40:	e7ee      	b.n	8008c20 <__libc_init_array+0xc>
 8008c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c46:	4798      	blx	r3
 8008c48:	3601      	adds	r6, #1
 8008c4a:	e7f2      	b.n	8008c32 <__libc_init_array+0x1e>
 8008c4c:	0800ddd0 	.word	0x0800ddd0
 8008c50:	0800ddd0 	.word	0x0800ddd0
 8008c54:	0800ddd0 	.word	0x0800ddd0
 8008c58:	0800ddd4 	.word	0x0800ddd4

08008c5c <memcpy>:
 8008c5c:	440a      	add	r2, r1
 8008c5e:	4291      	cmp	r1, r2
 8008c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c64:	d100      	bne.n	8008c68 <memcpy+0xc>
 8008c66:	4770      	bx	lr
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c6e:	4291      	cmp	r1, r2
 8008c70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c74:	d1f9      	bne.n	8008c6a <memcpy+0xe>
 8008c76:	bd10      	pop	{r4, pc}

08008c78 <memset>:
 8008c78:	4603      	mov	r3, r0
 8008c7a:	4402      	add	r2, r0
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d100      	bne.n	8008c82 <memset+0xa>
 8008c80:	4770      	bx	lr
 8008c82:	f803 1b01 	strb.w	r1, [r3], #1
 8008c86:	e7f9      	b.n	8008c7c <memset+0x4>

08008c88 <__cvt>:
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c8e:	461f      	mov	r7, r3
 8008c90:	bfbb      	ittet	lt
 8008c92:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008c96:	461f      	movlt	r7, r3
 8008c98:	2300      	movge	r3, #0
 8008c9a:	232d      	movlt	r3, #45	; 0x2d
 8008c9c:	b088      	sub	sp, #32
 8008c9e:	4614      	mov	r4, r2
 8008ca0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ca2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008ca4:	7013      	strb	r3, [r2, #0]
 8008ca6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ca8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008cac:	f023 0820 	bic.w	r8, r3, #32
 8008cb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cb4:	d005      	beq.n	8008cc2 <__cvt+0x3a>
 8008cb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008cba:	d100      	bne.n	8008cbe <__cvt+0x36>
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	e000      	b.n	8008cc4 <__cvt+0x3c>
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	aa07      	add	r2, sp, #28
 8008cc6:	9204      	str	r2, [sp, #16]
 8008cc8:	aa06      	add	r2, sp, #24
 8008cca:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008cce:	e9cd 3500 	strd	r3, r5, [sp]
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	463b      	mov	r3, r7
 8008cd6:	f001 ff6b 	bl	800abb0 <_dtoa_r>
 8008cda:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008cde:	4606      	mov	r6, r0
 8008ce0:	d102      	bne.n	8008ce8 <__cvt+0x60>
 8008ce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ce4:	07db      	lsls	r3, r3, #31
 8008ce6:	d522      	bpl.n	8008d2e <__cvt+0xa6>
 8008ce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cec:	eb06 0905 	add.w	r9, r6, r5
 8008cf0:	d110      	bne.n	8008d14 <__cvt+0x8c>
 8008cf2:	7833      	ldrb	r3, [r6, #0]
 8008cf4:	2b30      	cmp	r3, #48	; 0x30
 8008cf6:	d10a      	bne.n	8008d0e <__cvt+0x86>
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	4639      	mov	r1, r7
 8008d00:	f7f7 ff7c 	bl	8000bfc <__aeabi_dcmpeq>
 8008d04:	b918      	cbnz	r0, 8008d0e <__cvt+0x86>
 8008d06:	f1c5 0501 	rsb	r5, r5, #1
 8008d0a:	f8ca 5000 	str.w	r5, [sl]
 8008d0e:	f8da 3000 	ldr.w	r3, [sl]
 8008d12:	4499      	add	r9, r3
 8008d14:	2200      	movs	r2, #0
 8008d16:	2300      	movs	r3, #0
 8008d18:	4620      	mov	r0, r4
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	f7f7 ff6e 	bl	8000bfc <__aeabi_dcmpeq>
 8008d20:	b108      	cbz	r0, 8008d26 <__cvt+0x9e>
 8008d22:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d26:	2230      	movs	r2, #48	; 0x30
 8008d28:	9b07      	ldr	r3, [sp, #28]
 8008d2a:	454b      	cmp	r3, r9
 8008d2c:	d307      	bcc.n	8008d3e <__cvt+0xb6>
 8008d2e:	4630      	mov	r0, r6
 8008d30:	9b07      	ldr	r3, [sp, #28]
 8008d32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d34:	1b9b      	subs	r3, r3, r6
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	b008      	add	sp, #32
 8008d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d3e:	1c59      	adds	r1, r3, #1
 8008d40:	9107      	str	r1, [sp, #28]
 8008d42:	701a      	strb	r2, [r3, #0]
 8008d44:	e7f0      	b.n	8008d28 <__cvt+0xa0>

08008d46 <__exponent>:
 8008d46:	4603      	mov	r3, r0
 8008d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d4a:	2900      	cmp	r1, #0
 8008d4c:	f803 2b02 	strb.w	r2, [r3], #2
 8008d50:	bfb6      	itet	lt
 8008d52:	222d      	movlt	r2, #45	; 0x2d
 8008d54:	222b      	movge	r2, #43	; 0x2b
 8008d56:	4249      	neglt	r1, r1
 8008d58:	2909      	cmp	r1, #9
 8008d5a:	7042      	strb	r2, [r0, #1]
 8008d5c:	dd2b      	ble.n	8008db6 <__exponent+0x70>
 8008d5e:	f10d 0407 	add.w	r4, sp, #7
 8008d62:	46a4      	mov	ip, r4
 8008d64:	270a      	movs	r7, #10
 8008d66:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d6a:	460a      	mov	r2, r1
 8008d6c:	46a6      	mov	lr, r4
 8008d6e:	fb07 1516 	mls	r5, r7, r6, r1
 8008d72:	2a63      	cmp	r2, #99	; 0x63
 8008d74:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008d78:	4631      	mov	r1, r6
 8008d7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008d7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d82:	dcf0      	bgt.n	8008d66 <__exponent+0x20>
 8008d84:	3130      	adds	r1, #48	; 0x30
 8008d86:	f1ae 0502 	sub.w	r5, lr, #2
 8008d8a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d8e:	4629      	mov	r1, r5
 8008d90:	1c44      	adds	r4, r0, #1
 8008d92:	4561      	cmp	r1, ip
 8008d94:	d30a      	bcc.n	8008dac <__exponent+0x66>
 8008d96:	f10d 0209 	add.w	r2, sp, #9
 8008d9a:	eba2 020e 	sub.w	r2, r2, lr
 8008d9e:	4565      	cmp	r5, ip
 8008da0:	bf88      	it	hi
 8008da2:	2200      	movhi	r2, #0
 8008da4:	4413      	add	r3, r2
 8008da6:	1a18      	subs	r0, r3, r0
 8008da8:	b003      	add	sp, #12
 8008daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008db0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008db4:	e7ed      	b.n	8008d92 <__exponent+0x4c>
 8008db6:	2330      	movs	r3, #48	; 0x30
 8008db8:	3130      	adds	r1, #48	; 0x30
 8008dba:	7083      	strb	r3, [r0, #2]
 8008dbc:	70c1      	strb	r1, [r0, #3]
 8008dbe:	1d03      	adds	r3, r0, #4
 8008dc0:	e7f1      	b.n	8008da6 <__exponent+0x60>
	...

08008dc4 <_printf_float>:
 8008dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	b091      	sub	sp, #68	; 0x44
 8008dca:	460c      	mov	r4, r1
 8008dcc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	461f      	mov	r7, r3
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	f003 fa05 	bl	800c1e4 <_localeconv_r>
 8008dda:	6803      	ldr	r3, [r0, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	9309      	str	r3, [sp, #36]	; 0x24
 8008de0:	f7f7 fa2c 	bl	800023c <strlen>
 8008de4:	2300      	movs	r3, #0
 8008de6:	930e      	str	r3, [sp, #56]	; 0x38
 8008de8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dec:	900a      	str	r0, [sp, #40]	; 0x28
 8008dee:	3307      	adds	r3, #7
 8008df0:	f023 0307 	bic.w	r3, r3, #7
 8008df4:	f103 0208 	add.w	r2, r3, #8
 8008df8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008dfc:	f8d4 b000 	ldr.w	fp, [r4]
 8008e00:	f8c8 2000 	str.w	r2, [r8]
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e0c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008e10:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008e14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e16:	f04f 32ff 	mov.w	r2, #4294967295
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	4b9c      	ldr	r3, [pc, #624]	; (8009090 <_printf_float+0x2cc>)
 8008e1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e20:	f7f7 ff1e 	bl	8000c60 <__aeabi_dcmpun>
 8008e24:	bb70      	cbnz	r0, 8008e84 <_printf_float+0xc0>
 8008e26:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	4b98      	ldr	r3, [pc, #608]	; (8009090 <_printf_float+0x2cc>)
 8008e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e30:	f7f7 fef8 	bl	8000c24 <__aeabi_dcmple>
 8008e34:	bb30      	cbnz	r0, 8008e84 <_printf_float+0xc0>
 8008e36:	2200      	movs	r2, #0
 8008e38:	2300      	movs	r3, #0
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	4651      	mov	r1, sl
 8008e3e:	f7f7 fee7 	bl	8000c10 <__aeabi_dcmplt>
 8008e42:	b110      	cbz	r0, 8008e4a <_printf_float+0x86>
 8008e44:	232d      	movs	r3, #45	; 0x2d
 8008e46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e4a:	4b92      	ldr	r3, [pc, #584]	; (8009094 <_printf_float+0x2d0>)
 8008e4c:	4892      	ldr	r0, [pc, #584]	; (8009098 <_printf_float+0x2d4>)
 8008e4e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008e52:	bf94      	ite	ls
 8008e54:	4698      	movls	r8, r3
 8008e56:	4680      	movhi	r8, r0
 8008e58:	2303      	movs	r3, #3
 8008e5a:	f04f 0a00 	mov.w	sl, #0
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	f02b 0304 	bic.w	r3, fp, #4
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	4633      	mov	r3, r6
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	9700      	str	r7, [sp, #0]
 8008e6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008e70:	f000 f9d4 	bl	800921c <_printf_common>
 8008e74:	3001      	adds	r0, #1
 8008e76:	f040 8090 	bne.w	8008f9a <_printf_float+0x1d6>
 8008e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7e:	b011      	add	sp, #68	; 0x44
 8008e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e84:	4642      	mov	r2, r8
 8008e86:	4653      	mov	r3, sl
 8008e88:	4640      	mov	r0, r8
 8008e8a:	4651      	mov	r1, sl
 8008e8c:	f7f7 fee8 	bl	8000c60 <__aeabi_dcmpun>
 8008e90:	b148      	cbz	r0, 8008ea6 <_printf_float+0xe2>
 8008e92:	f1ba 0f00 	cmp.w	sl, #0
 8008e96:	bfb8      	it	lt
 8008e98:	232d      	movlt	r3, #45	; 0x2d
 8008e9a:	4880      	ldr	r0, [pc, #512]	; (800909c <_printf_float+0x2d8>)
 8008e9c:	bfb8      	it	lt
 8008e9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ea2:	4b7f      	ldr	r3, [pc, #508]	; (80090a0 <_printf_float+0x2dc>)
 8008ea4:	e7d3      	b.n	8008e4e <_printf_float+0x8a>
 8008ea6:	6863      	ldr	r3, [r4, #4]
 8008ea8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	d142      	bne.n	8008f36 <_printf_float+0x172>
 8008eb0:	2306      	movs	r3, #6
 8008eb2:	6063      	str	r3, [r4, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	9206      	str	r2, [sp, #24]
 8008eb8:	aa0e      	add	r2, sp, #56	; 0x38
 8008eba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008ebe:	aa0d      	add	r2, sp, #52	; 0x34
 8008ec0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008ec4:	9203      	str	r2, [sp, #12]
 8008ec6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008eca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	6863      	ldr	r3, [r4, #4]
 8008ed2:	4642      	mov	r2, r8
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	4653      	mov	r3, sl
 8008eda:	910b      	str	r1, [sp, #44]	; 0x2c
 8008edc:	f7ff fed4 	bl	8008c88 <__cvt>
 8008ee0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ee2:	4680      	mov	r8, r0
 8008ee4:	2947      	cmp	r1, #71	; 0x47
 8008ee6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ee8:	d108      	bne.n	8008efc <_printf_float+0x138>
 8008eea:	1cc8      	adds	r0, r1, #3
 8008eec:	db02      	blt.n	8008ef4 <_printf_float+0x130>
 8008eee:	6863      	ldr	r3, [r4, #4]
 8008ef0:	4299      	cmp	r1, r3
 8008ef2:	dd40      	ble.n	8008f76 <_printf_float+0x1b2>
 8008ef4:	f1a9 0902 	sub.w	r9, r9, #2
 8008ef8:	fa5f f989 	uxtb.w	r9, r9
 8008efc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008f00:	d81f      	bhi.n	8008f42 <_printf_float+0x17e>
 8008f02:	464a      	mov	r2, r9
 8008f04:	3901      	subs	r1, #1
 8008f06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f0a:	910d      	str	r1, [sp, #52]	; 0x34
 8008f0c:	f7ff ff1b 	bl	8008d46 <__exponent>
 8008f10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f12:	4682      	mov	sl, r0
 8008f14:	1813      	adds	r3, r2, r0
 8008f16:	2a01      	cmp	r2, #1
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	dc02      	bgt.n	8008f22 <_printf_float+0x15e>
 8008f1c:	6822      	ldr	r2, [r4, #0]
 8008f1e:	07d2      	lsls	r2, r2, #31
 8008f20:	d501      	bpl.n	8008f26 <_printf_float+0x162>
 8008f22:	3301      	adds	r3, #1
 8008f24:	6123      	str	r3, [r4, #16]
 8008f26:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d09b      	beq.n	8008e66 <_printf_float+0xa2>
 8008f2e:	232d      	movs	r3, #45	; 0x2d
 8008f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f34:	e797      	b.n	8008e66 <_printf_float+0xa2>
 8008f36:	2947      	cmp	r1, #71	; 0x47
 8008f38:	d1bc      	bne.n	8008eb4 <_printf_float+0xf0>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1ba      	bne.n	8008eb4 <_printf_float+0xf0>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e7b7      	b.n	8008eb2 <_printf_float+0xee>
 8008f42:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008f46:	d118      	bne.n	8008f7a <_printf_float+0x1b6>
 8008f48:	2900      	cmp	r1, #0
 8008f4a:	6863      	ldr	r3, [r4, #4]
 8008f4c:	dd0b      	ble.n	8008f66 <_printf_float+0x1a2>
 8008f4e:	6121      	str	r1, [r4, #16]
 8008f50:	b913      	cbnz	r3, 8008f58 <_printf_float+0x194>
 8008f52:	6822      	ldr	r2, [r4, #0]
 8008f54:	07d0      	lsls	r0, r2, #31
 8008f56:	d502      	bpl.n	8008f5e <_printf_float+0x19a>
 8008f58:	3301      	adds	r3, #1
 8008f5a:	440b      	add	r3, r1
 8008f5c:	6123      	str	r3, [r4, #16]
 8008f5e:	f04f 0a00 	mov.w	sl, #0
 8008f62:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f64:	e7df      	b.n	8008f26 <_printf_float+0x162>
 8008f66:	b913      	cbnz	r3, 8008f6e <_printf_float+0x1aa>
 8008f68:	6822      	ldr	r2, [r4, #0]
 8008f6a:	07d2      	lsls	r2, r2, #31
 8008f6c:	d501      	bpl.n	8008f72 <_printf_float+0x1ae>
 8008f6e:	3302      	adds	r3, #2
 8008f70:	e7f4      	b.n	8008f5c <_printf_float+0x198>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e7f2      	b.n	8008f5c <_printf_float+0x198>
 8008f76:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f7c:	4299      	cmp	r1, r3
 8008f7e:	db05      	blt.n	8008f8c <_printf_float+0x1c8>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	6121      	str	r1, [r4, #16]
 8008f84:	07d8      	lsls	r0, r3, #31
 8008f86:	d5ea      	bpl.n	8008f5e <_printf_float+0x19a>
 8008f88:	1c4b      	adds	r3, r1, #1
 8008f8a:	e7e7      	b.n	8008f5c <_printf_float+0x198>
 8008f8c:	2900      	cmp	r1, #0
 8008f8e:	bfcc      	ite	gt
 8008f90:	2201      	movgt	r2, #1
 8008f92:	f1c1 0202 	rsble	r2, r1, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	e7e0      	b.n	8008f5c <_printf_float+0x198>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	055a      	lsls	r2, r3, #21
 8008f9e:	d407      	bmi.n	8008fb0 <_printf_float+0x1ec>
 8008fa0:	6923      	ldr	r3, [r4, #16]
 8008fa2:	4642      	mov	r2, r8
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b8      	blx	r7
 8008faa:	3001      	adds	r0, #1
 8008fac:	d12b      	bne.n	8009006 <_printf_float+0x242>
 8008fae:	e764      	b.n	8008e7a <_printf_float+0xb6>
 8008fb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fb4:	f240 80dd 	bls.w	8009172 <_printf_float+0x3ae>
 8008fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f7f7 fe1c 	bl	8000bfc <__aeabi_dcmpeq>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d033      	beq.n	8009030 <_printf_float+0x26c>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4628      	mov	r0, r5
 8008fce:	4a35      	ldr	r2, [pc, #212]	; (80090a4 <_printf_float+0x2e0>)
 8008fd0:	47b8      	blx	r7
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	f43f af51 	beq.w	8008e7a <_printf_float+0xb6>
 8008fd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	db02      	blt.n	8008fe6 <_printf_float+0x222>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	07d8      	lsls	r0, r3, #31
 8008fe4:	d50f      	bpl.n	8009006 <_printf_float+0x242>
 8008fe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fea:	4631      	mov	r1, r6
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b8      	blx	r7
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	f43f af42 	beq.w	8008e7a <_printf_float+0xb6>
 8008ff6:	f04f 0800 	mov.w	r8, #0
 8008ffa:	f104 091a 	add.w	r9, r4, #26
 8008ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009000:	3b01      	subs	r3, #1
 8009002:	4543      	cmp	r3, r8
 8009004:	dc09      	bgt.n	800901a <_printf_float+0x256>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	079b      	lsls	r3, r3, #30
 800900a:	f100 8102 	bmi.w	8009212 <_printf_float+0x44e>
 800900e:	68e0      	ldr	r0, [r4, #12]
 8009010:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009012:	4298      	cmp	r0, r3
 8009014:	bfb8      	it	lt
 8009016:	4618      	movlt	r0, r3
 8009018:	e731      	b.n	8008e7e <_printf_float+0xba>
 800901a:	2301      	movs	r3, #1
 800901c:	464a      	mov	r2, r9
 800901e:	4631      	mov	r1, r6
 8009020:	4628      	mov	r0, r5
 8009022:	47b8      	blx	r7
 8009024:	3001      	adds	r0, #1
 8009026:	f43f af28 	beq.w	8008e7a <_printf_float+0xb6>
 800902a:	f108 0801 	add.w	r8, r8, #1
 800902e:	e7e6      	b.n	8008ffe <_printf_float+0x23a>
 8009030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009032:	2b00      	cmp	r3, #0
 8009034:	dc38      	bgt.n	80090a8 <_printf_float+0x2e4>
 8009036:	2301      	movs	r3, #1
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	4a19      	ldr	r2, [pc, #100]	; (80090a4 <_printf_float+0x2e0>)
 800903e:	47b8      	blx	r7
 8009040:	3001      	adds	r0, #1
 8009042:	f43f af1a 	beq.w	8008e7a <_printf_float+0xb6>
 8009046:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800904a:	4313      	orrs	r3, r2
 800904c:	d102      	bne.n	8009054 <_printf_float+0x290>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	07d9      	lsls	r1, r3, #31
 8009052:	d5d8      	bpl.n	8009006 <_printf_float+0x242>
 8009054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	f43f af0b 	beq.w	8008e7a <_printf_float+0xb6>
 8009064:	f04f 0900 	mov.w	r9, #0
 8009068:	f104 0a1a 	add.w	sl, r4, #26
 800906c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800906e:	425b      	negs	r3, r3
 8009070:	454b      	cmp	r3, r9
 8009072:	dc01      	bgt.n	8009078 <_printf_float+0x2b4>
 8009074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009076:	e794      	b.n	8008fa2 <_printf_float+0x1de>
 8009078:	2301      	movs	r3, #1
 800907a:	4652      	mov	r2, sl
 800907c:	4631      	mov	r1, r6
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	f43f aef9 	beq.w	8008e7a <_printf_float+0xb6>
 8009088:	f109 0901 	add.w	r9, r9, #1
 800908c:	e7ee      	b.n	800906c <_printf_float+0x2a8>
 800908e:	bf00      	nop
 8009090:	7fefffff 	.word	0x7fefffff
 8009094:	0800d8c8 	.word	0x0800d8c8
 8009098:	0800d8cc 	.word	0x0800d8cc
 800909c:	0800d8d4 	.word	0x0800d8d4
 80090a0:	0800d8d0 	.word	0x0800d8d0
 80090a4:	0800d8d8 	.word	0x0800d8d8
 80090a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090ac:	429a      	cmp	r2, r3
 80090ae:	bfa8      	it	ge
 80090b0:	461a      	movge	r2, r3
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	4691      	mov	r9, r2
 80090b6:	dc37      	bgt.n	8009128 <_printf_float+0x364>
 80090b8:	f04f 0b00 	mov.w	fp, #0
 80090bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090c0:	f104 021a 	add.w	r2, r4, #26
 80090c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80090c8:	ebaa 0309 	sub.w	r3, sl, r9
 80090cc:	455b      	cmp	r3, fp
 80090ce:	dc33      	bgt.n	8009138 <_printf_float+0x374>
 80090d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090d4:	429a      	cmp	r2, r3
 80090d6:	db3b      	blt.n	8009150 <_printf_float+0x38c>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	07da      	lsls	r2, r3, #31
 80090dc:	d438      	bmi.n	8009150 <_printf_float+0x38c>
 80090de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090e2:	eba3 020a 	sub.w	r2, r3, sl
 80090e6:	eba3 0901 	sub.w	r9, r3, r1
 80090ea:	4591      	cmp	r9, r2
 80090ec:	bfa8      	it	ge
 80090ee:	4691      	movge	r9, r2
 80090f0:	f1b9 0f00 	cmp.w	r9, #0
 80090f4:	dc34      	bgt.n	8009160 <_printf_float+0x39c>
 80090f6:	f04f 0800 	mov.w	r8, #0
 80090fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090fe:	f104 0a1a 	add.w	sl, r4, #26
 8009102:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009106:	1a9b      	subs	r3, r3, r2
 8009108:	eba3 0309 	sub.w	r3, r3, r9
 800910c:	4543      	cmp	r3, r8
 800910e:	f77f af7a 	ble.w	8009006 <_printf_float+0x242>
 8009112:	2301      	movs	r3, #1
 8009114:	4652      	mov	r2, sl
 8009116:	4631      	mov	r1, r6
 8009118:	4628      	mov	r0, r5
 800911a:	47b8      	blx	r7
 800911c:	3001      	adds	r0, #1
 800911e:	f43f aeac 	beq.w	8008e7a <_printf_float+0xb6>
 8009122:	f108 0801 	add.w	r8, r8, #1
 8009126:	e7ec      	b.n	8009102 <_printf_float+0x33e>
 8009128:	4613      	mov	r3, r2
 800912a:	4631      	mov	r1, r6
 800912c:	4642      	mov	r2, r8
 800912e:	4628      	mov	r0, r5
 8009130:	47b8      	blx	r7
 8009132:	3001      	adds	r0, #1
 8009134:	d1c0      	bne.n	80090b8 <_printf_float+0x2f4>
 8009136:	e6a0      	b.n	8008e7a <_printf_float+0xb6>
 8009138:	2301      	movs	r3, #1
 800913a:	4631      	mov	r1, r6
 800913c:	4628      	mov	r0, r5
 800913e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009140:	47b8      	blx	r7
 8009142:	3001      	adds	r0, #1
 8009144:	f43f ae99 	beq.w	8008e7a <_printf_float+0xb6>
 8009148:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800914a:	f10b 0b01 	add.w	fp, fp, #1
 800914e:	e7b9      	b.n	80090c4 <_printf_float+0x300>
 8009150:	4631      	mov	r1, r6
 8009152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009156:	4628      	mov	r0, r5
 8009158:	47b8      	blx	r7
 800915a:	3001      	adds	r0, #1
 800915c:	d1bf      	bne.n	80090de <_printf_float+0x31a>
 800915e:	e68c      	b.n	8008e7a <_printf_float+0xb6>
 8009160:	464b      	mov	r3, r9
 8009162:	4631      	mov	r1, r6
 8009164:	4628      	mov	r0, r5
 8009166:	eb08 020a 	add.w	r2, r8, sl
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	d1c2      	bne.n	80090f6 <_printf_float+0x332>
 8009170:	e683      	b.n	8008e7a <_printf_float+0xb6>
 8009172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009174:	2a01      	cmp	r2, #1
 8009176:	dc01      	bgt.n	800917c <_printf_float+0x3b8>
 8009178:	07db      	lsls	r3, r3, #31
 800917a:	d537      	bpl.n	80091ec <_printf_float+0x428>
 800917c:	2301      	movs	r3, #1
 800917e:	4642      	mov	r2, r8
 8009180:	4631      	mov	r1, r6
 8009182:	4628      	mov	r0, r5
 8009184:	47b8      	blx	r7
 8009186:	3001      	adds	r0, #1
 8009188:	f43f ae77 	beq.w	8008e7a <_printf_float+0xb6>
 800918c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009190:	4631      	mov	r1, r6
 8009192:	4628      	mov	r0, r5
 8009194:	47b8      	blx	r7
 8009196:	3001      	adds	r0, #1
 8009198:	f43f ae6f 	beq.w	8008e7a <_printf_float+0xb6>
 800919c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091a0:	2200      	movs	r2, #0
 80091a2:	2300      	movs	r3, #0
 80091a4:	f7f7 fd2a 	bl	8000bfc <__aeabi_dcmpeq>
 80091a8:	b9d8      	cbnz	r0, 80091e2 <_printf_float+0x41e>
 80091aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091ac:	f108 0201 	add.w	r2, r8, #1
 80091b0:	3b01      	subs	r3, #1
 80091b2:	4631      	mov	r1, r6
 80091b4:	4628      	mov	r0, r5
 80091b6:	47b8      	blx	r7
 80091b8:	3001      	adds	r0, #1
 80091ba:	d10e      	bne.n	80091da <_printf_float+0x416>
 80091bc:	e65d      	b.n	8008e7a <_printf_float+0xb6>
 80091be:	2301      	movs	r3, #1
 80091c0:	464a      	mov	r2, r9
 80091c2:	4631      	mov	r1, r6
 80091c4:	4628      	mov	r0, r5
 80091c6:	47b8      	blx	r7
 80091c8:	3001      	adds	r0, #1
 80091ca:	f43f ae56 	beq.w	8008e7a <_printf_float+0xb6>
 80091ce:	f108 0801 	add.w	r8, r8, #1
 80091d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091d4:	3b01      	subs	r3, #1
 80091d6:	4543      	cmp	r3, r8
 80091d8:	dcf1      	bgt.n	80091be <_printf_float+0x3fa>
 80091da:	4653      	mov	r3, sl
 80091dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091e0:	e6e0      	b.n	8008fa4 <_printf_float+0x1e0>
 80091e2:	f04f 0800 	mov.w	r8, #0
 80091e6:	f104 091a 	add.w	r9, r4, #26
 80091ea:	e7f2      	b.n	80091d2 <_printf_float+0x40e>
 80091ec:	2301      	movs	r3, #1
 80091ee:	4642      	mov	r2, r8
 80091f0:	e7df      	b.n	80091b2 <_printf_float+0x3ee>
 80091f2:	2301      	movs	r3, #1
 80091f4:	464a      	mov	r2, r9
 80091f6:	4631      	mov	r1, r6
 80091f8:	4628      	mov	r0, r5
 80091fa:	47b8      	blx	r7
 80091fc:	3001      	adds	r0, #1
 80091fe:	f43f ae3c 	beq.w	8008e7a <_printf_float+0xb6>
 8009202:	f108 0801 	add.w	r8, r8, #1
 8009206:	68e3      	ldr	r3, [r4, #12]
 8009208:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800920a:	1a5b      	subs	r3, r3, r1
 800920c:	4543      	cmp	r3, r8
 800920e:	dcf0      	bgt.n	80091f2 <_printf_float+0x42e>
 8009210:	e6fd      	b.n	800900e <_printf_float+0x24a>
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	f104 0919 	add.w	r9, r4, #25
 800921a:	e7f4      	b.n	8009206 <_printf_float+0x442>

0800921c <_printf_common>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	4616      	mov	r6, r2
 8009222:	4699      	mov	r9, r3
 8009224:	688a      	ldr	r2, [r1, #8]
 8009226:	690b      	ldr	r3, [r1, #16]
 8009228:	4607      	mov	r7, r0
 800922a:	4293      	cmp	r3, r2
 800922c:	bfb8      	it	lt
 800922e:	4613      	movlt	r3, r2
 8009230:	6033      	str	r3, [r6, #0]
 8009232:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009236:	460c      	mov	r4, r1
 8009238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800923c:	b10a      	cbz	r2, 8009242 <_printf_common+0x26>
 800923e:	3301      	adds	r3, #1
 8009240:	6033      	str	r3, [r6, #0]
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	0699      	lsls	r1, r3, #26
 8009246:	bf42      	ittt	mi
 8009248:	6833      	ldrmi	r3, [r6, #0]
 800924a:	3302      	addmi	r3, #2
 800924c:	6033      	strmi	r3, [r6, #0]
 800924e:	6825      	ldr	r5, [r4, #0]
 8009250:	f015 0506 	ands.w	r5, r5, #6
 8009254:	d106      	bne.n	8009264 <_printf_common+0x48>
 8009256:	f104 0a19 	add.w	sl, r4, #25
 800925a:	68e3      	ldr	r3, [r4, #12]
 800925c:	6832      	ldr	r2, [r6, #0]
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	42ab      	cmp	r3, r5
 8009262:	dc28      	bgt.n	80092b6 <_printf_common+0x9a>
 8009264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009268:	1e13      	subs	r3, r2, #0
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	bf18      	it	ne
 800926e:	2301      	movne	r3, #1
 8009270:	0692      	lsls	r2, r2, #26
 8009272:	d42d      	bmi.n	80092d0 <_printf_common+0xb4>
 8009274:	4649      	mov	r1, r9
 8009276:	4638      	mov	r0, r7
 8009278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800927c:	47c0      	blx	r8
 800927e:	3001      	adds	r0, #1
 8009280:	d020      	beq.n	80092c4 <_printf_common+0xa8>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	68e5      	ldr	r5, [r4, #12]
 8009286:	f003 0306 	and.w	r3, r3, #6
 800928a:	2b04      	cmp	r3, #4
 800928c:	bf18      	it	ne
 800928e:	2500      	movne	r5, #0
 8009290:	6832      	ldr	r2, [r6, #0]
 8009292:	f04f 0600 	mov.w	r6, #0
 8009296:	68a3      	ldr	r3, [r4, #8]
 8009298:	bf08      	it	eq
 800929a:	1aad      	subeq	r5, r5, r2
 800929c:	6922      	ldr	r2, [r4, #16]
 800929e:	bf08      	it	eq
 80092a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092a4:	4293      	cmp	r3, r2
 80092a6:	bfc4      	itt	gt
 80092a8:	1a9b      	subgt	r3, r3, r2
 80092aa:	18ed      	addgt	r5, r5, r3
 80092ac:	341a      	adds	r4, #26
 80092ae:	42b5      	cmp	r5, r6
 80092b0:	d11a      	bne.n	80092e8 <_printf_common+0xcc>
 80092b2:	2000      	movs	r0, #0
 80092b4:	e008      	b.n	80092c8 <_printf_common+0xac>
 80092b6:	2301      	movs	r3, #1
 80092b8:	4652      	mov	r2, sl
 80092ba:	4649      	mov	r1, r9
 80092bc:	4638      	mov	r0, r7
 80092be:	47c0      	blx	r8
 80092c0:	3001      	adds	r0, #1
 80092c2:	d103      	bne.n	80092cc <_printf_common+0xb0>
 80092c4:	f04f 30ff 	mov.w	r0, #4294967295
 80092c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092cc:	3501      	adds	r5, #1
 80092ce:	e7c4      	b.n	800925a <_printf_common+0x3e>
 80092d0:	2030      	movs	r0, #48	; 0x30
 80092d2:	18e1      	adds	r1, r4, r3
 80092d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092de:	4422      	add	r2, r4
 80092e0:	3302      	adds	r3, #2
 80092e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092e6:	e7c5      	b.n	8009274 <_printf_common+0x58>
 80092e8:	2301      	movs	r3, #1
 80092ea:	4622      	mov	r2, r4
 80092ec:	4649      	mov	r1, r9
 80092ee:	4638      	mov	r0, r7
 80092f0:	47c0      	blx	r8
 80092f2:	3001      	adds	r0, #1
 80092f4:	d0e6      	beq.n	80092c4 <_printf_common+0xa8>
 80092f6:	3601      	adds	r6, #1
 80092f8:	e7d9      	b.n	80092ae <_printf_common+0x92>
	...

080092fc <_printf_i>:
 80092fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009300:	7e0f      	ldrb	r7, [r1, #24]
 8009302:	4691      	mov	r9, r2
 8009304:	2f78      	cmp	r7, #120	; 0x78
 8009306:	4680      	mov	r8, r0
 8009308:	460c      	mov	r4, r1
 800930a:	469a      	mov	sl, r3
 800930c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800930e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009312:	d807      	bhi.n	8009324 <_printf_i+0x28>
 8009314:	2f62      	cmp	r7, #98	; 0x62
 8009316:	d80a      	bhi.n	800932e <_printf_i+0x32>
 8009318:	2f00      	cmp	r7, #0
 800931a:	f000 80d9 	beq.w	80094d0 <_printf_i+0x1d4>
 800931e:	2f58      	cmp	r7, #88	; 0x58
 8009320:	f000 80a4 	beq.w	800946c <_printf_i+0x170>
 8009324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800932c:	e03a      	b.n	80093a4 <_printf_i+0xa8>
 800932e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009332:	2b15      	cmp	r3, #21
 8009334:	d8f6      	bhi.n	8009324 <_printf_i+0x28>
 8009336:	a101      	add	r1, pc, #4	; (adr r1, 800933c <_printf_i+0x40>)
 8009338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800933c:	08009395 	.word	0x08009395
 8009340:	080093a9 	.word	0x080093a9
 8009344:	08009325 	.word	0x08009325
 8009348:	08009325 	.word	0x08009325
 800934c:	08009325 	.word	0x08009325
 8009350:	08009325 	.word	0x08009325
 8009354:	080093a9 	.word	0x080093a9
 8009358:	08009325 	.word	0x08009325
 800935c:	08009325 	.word	0x08009325
 8009360:	08009325 	.word	0x08009325
 8009364:	08009325 	.word	0x08009325
 8009368:	080094b7 	.word	0x080094b7
 800936c:	080093d9 	.word	0x080093d9
 8009370:	08009499 	.word	0x08009499
 8009374:	08009325 	.word	0x08009325
 8009378:	08009325 	.word	0x08009325
 800937c:	080094d9 	.word	0x080094d9
 8009380:	08009325 	.word	0x08009325
 8009384:	080093d9 	.word	0x080093d9
 8009388:	08009325 	.word	0x08009325
 800938c:	08009325 	.word	0x08009325
 8009390:	080094a1 	.word	0x080094a1
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	1d1a      	adds	r2, r3, #4
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	602a      	str	r2, [r5, #0]
 800939c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093a4:	2301      	movs	r3, #1
 80093a6:	e0a4      	b.n	80094f2 <_printf_i+0x1f6>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	6829      	ldr	r1, [r5, #0]
 80093ac:	0606      	lsls	r6, r0, #24
 80093ae:	f101 0304 	add.w	r3, r1, #4
 80093b2:	d50a      	bpl.n	80093ca <_printf_i+0xce>
 80093b4:	680e      	ldr	r6, [r1, #0]
 80093b6:	602b      	str	r3, [r5, #0]
 80093b8:	2e00      	cmp	r6, #0
 80093ba:	da03      	bge.n	80093c4 <_printf_i+0xc8>
 80093bc:	232d      	movs	r3, #45	; 0x2d
 80093be:	4276      	negs	r6, r6
 80093c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093c4:	230a      	movs	r3, #10
 80093c6:	485e      	ldr	r0, [pc, #376]	; (8009540 <_printf_i+0x244>)
 80093c8:	e019      	b.n	80093fe <_printf_i+0x102>
 80093ca:	680e      	ldr	r6, [r1, #0]
 80093cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	bf18      	it	ne
 80093d4:	b236      	sxthne	r6, r6
 80093d6:	e7ef      	b.n	80093b8 <_printf_i+0xbc>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	6820      	ldr	r0, [r4, #0]
 80093dc:	1d19      	adds	r1, r3, #4
 80093de:	6029      	str	r1, [r5, #0]
 80093e0:	0601      	lsls	r1, r0, #24
 80093e2:	d501      	bpl.n	80093e8 <_printf_i+0xec>
 80093e4:	681e      	ldr	r6, [r3, #0]
 80093e6:	e002      	b.n	80093ee <_printf_i+0xf2>
 80093e8:	0646      	lsls	r6, r0, #25
 80093ea:	d5fb      	bpl.n	80093e4 <_printf_i+0xe8>
 80093ec:	881e      	ldrh	r6, [r3, #0]
 80093ee:	2f6f      	cmp	r7, #111	; 0x6f
 80093f0:	bf0c      	ite	eq
 80093f2:	2308      	moveq	r3, #8
 80093f4:	230a      	movne	r3, #10
 80093f6:	4852      	ldr	r0, [pc, #328]	; (8009540 <_printf_i+0x244>)
 80093f8:	2100      	movs	r1, #0
 80093fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093fe:	6865      	ldr	r5, [r4, #4]
 8009400:	2d00      	cmp	r5, #0
 8009402:	bfa8      	it	ge
 8009404:	6821      	ldrge	r1, [r4, #0]
 8009406:	60a5      	str	r5, [r4, #8]
 8009408:	bfa4      	itt	ge
 800940a:	f021 0104 	bicge.w	r1, r1, #4
 800940e:	6021      	strge	r1, [r4, #0]
 8009410:	b90e      	cbnz	r6, 8009416 <_printf_i+0x11a>
 8009412:	2d00      	cmp	r5, #0
 8009414:	d04d      	beq.n	80094b2 <_printf_i+0x1b6>
 8009416:	4615      	mov	r5, r2
 8009418:	fbb6 f1f3 	udiv	r1, r6, r3
 800941c:	fb03 6711 	mls	r7, r3, r1, r6
 8009420:	5dc7      	ldrb	r7, [r0, r7]
 8009422:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009426:	4637      	mov	r7, r6
 8009428:	42bb      	cmp	r3, r7
 800942a:	460e      	mov	r6, r1
 800942c:	d9f4      	bls.n	8009418 <_printf_i+0x11c>
 800942e:	2b08      	cmp	r3, #8
 8009430:	d10b      	bne.n	800944a <_printf_i+0x14e>
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	07de      	lsls	r6, r3, #31
 8009436:	d508      	bpl.n	800944a <_printf_i+0x14e>
 8009438:	6923      	ldr	r3, [r4, #16]
 800943a:	6861      	ldr	r1, [r4, #4]
 800943c:	4299      	cmp	r1, r3
 800943e:	bfde      	ittt	le
 8009440:	2330      	movle	r3, #48	; 0x30
 8009442:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009446:	f105 35ff 	addle.w	r5, r5, #4294967295
 800944a:	1b52      	subs	r2, r2, r5
 800944c:	6122      	str	r2, [r4, #16]
 800944e:	464b      	mov	r3, r9
 8009450:	4621      	mov	r1, r4
 8009452:	4640      	mov	r0, r8
 8009454:	f8cd a000 	str.w	sl, [sp]
 8009458:	aa03      	add	r2, sp, #12
 800945a:	f7ff fedf 	bl	800921c <_printf_common>
 800945e:	3001      	adds	r0, #1
 8009460:	d14c      	bne.n	80094fc <_printf_i+0x200>
 8009462:	f04f 30ff 	mov.w	r0, #4294967295
 8009466:	b004      	add	sp, #16
 8009468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800946c:	4834      	ldr	r0, [pc, #208]	; (8009540 <_printf_i+0x244>)
 800946e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009472:	6829      	ldr	r1, [r5, #0]
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	f851 6b04 	ldr.w	r6, [r1], #4
 800947a:	6029      	str	r1, [r5, #0]
 800947c:	061d      	lsls	r5, r3, #24
 800947e:	d514      	bpl.n	80094aa <_printf_i+0x1ae>
 8009480:	07df      	lsls	r7, r3, #31
 8009482:	bf44      	itt	mi
 8009484:	f043 0320 	orrmi.w	r3, r3, #32
 8009488:	6023      	strmi	r3, [r4, #0]
 800948a:	b91e      	cbnz	r6, 8009494 <_printf_i+0x198>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	f023 0320 	bic.w	r3, r3, #32
 8009492:	6023      	str	r3, [r4, #0]
 8009494:	2310      	movs	r3, #16
 8009496:	e7af      	b.n	80093f8 <_printf_i+0xfc>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	f043 0320 	orr.w	r3, r3, #32
 800949e:	6023      	str	r3, [r4, #0]
 80094a0:	2378      	movs	r3, #120	; 0x78
 80094a2:	4828      	ldr	r0, [pc, #160]	; (8009544 <_printf_i+0x248>)
 80094a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094a8:	e7e3      	b.n	8009472 <_printf_i+0x176>
 80094aa:	0659      	lsls	r1, r3, #25
 80094ac:	bf48      	it	mi
 80094ae:	b2b6      	uxthmi	r6, r6
 80094b0:	e7e6      	b.n	8009480 <_printf_i+0x184>
 80094b2:	4615      	mov	r5, r2
 80094b4:	e7bb      	b.n	800942e <_printf_i+0x132>
 80094b6:	682b      	ldr	r3, [r5, #0]
 80094b8:	6826      	ldr	r6, [r4, #0]
 80094ba:	1d18      	adds	r0, r3, #4
 80094bc:	6961      	ldr	r1, [r4, #20]
 80094be:	6028      	str	r0, [r5, #0]
 80094c0:	0635      	lsls	r5, r6, #24
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	d501      	bpl.n	80094ca <_printf_i+0x1ce>
 80094c6:	6019      	str	r1, [r3, #0]
 80094c8:	e002      	b.n	80094d0 <_printf_i+0x1d4>
 80094ca:	0670      	lsls	r0, r6, #25
 80094cc:	d5fb      	bpl.n	80094c6 <_printf_i+0x1ca>
 80094ce:	8019      	strh	r1, [r3, #0]
 80094d0:	2300      	movs	r3, #0
 80094d2:	4615      	mov	r5, r2
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	e7ba      	b.n	800944e <_printf_i+0x152>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	2100      	movs	r1, #0
 80094dc:	1d1a      	adds	r2, r3, #4
 80094de:	602a      	str	r2, [r5, #0]
 80094e0:	681d      	ldr	r5, [r3, #0]
 80094e2:	6862      	ldr	r2, [r4, #4]
 80094e4:	4628      	mov	r0, r5
 80094e6:	f002 ff03 	bl	800c2f0 <memchr>
 80094ea:	b108      	cbz	r0, 80094f0 <_printf_i+0x1f4>
 80094ec:	1b40      	subs	r0, r0, r5
 80094ee:	6060      	str	r0, [r4, #4]
 80094f0:	6863      	ldr	r3, [r4, #4]
 80094f2:	6123      	str	r3, [r4, #16]
 80094f4:	2300      	movs	r3, #0
 80094f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094fa:	e7a8      	b.n	800944e <_printf_i+0x152>
 80094fc:	462a      	mov	r2, r5
 80094fe:	4649      	mov	r1, r9
 8009500:	4640      	mov	r0, r8
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	47d0      	blx	sl
 8009506:	3001      	adds	r0, #1
 8009508:	d0ab      	beq.n	8009462 <_printf_i+0x166>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	079b      	lsls	r3, r3, #30
 800950e:	d413      	bmi.n	8009538 <_printf_i+0x23c>
 8009510:	68e0      	ldr	r0, [r4, #12]
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	4298      	cmp	r0, r3
 8009516:	bfb8      	it	lt
 8009518:	4618      	movlt	r0, r3
 800951a:	e7a4      	b.n	8009466 <_printf_i+0x16a>
 800951c:	2301      	movs	r3, #1
 800951e:	4632      	mov	r2, r6
 8009520:	4649      	mov	r1, r9
 8009522:	4640      	mov	r0, r8
 8009524:	47d0      	blx	sl
 8009526:	3001      	adds	r0, #1
 8009528:	d09b      	beq.n	8009462 <_printf_i+0x166>
 800952a:	3501      	adds	r5, #1
 800952c:	68e3      	ldr	r3, [r4, #12]
 800952e:	9903      	ldr	r1, [sp, #12]
 8009530:	1a5b      	subs	r3, r3, r1
 8009532:	42ab      	cmp	r3, r5
 8009534:	dcf2      	bgt.n	800951c <_printf_i+0x220>
 8009536:	e7eb      	b.n	8009510 <_printf_i+0x214>
 8009538:	2500      	movs	r5, #0
 800953a:	f104 0619 	add.w	r6, r4, #25
 800953e:	e7f5      	b.n	800952c <_printf_i+0x230>
 8009540:	0800d8da 	.word	0x0800d8da
 8009544:	0800d8eb 	.word	0x0800d8eb

08009548 <_scanf_float>:
 8009548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	b087      	sub	sp, #28
 800954e:	9303      	str	r3, [sp, #12]
 8009550:	688b      	ldr	r3, [r1, #8]
 8009552:	4617      	mov	r7, r2
 8009554:	1e5a      	subs	r2, r3, #1
 8009556:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800955a:	bf85      	ittet	hi
 800955c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009560:	195b      	addhi	r3, r3, r5
 8009562:	2300      	movls	r3, #0
 8009564:	9302      	strhi	r3, [sp, #8]
 8009566:	bf88      	it	hi
 8009568:	f240 135d 	movwhi	r3, #349	; 0x15d
 800956c:	468b      	mov	fp, r1
 800956e:	f04f 0500 	mov.w	r5, #0
 8009572:	bf8c      	ite	hi
 8009574:	608b      	strhi	r3, [r1, #8]
 8009576:	9302      	strls	r3, [sp, #8]
 8009578:	680b      	ldr	r3, [r1, #0]
 800957a:	4680      	mov	r8, r0
 800957c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009580:	f84b 3b1c 	str.w	r3, [fp], #28
 8009584:	460c      	mov	r4, r1
 8009586:	465e      	mov	r6, fp
 8009588:	46aa      	mov	sl, r5
 800958a:	46a9      	mov	r9, r5
 800958c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009590:	9501      	str	r5, [sp, #4]
 8009592:	68a2      	ldr	r2, [r4, #8]
 8009594:	b152      	cbz	r2, 80095ac <_scanf_float+0x64>
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b4e      	cmp	r3, #78	; 0x4e
 800959c:	d864      	bhi.n	8009668 <_scanf_float+0x120>
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	d83c      	bhi.n	800961c <_scanf_float+0xd4>
 80095a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80095a6:	b2c8      	uxtb	r0, r1
 80095a8:	280e      	cmp	r0, #14
 80095aa:	d93a      	bls.n	8009622 <_scanf_float+0xda>
 80095ac:	f1b9 0f00 	cmp.w	r9, #0
 80095b0:	d003      	beq.n	80095ba <_scanf_float+0x72>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095be:	f1ba 0f01 	cmp.w	sl, #1
 80095c2:	f200 8113 	bhi.w	80097ec <_scanf_float+0x2a4>
 80095c6:	455e      	cmp	r6, fp
 80095c8:	f200 8105 	bhi.w	80097d6 <_scanf_float+0x28e>
 80095cc:	2501      	movs	r5, #1
 80095ce:	4628      	mov	r0, r5
 80095d0:	b007      	add	sp, #28
 80095d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80095da:	2a0d      	cmp	r2, #13
 80095dc:	d8e6      	bhi.n	80095ac <_scanf_float+0x64>
 80095de:	a101      	add	r1, pc, #4	; (adr r1, 80095e4 <_scanf_float+0x9c>)
 80095e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80095e4:	08009723 	.word	0x08009723
 80095e8:	080095ad 	.word	0x080095ad
 80095ec:	080095ad 	.word	0x080095ad
 80095f0:	080095ad 	.word	0x080095ad
 80095f4:	08009783 	.word	0x08009783
 80095f8:	0800975b 	.word	0x0800975b
 80095fc:	080095ad 	.word	0x080095ad
 8009600:	080095ad 	.word	0x080095ad
 8009604:	08009731 	.word	0x08009731
 8009608:	080095ad 	.word	0x080095ad
 800960c:	080095ad 	.word	0x080095ad
 8009610:	080095ad 	.word	0x080095ad
 8009614:	080095ad 	.word	0x080095ad
 8009618:	080096e9 	.word	0x080096e9
 800961c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009620:	e7db      	b.n	80095da <_scanf_float+0x92>
 8009622:	290e      	cmp	r1, #14
 8009624:	d8c2      	bhi.n	80095ac <_scanf_float+0x64>
 8009626:	a001      	add	r0, pc, #4	; (adr r0, 800962c <_scanf_float+0xe4>)
 8009628:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800962c:	080096db 	.word	0x080096db
 8009630:	080095ad 	.word	0x080095ad
 8009634:	080096db 	.word	0x080096db
 8009638:	0800976f 	.word	0x0800976f
 800963c:	080095ad 	.word	0x080095ad
 8009640:	08009689 	.word	0x08009689
 8009644:	080096c5 	.word	0x080096c5
 8009648:	080096c5 	.word	0x080096c5
 800964c:	080096c5 	.word	0x080096c5
 8009650:	080096c5 	.word	0x080096c5
 8009654:	080096c5 	.word	0x080096c5
 8009658:	080096c5 	.word	0x080096c5
 800965c:	080096c5 	.word	0x080096c5
 8009660:	080096c5 	.word	0x080096c5
 8009664:	080096c5 	.word	0x080096c5
 8009668:	2b6e      	cmp	r3, #110	; 0x6e
 800966a:	d809      	bhi.n	8009680 <_scanf_float+0x138>
 800966c:	2b60      	cmp	r3, #96	; 0x60
 800966e:	d8b2      	bhi.n	80095d6 <_scanf_float+0x8e>
 8009670:	2b54      	cmp	r3, #84	; 0x54
 8009672:	d077      	beq.n	8009764 <_scanf_float+0x21c>
 8009674:	2b59      	cmp	r3, #89	; 0x59
 8009676:	d199      	bne.n	80095ac <_scanf_float+0x64>
 8009678:	2d07      	cmp	r5, #7
 800967a:	d197      	bne.n	80095ac <_scanf_float+0x64>
 800967c:	2508      	movs	r5, #8
 800967e:	e029      	b.n	80096d4 <_scanf_float+0x18c>
 8009680:	2b74      	cmp	r3, #116	; 0x74
 8009682:	d06f      	beq.n	8009764 <_scanf_float+0x21c>
 8009684:	2b79      	cmp	r3, #121	; 0x79
 8009686:	e7f6      	b.n	8009676 <_scanf_float+0x12e>
 8009688:	6821      	ldr	r1, [r4, #0]
 800968a:	05c8      	lsls	r0, r1, #23
 800968c:	d51a      	bpl.n	80096c4 <_scanf_float+0x17c>
 800968e:	9b02      	ldr	r3, [sp, #8]
 8009690:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009694:	6021      	str	r1, [r4, #0]
 8009696:	f109 0901 	add.w	r9, r9, #1
 800969a:	b11b      	cbz	r3, 80096a4 <_scanf_float+0x15c>
 800969c:	3b01      	subs	r3, #1
 800969e:	3201      	adds	r2, #1
 80096a0:	9302      	str	r3, [sp, #8]
 80096a2:	60a2      	str	r2, [r4, #8]
 80096a4:	68a3      	ldr	r3, [r4, #8]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	60a3      	str	r3, [r4, #8]
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	3301      	adds	r3, #1
 80096ae:	6123      	str	r3, [r4, #16]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	607b      	str	r3, [r7, #4]
 80096b8:	f340 8084 	ble.w	80097c4 <_scanf_float+0x27c>
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	3301      	adds	r3, #1
 80096c0:	603b      	str	r3, [r7, #0]
 80096c2:	e766      	b.n	8009592 <_scanf_float+0x4a>
 80096c4:	eb1a 0f05 	cmn.w	sl, r5
 80096c8:	f47f af70 	bne.w	80095ac <_scanf_float+0x64>
 80096cc:	6822      	ldr	r2, [r4, #0]
 80096ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80096d2:	6022      	str	r2, [r4, #0]
 80096d4:	f806 3b01 	strb.w	r3, [r6], #1
 80096d8:	e7e4      	b.n	80096a4 <_scanf_float+0x15c>
 80096da:	6822      	ldr	r2, [r4, #0]
 80096dc:	0610      	lsls	r0, r2, #24
 80096de:	f57f af65 	bpl.w	80095ac <_scanf_float+0x64>
 80096e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096e6:	e7f4      	b.n	80096d2 <_scanf_float+0x18a>
 80096e8:	f1ba 0f00 	cmp.w	sl, #0
 80096ec:	d10e      	bne.n	800970c <_scanf_float+0x1c4>
 80096ee:	f1b9 0f00 	cmp.w	r9, #0
 80096f2:	d10e      	bne.n	8009712 <_scanf_float+0x1ca>
 80096f4:	6822      	ldr	r2, [r4, #0]
 80096f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80096fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80096fe:	d108      	bne.n	8009712 <_scanf_float+0x1ca>
 8009700:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009704:	f04f 0a01 	mov.w	sl, #1
 8009708:	6022      	str	r2, [r4, #0]
 800970a:	e7e3      	b.n	80096d4 <_scanf_float+0x18c>
 800970c:	f1ba 0f02 	cmp.w	sl, #2
 8009710:	d055      	beq.n	80097be <_scanf_float+0x276>
 8009712:	2d01      	cmp	r5, #1
 8009714:	d002      	beq.n	800971c <_scanf_float+0x1d4>
 8009716:	2d04      	cmp	r5, #4
 8009718:	f47f af48 	bne.w	80095ac <_scanf_float+0x64>
 800971c:	3501      	adds	r5, #1
 800971e:	b2ed      	uxtb	r5, r5
 8009720:	e7d8      	b.n	80096d4 <_scanf_float+0x18c>
 8009722:	f1ba 0f01 	cmp.w	sl, #1
 8009726:	f47f af41 	bne.w	80095ac <_scanf_float+0x64>
 800972a:	f04f 0a02 	mov.w	sl, #2
 800972e:	e7d1      	b.n	80096d4 <_scanf_float+0x18c>
 8009730:	b97d      	cbnz	r5, 8009752 <_scanf_float+0x20a>
 8009732:	f1b9 0f00 	cmp.w	r9, #0
 8009736:	f47f af3c 	bne.w	80095b2 <_scanf_float+0x6a>
 800973a:	6822      	ldr	r2, [r4, #0]
 800973c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009740:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009744:	f47f af39 	bne.w	80095ba <_scanf_float+0x72>
 8009748:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800974c:	2501      	movs	r5, #1
 800974e:	6022      	str	r2, [r4, #0]
 8009750:	e7c0      	b.n	80096d4 <_scanf_float+0x18c>
 8009752:	2d03      	cmp	r5, #3
 8009754:	d0e2      	beq.n	800971c <_scanf_float+0x1d4>
 8009756:	2d05      	cmp	r5, #5
 8009758:	e7de      	b.n	8009718 <_scanf_float+0x1d0>
 800975a:	2d02      	cmp	r5, #2
 800975c:	f47f af26 	bne.w	80095ac <_scanf_float+0x64>
 8009760:	2503      	movs	r5, #3
 8009762:	e7b7      	b.n	80096d4 <_scanf_float+0x18c>
 8009764:	2d06      	cmp	r5, #6
 8009766:	f47f af21 	bne.w	80095ac <_scanf_float+0x64>
 800976a:	2507      	movs	r5, #7
 800976c:	e7b2      	b.n	80096d4 <_scanf_float+0x18c>
 800976e:	6822      	ldr	r2, [r4, #0]
 8009770:	0591      	lsls	r1, r2, #22
 8009772:	f57f af1b 	bpl.w	80095ac <_scanf_float+0x64>
 8009776:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800977a:	6022      	str	r2, [r4, #0]
 800977c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009780:	e7a8      	b.n	80096d4 <_scanf_float+0x18c>
 8009782:	6822      	ldr	r2, [r4, #0]
 8009784:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009788:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800978c:	d006      	beq.n	800979c <_scanf_float+0x254>
 800978e:	0550      	lsls	r0, r2, #21
 8009790:	f57f af0c 	bpl.w	80095ac <_scanf_float+0x64>
 8009794:	f1b9 0f00 	cmp.w	r9, #0
 8009798:	f43f af0f 	beq.w	80095ba <_scanf_float+0x72>
 800979c:	0591      	lsls	r1, r2, #22
 800979e:	bf58      	it	pl
 80097a0:	9901      	ldrpl	r1, [sp, #4]
 80097a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097a6:	bf58      	it	pl
 80097a8:	eba9 0101 	subpl.w	r1, r9, r1
 80097ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80097b0:	f04f 0900 	mov.w	r9, #0
 80097b4:	bf58      	it	pl
 80097b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80097ba:	6022      	str	r2, [r4, #0]
 80097bc:	e78a      	b.n	80096d4 <_scanf_float+0x18c>
 80097be:	f04f 0a03 	mov.w	sl, #3
 80097c2:	e787      	b.n	80096d4 <_scanf_float+0x18c>
 80097c4:	4639      	mov	r1, r7
 80097c6:	4640      	mov	r0, r8
 80097c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80097cc:	4798      	blx	r3
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f43f aedf 	beq.w	8009592 <_scanf_float+0x4a>
 80097d4:	e6ea      	b.n	80095ac <_scanf_float+0x64>
 80097d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097da:	463a      	mov	r2, r7
 80097dc:	4640      	mov	r0, r8
 80097de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097e2:	4798      	blx	r3
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	6123      	str	r3, [r4, #16]
 80097ea:	e6ec      	b.n	80095c6 <_scanf_float+0x7e>
 80097ec:	1e6b      	subs	r3, r5, #1
 80097ee:	2b06      	cmp	r3, #6
 80097f0:	d825      	bhi.n	800983e <_scanf_float+0x2f6>
 80097f2:	2d02      	cmp	r5, #2
 80097f4:	d836      	bhi.n	8009864 <_scanf_float+0x31c>
 80097f6:	455e      	cmp	r6, fp
 80097f8:	f67f aee8 	bls.w	80095cc <_scanf_float+0x84>
 80097fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009800:	463a      	mov	r2, r7
 8009802:	4640      	mov	r0, r8
 8009804:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009808:	4798      	blx	r3
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	3b01      	subs	r3, #1
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	e7f1      	b.n	80097f6 <_scanf_float+0x2ae>
 8009812:	9802      	ldr	r0, [sp, #8]
 8009814:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009818:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800981c:	463a      	mov	r2, r7
 800981e:	9002      	str	r0, [sp, #8]
 8009820:	4640      	mov	r0, r8
 8009822:	4798      	blx	r3
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	3b01      	subs	r3, #1
 8009828:	6123      	str	r3, [r4, #16]
 800982a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800982e:	fa5f fa8a 	uxtb.w	sl, sl
 8009832:	f1ba 0f02 	cmp.w	sl, #2
 8009836:	d1ec      	bne.n	8009812 <_scanf_float+0x2ca>
 8009838:	3d03      	subs	r5, #3
 800983a:	b2ed      	uxtb	r5, r5
 800983c:	1b76      	subs	r6, r6, r5
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	05da      	lsls	r2, r3, #23
 8009842:	d52f      	bpl.n	80098a4 <_scanf_float+0x35c>
 8009844:	055b      	lsls	r3, r3, #21
 8009846:	d510      	bpl.n	800986a <_scanf_float+0x322>
 8009848:	455e      	cmp	r6, fp
 800984a:	f67f aebf 	bls.w	80095cc <_scanf_float+0x84>
 800984e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009852:	463a      	mov	r2, r7
 8009854:	4640      	mov	r0, r8
 8009856:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800985a:	4798      	blx	r3
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	3b01      	subs	r3, #1
 8009860:	6123      	str	r3, [r4, #16]
 8009862:	e7f1      	b.n	8009848 <_scanf_float+0x300>
 8009864:	46aa      	mov	sl, r5
 8009866:	9602      	str	r6, [sp, #8]
 8009868:	e7df      	b.n	800982a <_scanf_float+0x2e2>
 800986a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800986e:	6923      	ldr	r3, [r4, #16]
 8009870:	2965      	cmp	r1, #101	; 0x65
 8009872:	f103 33ff 	add.w	r3, r3, #4294967295
 8009876:	f106 35ff 	add.w	r5, r6, #4294967295
 800987a:	6123      	str	r3, [r4, #16]
 800987c:	d00c      	beq.n	8009898 <_scanf_float+0x350>
 800987e:	2945      	cmp	r1, #69	; 0x45
 8009880:	d00a      	beq.n	8009898 <_scanf_float+0x350>
 8009882:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009886:	463a      	mov	r2, r7
 8009888:	4640      	mov	r0, r8
 800988a:	4798      	blx	r3
 800988c:	6923      	ldr	r3, [r4, #16]
 800988e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009892:	3b01      	subs	r3, #1
 8009894:	1eb5      	subs	r5, r6, #2
 8009896:	6123      	str	r3, [r4, #16]
 8009898:	463a      	mov	r2, r7
 800989a:	4640      	mov	r0, r8
 800989c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098a0:	4798      	blx	r3
 80098a2:	462e      	mov	r6, r5
 80098a4:	6825      	ldr	r5, [r4, #0]
 80098a6:	f015 0510 	ands.w	r5, r5, #16
 80098aa:	d155      	bne.n	8009958 <_scanf_float+0x410>
 80098ac:	7035      	strb	r5, [r6, #0]
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098b8:	d11b      	bne.n	80098f2 <_scanf_float+0x3aa>
 80098ba:	9b01      	ldr	r3, [sp, #4]
 80098bc:	454b      	cmp	r3, r9
 80098be:	eba3 0209 	sub.w	r2, r3, r9
 80098c2:	d123      	bne.n	800990c <_scanf_float+0x3c4>
 80098c4:	2200      	movs	r2, #0
 80098c6:	4659      	mov	r1, fp
 80098c8:	4640      	mov	r0, r8
 80098ca:	f000 ff1d 	bl	800a708 <_strtod_r>
 80098ce:	6822      	ldr	r2, [r4, #0]
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	f012 0f02 	tst.w	r2, #2
 80098d6:	4606      	mov	r6, r0
 80098d8:	460f      	mov	r7, r1
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	d021      	beq.n	8009922 <_scanf_float+0x3da>
 80098de:	1d1a      	adds	r2, r3, #4
 80098e0:	9903      	ldr	r1, [sp, #12]
 80098e2:	600a      	str	r2, [r1, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	e9c3 6700 	strd	r6, r7, [r3]
 80098ea:	68e3      	ldr	r3, [r4, #12]
 80098ec:	3301      	adds	r3, #1
 80098ee:	60e3      	str	r3, [r4, #12]
 80098f0:	e66d      	b.n	80095ce <_scanf_float+0x86>
 80098f2:	9b04      	ldr	r3, [sp, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0e5      	beq.n	80098c4 <_scanf_float+0x37c>
 80098f8:	9905      	ldr	r1, [sp, #20]
 80098fa:	230a      	movs	r3, #10
 80098fc:	462a      	mov	r2, r5
 80098fe:	4640      	mov	r0, r8
 8009900:	3101      	adds	r1, #1
 8009902:	f000 ffdf 	bl	800a8c4 <_strtol_r>
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	9e05      	ldr	r6, [sp, #20]
 800990a:	1ac2      	subs	r2, r0, r3
 800990c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009910:	429e      	cmp	r6, r3
 8009912:	bf28      	it	cs
 8009914:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009918:	4630      	mov	r0, r6
 800991a:	4910      	ldr	r1, [pc, #64]	; (800995c <_scanf_float+0x414>)
 800991c:	f000 f8c8 	bl	8009ab0 <siprintf>
 8009920:	e7d0      	b.n	80098c4 <_scanf_float+0x37c>
 8009922:	f012 0f04 	tst.w	r2, #4
 8009926:	f103 0204 	add.w	r2, r3, #4
 800992a:	d1d9      	bne.n	80098e0 <_scanf_float+0x398>
 800992c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009930:	f8cc 2000 	str.w	r2, [ip]
 8009934:	f8d3 8000 	ldr.w	r8, [r3]
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	f7f7 f990 	bl	8000c60 <__aeabi_dcmpun>
 8009940:	b128      	cbz	r0, 800994e <_scanf_float+0x406>
 8009942:	4807      	ldr	r0, [pc, #28]	; (8009960 <_scanf_float+0x418>)
 8009944:	f000 f8b0 	bl	8009aa8 <nanf>
 8009948:	f8c8 0000 	str.w	r0, [r8]
 800994c:	e7cd      	b.n	80098ea <_scanf_float+0x3a2>
 800994e:	4630      	mov	r0, r6
 8009950:	4639      	mov	r1, r7
 8009952:	f7f7 f9e3 	bl	8000d1c <__aeabi_d2f>
 8009956:	e7f7      	b.n	8009948 <_scanf_float+0x400>
 8009958:	2500      	movs	r5, #0
 800995a:	e638      	b.n	80095ce <_scanf_float+0x86>
 800995c:	0800d8fc 	.word	0x0800d8fc
 8009960:	0800da07 	.word	0x0800da07

08009964 <iprintf>:
 8009964:	b40f      	push	{r0, r1, r2, r3}
 8009966:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <iprintf+0x2c>)
 8009968:	b513      	push	{r0, r1, r4, lr}
 800996a:	681c      	ldr	r4, [r3, #0]
 800996c:	b124      	cbz	r4, 8009978 <iprintf+0x14>
 800996e:	69a3      	ldr	r3, [r4, #24]
 8009970:	b913      	cbnz	r3, 8009978 <iprintf+0x14>
 8009972:	4620      	mov	r0, r4
 8009974:	f002 f820 	bl	800b9b8 <__sinit>
 8009978:	ab05      	add	r3, sp, #20
 800997a:	4620      	mov	r0, r4
 800997c:	9a04      	ldr	r2, [sp, #16]
 800997e:	68a1      	ldr	r1, [r4, #8]
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	f003 fbef 	bl	800d164 <_vfiprintf_r>
 8009986:	b002      	add	sp, #8
 8009988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800998c:	b004      	add	sp, #16
 800998e:	4770      	bx	lr
 8009990:	20000610 	.word	0x20000610

08009994 <putchar>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4b08      	ldr	r3, [pc, #32]	; (80099b8 <putchar+0x24>)
 8009998:	4605      	mov	r5, r0
 800999a:	681c      	ldr	r4, [r3, #0]
 800999c:	b124      	cbz	r4, 80099a8 <putchar+0x14>
 800999e:	69a3      	ldr	r3, [r4, #24]
 80099a0:	b913      	cbnz	r3, 80099a8 <putchar+0x14>
 80099a2:	4620      	mov	r0, r4
 80099a4:	f002 f808 	bl	800b9b8 <__sinit>
 80099a8:	4629      	mov	r1, r5
 80099aa:	4620      	mov	r0, r4
 80099ac:	68a2      	ldr	r2, [r4, #8]
 80099ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099b2:	f003 bd07 	b.w	800d3c4 <_putc_r>
 80099b6:	bf00      	nop
 80099b8:	20000610 	.word	0x20000610

080099bc <_puts_r>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	460e      	mov	r6, r1
 80099c0:	4605      	mov	r5, r0
 80099c2:	b118      	cbz	r0, 80099cc <_puts_r+0x10>
 80099c4:	6983      	ldr	r3, [r0, #24]
 80099c6:	b90b      	cbnz	r3, 80099cc <_puts_r+0x10>
 80099c8:	f001 fff6 	bl	800b9b8 <__sinit>
 80099cc:	69ab      	ldr	r3, [r5, #24]
 80099ce:	68ac      	ldr	r4, [r5, #8]
 80099d0:	b913      	cbnz	r3, 80099d8 <_puts_r+0x1c>
 80099d2:	4628      	mov	r0, r5
 80099d4:	f001 fff0 	bl	800b9b8 <__sinit>
 80099d8:	4b2c      	ldr	r3, [pc, #176]	; (8009a8c <_puts_r+0xd0>)
 80099da:	429c      	cmp	r4, r3
 80099dc:	d120      	bne.n	8009a20 <_puts_r+0x64>
 80099de:	686c      	ldr	r4, [r5, #4]
 80099e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099e2:	07db      	lsls	r3, r3, #31
 80099e4:	d405      	bmi.n	80099f2 <_puts_r+0x36>
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	0598      	lsls	r0, r3, #22
 80099ea:	d402      	bmi.n	80099f2 <_puts_r+0x36>
 80099ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ee:	f002 fbfe 	bl	800c1ee <__retarget_lock_acquire_recursive>
 80099f2:	89a3      	ldrh	r3, [r4, #12]
 80099f4:	0719      	lsls	r1, r3, #28
 80099f6:	d51d      	bpl.n	8009a34 <_puts_r+0x78>
 80099f8:	6923      	ldr	r3, [r4, #16]
 80099fa:	b1db      	cbz	r3, 8009a34 <_puts_r+0x78>
 80099fc:	3e01      	subs	r6, #1
 80099fe:	68a3      	ldr	r3, [r4, #8]
 8009a00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a04:	3b01      	subs	r3, #1
 8009a06:	60a3      	str	r3, [r4, #8]
 8009a08:	bb39      	cbnz	r1, 8009a5a <_puts_r+0x9e>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	da38      	bge.n	8009a80 <_puts_r+0xc4>
 8009a0e:	4622      	mov	r2, r4
 8009a10:	210a      	movs	r1, #10
 8009a12:	4628      	mov	r0, r5
 8009a14:	f000 ff62 	bl	800a8dc <__swbuf_r>
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d011      	beq.n	8009a40 <_puts_r+0x84>
 8009a1c:	250a      	movs	r5, #10
 8009a1e:	e011      	b.n	8009a44 <_puts_r+0x88>
 8009a20:	4b1b      	ldr	r3, [pc, #108]	; (8009a90 <_puts_r+0xd4>)
 8009a22:	429c      	cmp	r4, r3
 8009a24:	d101      	bne.n	8009a2a <_puts_r+0x6e>
 8009a26:	68ac      	ldr	r4, [r5, #8]
 8009a28:	e7da      	b.n	80099e0 <_puts_r+0x24>
 8009a2a:	4b1a      	ldr	r3, [pc, #104]	; (8009a94 <_puts_r+0xd8>)
 8009a2c:	429c      	cmp	r4, r3
 8009a2e:	bf08      	it	eq
 8009a30:	68ec      	ldreq	r4, [r5, #12]
 8009a32:	e7d5      	b.n	80099e0 <_puts_r+0x24>
 8009a34:	4621      	mov	r1, r4
 8009a36:	4628      	mov	r0, r5
 8009a38:	f000 ffa2 	bl	800a980 <__swsetup_r>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d0dd      	beq.n	80099fc <_puts_r+0x40>
 8009a40:	f04f 35ff 	mov.w	r5, #4294967295
 8009a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a46:	07da      	lsls	r2, r3, #31
 8009a48:	d405      	bmi.n	8009a56 <_puts_r+0x9a>
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	059b      	lsls	r3, r3, #22
 8009a4e:	d402      	bmi.n	8009a56 <_puts_r+0x9a>
 8009a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a52:	f002 fbcd 	bl	800c1f0 <__retarget_lock_release_recursive>
 8009a56:	4628      	mov	r0, r5
 8009a58:	bd70      	pop	{r4, r5, r6, pc}
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	da04      	bge.n	8009a68 <_puts_r+0xac>
 8009a5e:	69a2      	ldr	r2, [r4, #24]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	dc06      	bgt.n	8009a72 <_puts_r+0xb6>
 8009a64:	290a      	cmp	r1, #10
 8009a66:	d004      	beq.n	8009a72 <_puts_r+0xb6>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	6022      	str	r2, [r4, #0]
 8009a6e:	7019      	strb	r1, [r3, #0]
 8009a70:	e7c5      	b.n	80099fe <_puts_r+0x42>
 8009a72:	4622      	mov	r2, r4
 8009a74:	4628      	mov	r0, r5
 8009a76:	f000 ff31 	bl	800a8dc <__swbuf_r>
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	d1bf      	bne.n	80099fe <_puts_r+0x42>
 8009a7e:	e7df      	b.n	8009a40 <_puts_r+0x84>
 8009a80:	250a      	movs	r5, #10
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	6022      	str	r2, [r4, #0]
 8009a88:	701d      	strb	r5, [r3, #0]
 8009a8a:	e7db      	b.n	8009a44 <_puts_r+0x88>
 8009a8c:	0800dba4 	.word	0x0800dba4
 8009a90:	0800dbc4 	.word	0x0800dbc4
 8009a94:	0800db84 	.word	0x0800db84

08009a98 <puts>:
 8009a98:	4b02      	ldr	r3, [pc, #8]	; (8009aa4 <puts+0xc>)
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	6818      	ldr	r0, [r3, #0]
 8009a9e:	f7ff bf8d 	b.w	80099bc <_puts_r>
 8009aa2:	bf00      	nop
 8009aa4:	20000610 	.word	0x20000610

08009aa8 <nanf>:
 8009aa8:	4800      	ldr	r0, [pc, #0]	; (8009aac <nanf+0x4>)
 8009aaa:	4770      	bx	lr
 8009aac:	7fc00000 	.word	0x7fc00000

08009ab0 <siprintf>:
 8009ab0:	b40e      	push	{r1, r2, r3}
 8009ab2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ab6:	b500      	push	{lr}
 8009ab8:	b09c      	sub	sp, #112	; 0x70
 8009aba:	ab1d      	add	r3, sp, #116	; 0x74
 8009abc:	9002      	str	r0, [sp, #8]
 8009abe:	9006      	str	r0, [sp, #24]
 8009ac0:	9107      	str	r1, [sp, #28]
 8009ac2:	9104      	str	r1, [sp, #16]
 8009ac4:	4808      	ldr	r0, [pc, #32]	; (8009ae8 <siprintf+0x38>)
 8009ac6:	4909      	ldr	r1, [pc, #36]	; (8009aec <siprintf+0x3c>)
 8009ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009acc:	9105      	str	r1, [sp, #20]
 8009ace:	6800      	ldr	r0, [r0, #0]
 8009ad0:	a902      	add	r1, sp, #8
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	f003 fa1e 	bl	800cf14 <_svfiprintf_r>
 8009ad8:	2200      	movs	r2, #0
 8009ada:	9b02      	ldr	r3, [sp, #8]
 8009adc:	701a      	strb	r2, [r3, #0]
 8009ade:	b01c      	add	sp, #112	; 0x70
 8009ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ae4:	b003      	add	sp, #12
 8009ae6:	4770      	bx	lr
 8009ae8:	20000610 	.word	0x20000610
 8009aec:	ffff0208 	.word	0xffff0208

08009af0 <sulp>:
 8009af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af4:	460f      	mov	r7, r1
 8009af6:	4690      	mov	r8, r2
 8009af8:	f002 ff78 	bl	800c9ec <__ulp>
 8009afc:	4604      	mov	r4, r0
 8009afe:	460d      	mov	r5, r1
 8009b00:	f1b8 0f00 	cmp.w	r8, #0
 8009b04:	d011      	beq.n	8009b2a <sulp+0x3a>
 8009b06:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009b0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	dd0b      	ble.n	8009b2a <sulp+0x3a>
 8009b12:	2400      	movs	r4, #0
 8009b14:	051b      	lsls	r3, r3, #20
 8009b16:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b1e:	4622      	mov	r2, r4
 8009b20:	462b      	mov	r3, r5
 8009b22:	f7f6 fe03 	bl	800072c <__aeabi_dmul>
 8009b26:	4604      	mov	r4, r0
 8009b28:	460d      	mov	r5, r1
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b32:	0000      	movs	r0, r0
 8009b34:	0000      	movs	r0, r0
	...

08009b38 <_strtod_l>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	469b      	mov	fp, r3
 8009b3e:	2300      	movs	r3, #0
 8009b40:	b09f      	sub	sp, #124	; 0x7c
 8009b42:	931a      	str	r3, [sp, #104]	; 0x68
 8009b44:	4b9e      	ldr	r3, [pc, #632]	; (8009dc0 <_strtod_l+0x288>)
 8009b46:	4682      	mov	sl, r0
 8009b48:	681f      	ldr	r7, [r3, #0]
 8009b4a:	460e      	mov	r6, r1
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	9215      	str	r2, [sp, #84]	; 0x54
 8009b50:	f7f6 fb74 	bl	800023c <strlen>
 8009b54:	f04f 0800 	mov.w	r8, #0
 8009b58:	4604      	mov	r4, r0
 8009b5a:	f04f 0900 	mov.w	r9, #0
 8009b5e:	9619      	str	r6, [sp, #100]	; 0x64
 8009b60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b62:	781a      	ldrb	r2, [r3, #0]
 8009b64:	2a2b      	cmp	r2, #43	; 0x2b
 8009b66:	d04c      	beq.n	8009c02 <_strtod_l+0xca>
 8009b68:	d83a      	bhi.n	8009be0 <_strtod_l+0xa8>
 8009b6a:	2a0d      	cmp	r2, #13
 8009b6c:	d833      	bhi.n	8009bd6 <_strtod_l+0x9e>
 8009b6e:	2a08      	cmp	r2, #8
 8009b70:	d833      	bhi.n	8009bda <_strtod_l+0xa2>
 8009b72:	2a00      	cmp	r2, #0
 8009b74:	d03d      	beq.n	8009bf2 <_strtod_l+0xba>
 8009b76:	2300      	movs	r3, #0
 8009b78:	930a      	str	r3, [sp, #40]	; 0x28
 8009b7a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009b7c:	782b      	ldrb	r3, [r5, #0]
 8009b7e:	2b30      	cmp	r3, #48	; 0x30
 8009b80:	f040 80aa 	bne.w	8009cd8 <_strtod_l+0x1a0>
 8009b84:	786b      	ldrb	r3, [r5, #1]
 8009b86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b8a:	2b58      	cmp	r3, #88	; 0x58
 8009b8c:	d166      	bne.n	8009c5c <_strtod_l+0x124>
 8009b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b90:	4650      	mov	r0, sl
 8009b92:	9301      	str	r3, [sp, #4]
 8009b94:	ab1a      	add	r3, sp, #104	; 0x68
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	4a8a      	ldr	r2, [pc, #552]	; (8009dc4 <_strtod_l+0x28c>)
 8009b9a:	f8cd b008 	str.w	fp, [sp, #8]
 8009b9e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009ba0:	a919      	add	r1, sp, #100	; 0x64
 8009ba2:	f002 f821 	bl	800bbe8 <__gethex>
 8009ba6:	f010 0607 	ands.w	r6, r0, #7
 8009baa:	4604      	mov	r4, r0
 8009bac:	d005      	beq.n	8009bba <_strtod_l+0x82>
 8009bae:	2e06      	cmp	r6, #6
 8009bb0:	d129      	bne.n	8009c06 <_strtod_l+0xce>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	3501      	adds	r5, #1
 8009bb6:	9519      	str	r5, [sp, #100]	; 0x64
 8009bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8009bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f040 858a 	bne.w	800a6d6 <_strtod_l+0xb9e>
 8009bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc4:	b1d3      	cbz	r3, 8009bfc <_strtod_l+0xc4>
 8009bc6:	4642      	mov	r2, r8
 8009bc8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4619      	mov	r1, r3
 8009bd0:	b01f      	add	sp, #124	; 0x7c
 8009bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd6:	2a20      	cmp	r2, #32
 8009bd8:	d1cd      	bne.n	8009b76 <_strtod_l+0x3e>
 8009bda:	3301      	adds	r3, #1
 8009bdc:	9319      	str	r3, [sp, #100]	; 0x64
 8009bde:	e7bf      	b.n	8009b60 <_strtod_l+0x28>
 8009be0:	2a2d      	cmp	r2, #45	; 0x2d
 8009be2:	d1c8      	bne.n	8009b76 <_strtod_l+0x3e>
 8009be4:	2201      	movs	r2, #1
 8009be6:	920a      	str	r2, [sp, #40]	; 0x28
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	9219      	str	r2, [sp, #100]	; 0x64
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1c3      	bne.n	8009b7a <_strtod_l+0x42>
 8009bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bf4:	9619      	str	r6, [sp, #100]	; 0x64
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f040 856b 	bne.w	800a6d2 <_strtod_l+0xb9a>
 8009bfc:	4642      	mov	r2, r8
 8009bfe:	464b      	mov	r3, r9
 8009c00:	e7e4      	b.n	8009bcc <_strtod_l+0x94>
 8009c02:	2200      	movs	r2, #0
 8009c04:	e7ef      	b.n	8009be6 <_strtod_l+0xae>
 8009c06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c08:	b13a      	cbz	r2, 8009c1a <_strtod_l+0xe2>
 8009c0a:	2135      	movs	r1, #53	; 0x35
 8009c0c:	a81c      	add	r0, sp, #112	; 0x70
 8009c0e:	f002 fff1 	bl	800cbf4 <__copybits>
 8009c12:	4650      	mov	r0, sl
 8009c14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c16:	f002 fbb9 	bl	800c38c <_Bfree>
 8009c1a:	3e01      	subs	r6, #1
 8009c1c:	2e04      	cmp	r6, #4
 8009c1e:	d806      	bhi.n	8009c2e <_strtod_l+0xf6>
 8009c20:	e8df f006 	tbb	[pc, r6]
 8009c24:	1714030a 	.word	0x1714030a
 8009c28:	0a          	.byte	0x0a
 8009c29:	00          	.byte	0x00
 8009c2a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009c2e:	0721      	lsls	r1, r4, #28
 8009c30:	d5c3      	bpl.n	8009bba <_strtod_l+0x82>
 8009c32:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009c36:	e7c0      	b.n	8009bba <_strtod_l+0x82>
 8009c38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c3a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009c3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c46:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009c4a:	e7f0      	b.n	8009c2e <_strtod_l+0xf6>
 8009c4c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009dc8 <_strtod_l+0x290>
 8009c50:	e7ed      	b.n	8009c2e <_strtod_l+0xf6>
 8009c52:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009c56:	f04f 38ff 	mov.w	r8, #4294967295
 8009c5a:	e7e8      	b.n	8009c2e <_strtod_l+0xf6>
 8009c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	9219      	str	r2, [sp, #100]	; 0x64
 8009c62:	785b      	ldrb	r3, [r3, #1]
 8009c64:	2b30      	cmp	r3, #48	; 0x30
 8009c66:	d0f9      	beq.n	8009c5c <_strtod_l+0x124>
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0a6      	beq.n	8009bba <_strtod_l+0x82>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	9307      	str	r3, [sp, #28]
 8009c70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c72:	220a      	movs	r2, #10
 8009c74:	9308      	str	r3, [sp, #32]
 8009c76:	2300      	movs	r3, #0
 8009c78:	469b      	mov	fp, r3
 8009c7a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009c7e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009c80:	7805      	ldrb	r5, [r0, #0]
 8009c82:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009c86:	b2d9      	uxtb	r1, r3
 8009c88:	2909      	cmp	r1, #9
 8009c8a:	d927      	bls.n	8009cdc <_strtod_l+0x1a4>
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f003 fc39 	bl	800d506 <strncmp>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d033      	beq.n	8009d00 <_strtod_l+0x1c8>
 8009c98:	2000      	movs	r0, #0
 8009c9a:	462a      	mov	r2, r5
 8009c9c:	465c      	mov	r4, fp
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	9004      	str	r0, [sp, #16]
 8009ca2:	2a65      	cmp	r2, #101	; 0x65
 8009ca4:	d001      	beq.n	8009caa <_strtod_l+0x172>
 8009ca6:	2a45      	cmp	r2, #69	; 0x45
 8009ca8:	d114      	bne.n	8009cd4 <_strtod_l+0x19c>
 8009caa:	b91c      	cbnz	r4, 8009cb4 <_strtod_l+0x17c>
 8009cac:	9a07      	ldr	r2, [sp, #28]
 8009cae:	4302      	orrs	r2, r0
 8009cb0:	d09f      	beq.n	8009bf2 <_strtod_l+0xba>
 8009cb2:	2400      	movs	r4, #0
 8009cb4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009cb6:	1c72      	adds	r2, r6, #1
 8009cb8:	9219      	str	r2, [sp, #100]	; 0x64
 8009cba:	7872      	ldrb	r2, [r6, #1]
 8009cbc:	2a2b      	cmp	r2, #43	; 0x2b
 8009cbe:	d079      	beq.n	8009db4 <_strtod_l+0x27c>
 8009cc0:	2a2d      	cmp	r2, #45	; 0x2d
 8009cc2:	f000 8083 	beq.w	8009dcc <_strtod_l+0x294>
 8009cc6:	2700      	movs	r7, #0
 8009cc8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009ccc:	2909      	cmp	r1, #9
 8009cce:	f240 8083 	bls.w	8009dd8 <_strtod_l+0x2a0>
 8009cd2:	9619      	str	r6, [sp, #100]	; 0x64
 8009cd4:	2500      	movs	r5, #0
 8009cd6:	e09f      	b.n	8009e18 <_strtod_l+0x2e0>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e7c8      	b.n	8009c6e <_strtod_l+0x136>
 8009cdc:	f1bb 0f08 	cmp.w	fp, #8
 8009ce0:	bfd5      	itete	le
 8009ce2:	9906      	ldrle	r1, [sp, #24]
 8009ce4:	9905      	ldrgt	r1, [sp, #20]
 8009ce6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009cea:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009cee:	f100 0001 	add.w	r0, r0, #1
 8009cf2:	bfd4      	ite	le
 8009cf4:	9306      	strle	r3, [sp, #24]
 8009cf6:	9305      	strgt	r3, [sp, #20]
 8009cf8:	f10b 0b01 	add.w	fp, fp, #1
 8009cfc:	9019      	str	r0, [sp, #100]	; 0x64
 8009cfe:	e7be      	b.n	8009c7e <_strtod_l+0x146>
 8009d00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d02:	191a      	adds	r2, r3, r4
 8009d04:	9219      	str	r2, [sp, #100]	; 0x64
 8009d06:	5d1a      	ldrb	r2, [r3, r4]
 8009d08:	f1bb 0f00 	cmp.w	fp, #0
 8009d0c:	d036      	beq.n	8009d7c <_strtod_l+0x244>
 8009d0e:	465c      	mov	r4, fp
 8009d10:	9004      	str	r0, [sp, #16]
 8009d12:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	d912      	bls.n	8009d40 <_strtod_l+0x208>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e7c1      	b.n	8009ca2 <_strtod_l+0x16a>
 8009d1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d20:	3001      	adds	r0, #1
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	9219      	str	r2, [sp, #100]	; 0x64
 8009d26:	785a      	ldrb	r2, [r3, #1]
 8009d28:	2a30      	cmp	r2, #48	; 0x30
 8009d2a:	d0f8      	beq.n	8009d1e <_strtod_l+0x1e6>
 8009d2c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009d30:	2b08      	cmp	r3, #8
 8009d32:	f200 84d5 	bhi.w	800a6e0 <_strtod_l+0xba8>
 8009d36:	9004      	str	r0, [sp, #16]
 8009d38:	2000      	movs	r0, #0
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d3e:	9308      	str	r3, [sp, #32]
 8009d40:	3a30      	subs	r2, #48	; 0x30
 8009d42:	f100 0301 	add.w	r3, r0, #1
 8009d46:	d013      	beq.n	8009d70 <_strtod_l+0x238>
 8009d48:	9904      	ldr	r1, [sp, #16]
 8009d4a:	1905      	adds	r5, r0, r4
 8009d4c:	4419      	add	r1, r3
 8009d4e:	9104      	str	r1, [sp, #16]
 8009d50:	4623      	mov	r3, r4
 8009d52:	210a      	movs	r1, #10
 8009d54:	42ab      	cmp	r3, r5
 8009d56:	d113      	bne.n	8009d80 <_strtod_l+0x248>
 8009d58:	1823      	adds	r3, r4, r0
 8009d5a:	2b08      	cmp	r3, #8
 8009d5c:	f104 0401 	add.w	r4, r4, #1
 8009d60:	4404      	add	r4, r0
 8009d62:	dc1b      	bgt.n	8009d9c <_strtod_l+0x264>
 8009d64:	230a      	movs	r3, #10
 8009d66:	9906      	ldr	r1, [sp, #24]
 8009d68:	fb03 2301 	mla	r3, r3, r1, r2
 8009d6c:	9306      	str	r3, [sp, #24]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d72:	4618      	mov	r0, r3
 8009d74:	1c51      	adds	r1, r2, #1
 8009d76:	9119      	str	r1, [sp, #100]	; 0x64
 8009d78:	7852      	ldrb	r2, [r2, #1]
 8009d7a:	e7ca      	b.n	8009d12 <_strtod_l+0x1da>
 8009d7c:	4658      	mov	r0, fp
 8009d7e:	e7d3      	b.n	8009d28 <_strtod_l+0x1f0>
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	dc04      	bgt.n	8009d8e <_strtod_l+0x256>
 8009d84:	9f06      	ldr	r7, [sp, #24]
 8009d86:	434f      	muls	r7, r1
 8009d88:	9706      	str	r7, [sp, #24]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	e7e2      	b.n	8009d54 <_strtod_l+0x21c>
 8009d8e:	1c5f      	adds	r7, r3, #1
 8009d90:	2f10      	cmp	r7, #16
 8009d92:	bfde      	ittt	le
 8009d94:	9f05      	ldrle	r7, [sp, #20]
 8009d96:	434f      	mulle	r7, r1
 8009d98:	9705      	strle	r7, [sp, #20]
 8009d9a:	e7f6      	b.n	8009d8a <_strtod_l+0x252>
 8009d9c:	2c10      	cmp	r4, #16
 8009d9e:	bfdf      	itttt	le
 8009da0:	230a      	movle	r3, #10
 8009da2:	9905      	ldrle	r1, [sp, #20]
 8009da4:	fb03 2301 	mlale	r3, r3, r1, r2
 8009da8:	9305      	strle	r3, [sp, #20]
 8009daa:	e7e0      	b.n	8009d6e <_strtod_l+0x236>
 8009dac:	2300      	movs	r3, #0
 8009dae:	9304      	str	r3, [sp, #16]
 8009db0:	2301      	movs	r3, #1
 8009db2:	e77b      	b.n	8009cac <_strtod_l+0x174>
 8009db4:	2700      	movs	r7, #0
 8009db6:	1cb2      	adds	r2, r6, #2
 8009db8:	9219      	str	r2, [sp, #100]	; 0x64
 8009dba:	78b2      	ldrb	r2, [r6, #2]
 8009dbc:	e784      	b.n	8009cc8 <_strtod_l+0x190>
 8009dbe:	bf00      	nop
 8009dc0:	0800dc4c 	.word	0x0800dc4c
 8009dc4:	0800d904 	.word	0x0800d904
 8009dc8:	7ff00000 	.word	0x7ff00000
 8009dcc:	2701      	movs	r7, #1
 8009dce:	e7f2      	b.n	8009db6 <_strtod_l+0x27e>
 8009dd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009dd2:	1c51      	adds	r1, r2, #1
 8009dd4:	9119      	str	r1, [sp, #100]	; 0x64
 8009dd6:	7852      	ldrb	r2, [r2, #1]
 8009dd8:	2a30      	cmp	r2, #48	; 0x30
 8009dda:	d0f9      	beq.n	8009dd0 <_strtod_l+0x298>
 8009ddc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009de0:	2908      	cmp	r1, #8
 8009de2:	f63f af77 	bhi.w	8009cd4 <_strtod_l+0x19c>
 8009de6:	f04f 0e0a 	mov.w	lr, #10
 8009dea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009dee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009df0:	9209      	str	r2, [sp, #36]	; 0x24
 8009df2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009df4:	1c51      	adds	r1, r2, #1
 8009df6:	9119      	str	r1, [sp, #100]	; 0x64
 8009df8:	7852      	ldrb	r2, [r2, #1]
 8009dfa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009dfe:	2d09      	cmp	r5, #9
 8009e00:	d935      	bls.n	8009e6e <_strtod_l+0x336>
 8009e02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e04:	1b49      	subs	r1, r1, r5
 8009e06:	2908      	cmp	r1, #8
 8009e08:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009e0c:	dc02      	bgt.n	8009e14 <_strtod_l+0x2dc>
 8009e0e:	4565      	cmp	r5, ip
 8009e10:	bfa8      	it	ge
 8009e12:	4665      	movge	r5, ip
 8009e14:	b107      	cbz	r7, 8009e18 <_strtod_l+0x2e0>
 8009e16:	426d      	negs	r5, r5
 8009e18:	2c00      	cmp	r4, #0
 8009e1a:	d14c      	bne.n	8009eb6 <_strtod_l+0x37e>
 8009e1c:	9907      	ldr	r1, [sp, #28]
 8009e1e:	4301      	orrs	r1, r0
 8009e20:	f47f aecb 	bne.w	8009bba <_strtod_l+0x82>
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f47f aee4 	bne.w	8009bf2 <_strtod_l+0xba>
 8009e2a:	2a69      	cmp	r2, #105	; 0x69
 8009e2c:	d026      	beq.n	8009e7c <_strtod_l+0x344>
 8009e2e:	dc23      	bgt.n	8009e78 <_strtod_l+0x340>
 8009e30:	2a49      	cmp	r2, #73	; 0x49
 8009e32:	d023      	beq.n	8009e7c <_strtod_l+0x344>
 8009e34:	2a4e      	cmp	r2, #78	; 0x4e
 8009e36:	f47f aedc 	bne.w	8009bf2 <_strtod_l+0xba>
 8009e3a:	499d      	ldr	r1, [pc, #628]	; (800a0b0 <_strtod_l+0x578>)
 8009e3c:	a819      	add	r0, sp, #100	; 0x64
 8009e3e:	f002 f921 	bl	800c084 <__match>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f43f aed5 	beq.w	8009bf2 <_strtod_l+0xba>
 8009e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b28      	cmp	r3, #40	; 0x28
 8009e4e:	d12c      	bne.n	8009eaa <_strtod_l+0x372>
 8009e50:	4998      	ldr	r1, [pc, #608]	; (800a0b4 <_strtod_l+0x57c>)
 8009e52:	aa1c      	add	r2, sp, #112	; 0x70
 8009e54:	a819      	add	r0, sp, #100	; 0x64
 8009e56:	f002 f929 	bl	800c0ac <__hexnan>
 8009e5a:	2805      	cmp	r0, #5
 8009e5c:	d125      	bne.n	8009eaa <_strtod_l+0x372>
 8009e5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e60:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009e64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009e68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009e6c:	e6a5      	b.n	8009bba <_strtod_l+0x82>
 8009e6e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009e72:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009e76:	e7bc      	b.n	8009df2 <_strtod_l+0x2ba>
 8009e78:	2a6e      	cmp	r2, #110	; 0x6e
 8009e7a:	e7dc      	b.n	8009e36 <_strtod_l+0x2fe>
 8009e7c:	498e      	ldr	r1, [pc, #568]	; (800a0b8 <_strtod_l+0x580>)
 8009e7e:	a819      	add	r0, sp, #100	; 0x64
 8009e80:	f002 f900 	bl	800c084 <__match>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	f43f aeb4 	beq.w	8009bf2 <_strtod_l+0xba>
 8009e8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e8c:	498b      	ldr	r1, [pc, #556]	; (800a0bc <_strtod_l+0x584>)
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	a819      	add	r0, sp, #100	; 0x64
 8009e92:	9319      	str	r3, [sp, #100]	; 0x64
 8009e94:	f002 f8f6 	bl	800c084 <__match>
 8009e98:	b910      	cbnz	r0, 8009ea0 <_strtod_l+0x368>
 8009e9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	9319      	str	r3, [sp, #100]	; 0x64
 8009ea0:	f04f 0800 	mov.w	r8, #0
 8009ea4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a0c0 <_strtod_l+0x588>
 8009ea8:	e687      	b.n	8009bba <_strtod_l+0x82>
 8009eaa:	4886      	ldr	r0, [pc, #536]	; (800a0c4 <_strtod_l+0x58c>)
 8009eac:	f003 fad2 	bl	800d454 <nan>
 8009eb0:	4680      	mov	r8, r0
 8009eb2:	4689      	mov	r9, r1
 8009eb4:	e681      	b.n	8009bba <_strtod_l+0x82>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	f1bb 0f00 	cmp.w	fp, #0
 8009ebc:	bf08      	it	eq
 8009ebe:	46a3      	moveq	fp, r4
 8009ec0:	1aeb      	subs	r3, r5, r3
 8009ec2:	2c10      	cmp	r4, #16
 8009ec4:	9806      	ldr	r0, [sp, #24]
 8009ec6:	4626      	mov	r6, r4
 8009ec8:	9307      	str	r3, [sp, #28]
 8009eca:	bfa8      	it	ge
 8009ecc:	2610      	movge	r6, #16
 8009ece:	f7f6 fbb3 	bl	8000638 <__aeabi_ui2d>
 8009ed2:	2c09      	cmp	r4, #9
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	4689      	mov	r9, r1
 8009ed8:	dd13      	ble.n	8009f02 <_strtod_l+0x3ca>
 8009eda:	4b7b      	ldr	r3, [pc, #492]	; (800a0c8 <_strtod_l+0x590>)
 8009edc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ee0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ee4:	f7f6 fc22 	bl	800072c <__aeabi_dmul>
 8009ee8:	4680      	mov	r8, r0
 8009eea:	9805      	ldr	r0, [sp, #20]
 8009eec:	4689      	mov	r9, r1
 8009eee:	f7f6 fba3 	bl	8000638 <__aeabi_ui2d>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	4649      	mov	r1, r9
 8009efa:	f7f6 fa61 	bl	80003c0 <__adddf3>
 8009efe:	4680      	mov	r8, r0
 8009f00:	4689      	mov	r9, r1
 8009f02:	2c0f      	cmp	r4, #15
 8009f04:	dc36      	bgt.n	8009f74 <_strtod_l+0x43c>
 8009f06:	9b07      	ldr	r3, [sp, #28]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f43f ae56 	beq.w	8009bba <_strtod_l+0x82>
 8009f0e:	dd22      	ble.n	8009f56 <_strtod_l+0x41e>
 8009f10:	2b16      	cmp	r3, #22
 8009f12:	dc09      	bgt.n	8009f28 <_strtod_l+0x3f0>
 8009f14:	496c      	ldr	r1, [pc, #432]	; (800a0c8 <_strtod_l+0x590>)
 8009f16:	4642      	mov	r2, r8
 8009f18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f1c:	464b      	mov	r3, r9
 8009f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f22:	f7f6 fc03 	bl	800072c <__aeabi_dmul>
 8009f26:	e7c3      	b.n	8009eb0 <_strtod_l+0x378>
 8009f28:	9a07      	ldr	r2, [sp, #28]
 8009f2a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	db20      	blt.n	8009f74 <_strtod_l+0x43c>
 8009f32:	4d65      	ldr	r5, [pc, #404]	; (800a0c8 <_strtod_l+0x590>)
 8009f34:	f1c4 040f 	rsb	r4, r4, #15
 8009f38:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f42:	464b      	mov	r3, r9
 8009f44:	f7f6 fbf2 	bl	800072c <__aeabi_dmul>
 8009f48:	9b07      	ldr	r3, [sp, #28]
 8009f4a:	1b1c      	subs	r4, r3, r4
 8009f4c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009f50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f54:	e7e5      	b.n	8009f22 <_strtod_l+0x3ea>
 8009f56:	9b07      	ldr	r3, [sp, #28]
 8009f58:	3316      	adds	r3, #22
 8009f5a:	db0b      	blt.n	8009f74 <_strtod_l+0x43c>
 8009f5c:	9b04      	ldr	r3, [sp, #16]
 8009f5e:	4640      	mov	r0, r8
 8009f60:	1b5d      	subs	r5, r3, r5
 8009f62:	4b59      	ldr	r3, [pc, #356]	; (800a0c8 <_strtod_l+0x590>)
 8009f64:	4649      	mov	r1, r9
 8009f66:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009f6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f6e:	f7f6 fd07 	bl	8000980 <__aeabi_ddiv>
 8009f72:	e79d      	b.n	8009eb0 <_strtod_l+0x378>
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	1ba6      	subs	r6, r4, r6
 8009f78:	441e      	add	r6, r3
 8009f7a:	2e00      	cmp	r6, #0
 8009f7c:	dd74      	ble.n	800a068 <_strtod_l+0x530>
 8009f7e:	f016 030f 	ands.w	r3, r6, #15
 8009f82:	d00a      	beq.n	8009f9a <_strtod_l+0x462>
 8009f84:	4950      	ldr	r1, [pc, #320]	; (800a0c8 <_strtod_l+0x590>)
 8009f86:	4642      	mov	r2, r8
 8009f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f90:	464b      	mov	r3, r9
 8009f92:	f7f6 fbcb 	bl	800072c <__aeabi_dmul>
 8009f96:	4680      	mov	r8, r0
 8009f98:	4689      	mov	r9, r1
 8009f9a:	f036 060f 	bics.w	r6, r6, #15
 8009f9e:	d052      	beq.n	800a046 <_strtod_l+0x50e>
 8009fa0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009fa4:	dd27      	ble.n	8009ff6 <_strtod_l+0x4be>
 8009fa6:	f04f 0b00 	mov.w	fp, #0
 8009faa:	f8cd b010 	str.w	fp, [sp, #16]
 8009fae:	f8cd b020 	str.w	fp, [sp, #32]
 8009fb2:	f8cd b018 	str.w	fp, [sp, #24]
 8009fb6:	2322      	movs	r3, #34	; 0x22
 8009fb8:	f04f 0800 	mov.w	r8, #0
 8009fbc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a0c0 <_strtod_l+0x588>
 8009fc0:	f8ca 3000 	str.w	r3, [sl]
 8009fc4:	9b08      	ldr	r3, [sp, #32]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f43f adf7 	beq.w	8009bba <_strtod_l+0x82>
 8009fcc:	4650      	mov	r0, sl
 8009fce:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009fd0:	f002 f9dc 	bl	800c38c <_Bfree>
 8009fd4:	4650      	mov	r0, sl
 8009fd6:	9906      	ldr	r1, [sp, #24]
 8009fd8:	f002 f9d8 	bl	800c38c <_Bfree>
 8009fdc:	4650      	mov	r0, sl
 8009fde:	9904      	ldr	r1, [sp, #16]
 8009fe0:	f002 f9d4 	bl	800c38c <_Bfree>
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	9908      	ldr	r1, [sp, #32]
 8009fe8:	f002 f9d0 	bl	800c38c <_Bfree>
 8009fec:	4659      	mov	r1, fp
 8009fee:	4650      	mov	r0, sl
 8009ff0:	f002 f9cc 	bl	800c38c <_Bfree>
 8009ff4:	e5e1      	b.n	8009bba <_strtod_l+0x82>
 8009ff6:	4b35      	ldr	r3, [pc, #212]	; (800a0cc <_strtod_l+0x594>)
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	9305      	str	r3, [sp, #20]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4649      	mov	r1, r9
 800a000:	461f      	mov	r7, r3
 800a002:	1136      	asrs	r6, r6, #4
 800a004:	2e01      	cmp	r6, #1
 800a006:	dc21      	bgt.n	800a04c <_strtod_l+0x514>
 800a008:	b10b      	cbz	r3, 800a00e <_strtod_l+0x4d6>
 800a00a:	4680      	mov	r8, r0
 800a00c:	4689      	mov	r9, r1
 800a00e:	4b2f      	ldr	r3, [pc, #188]	; (800a0cc <_strtod_l+0x594>)
 800a010:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a014:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a018:	4642      	mov	r2, r8
 800a01a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a01e:	464b      	mov	r3, r9
 800a020:	f7f6 fb84 	bl	800072c <__aeabi_dmul>
 800a024:	4b26      	ldr	r3, [pc, #152]	; (800a0c0 <_strtod_l+0x588>)
 800a026:	460a      	mov	r2, r1
 800a028:	400b      	ands	r3, r1
 800a02a:	4929      	ldr	r1, [pc, #164]	; (800a0d0 <_strtod_l+0x598>)
 800a02c:	4680      	mov	r8, r0
 800a02e:	428b      	cmp	r3, r1
 800a030:	d8b9      	bhi.n	8009fa6 <_strtod_l+0x46e>
 800a032:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a036:	428b      	cmp	r3, r1
 800a038:	bf86      	itte	hi
 800a03a:	f04f 38ff 	movhi.w	r8, #4294967295
 800a03e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a0d4 <_strtod_l+0x59c>
 800a042:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a046:	2300      	movs	r3, #0
 800a048:	9305      	str	r3, [sp, #20]
 800a04a:	e07f      	b.n	800a14c <_strtod_l+0x614>
 800a04c:	07f2      	lsls	r2, r6, #31
 800a04e:	d505      	bpl.n	800a05c <_strtod_l+0x524>
 800a050:	9b05      	ldr	r3, [sp, #20]
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7f6 fb69 	bl	800072c <__aeabi_dmul>
 800a05a:	2301      	movs	r3, #1
 800a05c:	9a05      	ldr	r2, [sp, #20]
 800a05e:	3701      	adds	r7, #1
 800a060:	3208      	adds	r2, #8
 800a062:	1076      	asrs	r6, r6, #1
 800a064:	9205      	str	r2, [sp, #20]
 800a066:	e7cd      	b.n	800a004 <_strtod_l+0x4cc>
 800a068:	d0ed      	beq.n	800a046 <_strtod_l+0x50e>
 800a06a:	4276      	negs	r6, r6
 800a06c:	f016 020f 	ands.w	r2, r6, #15
 800a070:	d00a      	beq.n	800a088 <_strtod_l+0x550>
 800a072:	4b15      	ldr	r3, [pc, #84]	; (800a0c8 <_strtod_l+0x590>)
 800a074:	4640      	mov	r0, r8
 800a076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a07a:	4649      	mov	r1, r9
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	f7f6 fc7e 	bl	8000980 <__aeabi_ddiv>
 800a084:	4680      	mov	r8, r0
 800a086:	4689      	mov	r9, r1
 800a088:	1136      	asrs	r6, r6, #4
 800a08a:	d0dc      	beq.n	800a046 <_strtod_l+0x50e>
 800a08c:	2e1f      	cmp	r6, #31
 800a08e:	dd23      	ble.n	800a0d8 <_strtod_l+0x5a0>
 800a090:	f04f 0b00 	mov.w	fp, #0
 800a094:	f8cd b010 	str.w	fp, [sp, #16]
 800a098:	f8cd b020 	str.w	fp, [sp, #32]
 800a09c:	f8cd b018 	str.w	fp, [sp, #24]
 800a0a0:	2322      	movs	r3, #34	; 0x22
 800a0a2:	f04f 0800 	mov.w	r8, #0
 800a0a6:	f04f 0900 	mov.w	r9, #0
 800a0aa:	f8ca 3000 	str.w	r3, [sl]
 800a0ae:	e789      	b.n	8009fc4 <_strtod_l+0x48c>
 800a0b0:	0800d8d5 	.word	0x0800d8d5
 800a0b4:	0800d918 	.word	0x0800d918
 800a0b8:	0800d8cd 	.word	0x0800d8cd
 800a0bc:	0800db0c 	.word	0x0800db0c
 800a0c0:	7ff00000 	.word	0x7ff00000
 800a0c4:	0800da07 	.word	0x0800da07
 800a0c8:	0800dce8 	.word	0x0800dce8
 800a0cc:	0800dcc0 	.word	0x0800dcc0
 800a0d0:	7ca00000 	.word	0x7ca00000
 800a0d4:	7fefffff 	.word	0x7fefffff
 800a0d8:	f016 0310 	ands.w	r3, r6, #16
 800a0dc:	bf18      	it	ne
 800a0de:	236a      	movne	r3, #106	; 0x6a
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	9305      	str	r3, [sp, #20]
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	4fb0      	ldr	r7, [pc, #704]	; (800a3ac <_strtod_l+0x874>)
 800a0ea:	07f2      	lsls	r2, r6, #31
 800a0ec:	d504      	bpl.n	800a0f8 <_strtod_l+0x5c0>
 800a0ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0f2:	f7f6 fb1b 	bl	800072c <__aeabi_dmul>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	1076      	asrs	r6, r6, #1
 800a0fa:	f107 0708 	add.w	r7, r7, #8
 800a0fe:	d1f4      	bne.n	800a0ea <_strtod_l+0x5b2>
 800a100:	b10b      	cbz	r3, 800a106 <_strtod_l+0x5ce>
 800a102:	4680      	mov	r8, r0
 800a104:	4689      	mov	r9, r1
 800a106:	9b05      	ldr	r3, [sp, #20]
 800a108:	b1c3      	cbz	r3, 800a13c <_strtod_l+0x604>
 800a10a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a10e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a112:	2b00      	cmp	r3, #0
 800a114:	4649      	mov	r1, r9
 800a116:	dd11      	ble.n	800a13c <_strtod_l+0x604>
 800a118:	2b1f      	cmp	r3, #31
 800a11a:	f340 8127 	ble.w	800a36c <_strtod_l+0x834>
 800a11e:	2b34      	cmp	r3, #52	; 0x34
 800a120:	bfd8      	it	le
 800a122:	f04f 33ff 	movle.w	r3, #4294967295
 800a126:	f04f 0800 	mov.w	r8, #0
 800a12a:	bfcf      	iteee	gt
 800a12c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a130:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a134:	fa03 f202 	lslle.w	r2, r3, r2
 800a138:	ea02 0901 	andle.w	r9, r2, r1
 800a13c:	2200      	movs	r2, #0
 800a13e:	2300      	movs	r3, #0
 800a140:	4640      	mov	r0, r8
 800a142:	4649      	mov	r1, r9
 800a144:	f7f6 fd5a 	bl	8000bfc <__aeabi_dcmpeq>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d1a1      	bne.n	800a090 <_strtod_l+0x558>
 800a14c:	9b06      	ldr	r3, [sp, #24]
 800a14e:	465a      	mov	r2, fp
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	4650      	mov	r0, sl
 800a154:	4623      	mov	r3, r4
 800a156:	9908      	ldr	r1, [sp, #32]
 800a158:	f002 f980 	bl	800c45c <__s2b>
 800a15c:	9008      	str	r0, [sp, #32]
 800a15e:	2800      	cmp	r0, #0
 800a160:	f43f af21 	beq.w	8009fa6 <_strtod_l+0x46e>
 800a164:	9b04      	ldr	r3, [sp, #16]
 800a166:	f04f 0b00 	mov.w	fp, #0
 800a16a:	1b5d      	subs	r5, r3, r5
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	f8cd b010 	str.w	fp, [sp, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	bfb4      	ite	lt
 800a176:	462b      	movlt	r3, r5
 800a178:	2300      	movge	r3, #0
 800a17a:	930e      	str	r3, [sp, #56]	; 0x38
 800a17c:	9b07      	ldr	r3, [sp, #28]
 800a17e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a182:	9314      	str	r3, [sp, #80]	; 0x50
 800a184:	9b08      	ldr	r3, [sp, #32]
 800a186:	4650      	mov	r0, sl
 800a188:	6859      	ldr	r1, [r3, #4]
 800a18a:	f002 f8bf 	bl	800c30c <_Balloc>
 800a18e:	9006      	str	r0, [sp, #24]
 800a190:	2800      	cmp	r0, #0
 800a192:	f43f af10 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a196:	9b08      	ldr	r3, [sp, #32]
 800a198:	300c      	adds	r0, #12
 800a19a:	691a      	ldr	r2, [r3, #16]
 800a19c:	f103 010c 	add.w	r1, r3, #12
 800a1a0:	3202      	adds	r2, #2
 800a1a2:	0092      	lsls	r2, r2, #2
 800a1a4:	f7fe fd5a 	bl	8008c5c <memcpy>
 800a1a8:	ab1c      	add	r3, sp, #112	; 0x70
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	ab1b      	add	r3, sp, #108	; 0x6c
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	464b      	mov	r3, r9
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a1ba:	f002 fc91 	bl	800cae0 <__d2b>
 800a1be:	901a      	str	r0, [sp, #104]	; 0x68
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	f43f aef8 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	4650      	mov	r0, sl
 800a1ca:	f002 f9df 	bl	800c58c <__i2b>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	9004      	str	r0, [sp, #16]
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	f43f aeef 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a1d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a1da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a1dc:	2d00      	cmp	r5, #0
 800a1de:	bfab      	itete	ge
 800a1e0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a1e2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a1e4:	18ee      	addge	r6, r5, r3
 800a1e6:	1b5c      	sublt	r4, r3, r5
 800a1e8:	9b05      	ldr	r3, [sp, #20]
 800a1ea:	bfa8      	it	ge
 800a1ec:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a1ee:	eba5 0503 	sub.w	r5, r5, r3
 800a1f2:	4415      	add	r5, r2
 800a1f4:	4b6e      	ldr	r3, [pc, #440]	; (800a3b0 <_strtod_l+0x878>)
 800a1f6:	f105 35ff 	add.w	r5, r5, #4294967295
 800a1fa:	bfb8      	it	lt
 800a1fc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a1fe:	429d      	cmp	r5, r3
 800a200:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a204:	f280 80c4 	bge.w	800a390 <_strtod_l+0x858>
 800a208:	1b5b      	subs	r3, r3, r5
 800a20a:	2b1f      	cmp	r3, #31
 800a20c:	f04f 0701 	mov.w	r7, #1
 800a210:	eba2 0203 	sub.w	r2, r2, r3
 800a214:	f300 80b1 	bgt.w	800a37a <_strtod_l+0x842>
 800a218:	2500      	movs	r5, #0
 800a21a:	fa07 f303 	lsl.w	r3, r7, r3
 800a21e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a220:	18b7      	adds	r7, r6, r2
 800a222:	9b05      	ldr	r3, [sp, #20]
 800a224:	42be      	cmp	r6, r7
 800a226:	4414      	add	r4, r2
 800a228:	441c      	add	r4, r3
 800a22a:	4633      	mov	r3, r6
 800a22c:	bfa8      	it	ge
 800a22e:	463b      	movge	r3, r7
 800a230:	42a3      	cmp	r3, r4
 800a232:	bfa8      	it	ge
 800a234:	4623      	movge	r3, r4
 800a236:	2b00      	cmp	r3, #0
 800a238:	bfc2      	ittt	gt
 800a23a:	1aff      	subgt	r7, r7, r3
 800a23c:	1ae4      	subgt	r4, r4, r3
 800a23e:	1af6      	subgt	r6, r6, r3
 800a240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a242:	2b00      	cmp	r3, #0
 800a244:	dd17      	ble.n	800a276 <_strtod_l+0x73e>
 800a246:	461a      	mov	r2, r3
 800a248:	4650      	mov	r0, sl
 800a24a:	9904      	ldr	r1, [sp, #16]
 800a24c:	f002 fa5c 	bl	800c708 <__pow5mult>
 800a250:	9004      	str	r0, [sp, #16]
 800a252:	2800      	cmp	r0, #0
 800a254:	f43f aeaf 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a258:	4601      	mov	r1, r0
 800a25a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a25c:	4650      	mov	r0, sl
 800a25e:	f002 f9ab 	bl	800c5b8 <__multiply>
 800a262:	9009      	str	r0, [sp, #36]	; 0x24
 800a264:	2800      	cmp	r0, #0
 800a266:	f43f aea6 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a26a:	4650      	mov	r0, sl
 800a26c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a26e:	f002 f88d 	bl	800c38c <_Bfree>
 800a272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a274:	931a      	str	r3, [sp, #104]	; 0x68
 800a276:	2f00      	cmp	r7, #0
 800a278:	f300 808e 	bgt.w	800a398 <_strtod_l+0x860>
 800a27c:	9b07      	ldr	r3, [sp, #28]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	dd08      	ble.n	800a294 <_strtod_l+0x75c>
 800a282:	4650      	mov	r0, sl
 800a284:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a286:	9906      	ldr	r1, [sp, #24]
 800a288:	f002 fa3e 	bl	800c708 <__pow5mult>
 800a28c:	9006      	str	r0, [sp, #24]
 800a28e:	2800      	cmp	r0, #0
 800a290:	f43f ae91 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a294:	2c00      	cmp	r4, #0
 800a296:	dd08      	ble.n	800a2aa <_strtod_l+0x772>
 800a298:	4622      	mov	r2, r4
 800a29a:	4650      	mov	r0, sl
 800a29c:	9906      	ldr	r1, [sp, #24]
 800a29e:	f002 fa8d 	bl	800c7bc <__lshift>
 800a2a2:	9006      	str	r0, [sp, #24]
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	f43f ae86 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a2aa:	2e00      	cmp	r6, #0
 800a2ac:	dd08      	ble.n	800a2c0 <_strtod_l+0x788>
 800a2ae:	4632      	mov	r2, r6
 800a2b0:	4650      	mov	r0, sl
 800a2b2:	9904      	ldr	r1, [sp, #16]
 800a2b4:	f002 fa82 	bl	800c7bc <__lshift>
 800a2b8:	9004      	str	r0, [sp, #16]
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	f43f ae7b 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a2c0:	4650      	mov	r0, sl
 800a2c2:	9a06      	ldr	r2, [sp, #24]
 800a2c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a2c6:	f002 fb05 	bl	800c8d4 <__mdiff>
 800a2ca:	4683      	mov	fp, r0
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	f43f ae72 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a2d2:	2400      	movs	r4, #0
 800a2d4:	68c3      	ldr	r3, [r0, #12]
 800a2d6:	9904      	ldr	r1, [sp, #16]
 800a2d8:	60c4      	str	r4, [r0, #12]
 800a2da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2dc:	f002 fade 	bl	800c89c <__mcmp>
 800a2e0:	42a0      	cmp	r0, r4
 800a2e2:	da6b      	bge.n	800a3bc <_strtod_l+0x884>
 800a2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2e6:	ea53 0308 	orrs.w	r3, r3, r8
 800a2ea:	f040 8091 	bne.w	800a410 <_strtod_l+0x8d8>
 800a2ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f040 808c 	bne.w	800a410 <_strtod_l+0x8d8>
 800a2f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2fc:	0d1b      	lsrs	r3, r3, #20
 800a2fe:	051b      	lsls	r3, r3, #20
 800a300:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a304:	f240 8084 	bls.w	800a410 <_strtod_l+0x8d8>
 800a308:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a30c:	b91b      	cbnz	r3, 800a316 <_strtod_l+0x7de>
 800a30e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a312:	2b01      	cmp	r3, #1
 800a314:	dd7c      	ble.n	800a410 <_strtod_l+0x8d8>
 800a316:	4659      	mov	r1, fp
 800a318:	2201      	movs	r2, #1
 800a31a:	4650      	mov	r0, sl
 800a31c:	f002 fa4e 	bl	800c7bc <__lshift>
 800a320:	9904      	ldr	r1, [sp, #16]
 800a322:	4683      	mov	fp, r0
 800a324:	f002 faba 	bl	800c89c <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	dd71      	ble.n	800a410 <_strtod_l+0x8d8>
 800a32c:	9905      	ldr	r1, [sp, #20]
 800a32e:	464b      	mov	r3, r9
 800a330:	4a20      	ldr	r2, [pc, #128]	; (800a3b4 <_strtod_l+0x87c>)
 800a332:	2900      	cmp	r1, #0
 800a334:	f000 808c 	beq.w	800a450 <_strtod_l+0x918>
 800a338:	ea02 0109 	and.w	r1, r2, r9
 800a33c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a340:	f300 8086 	bgt.w	800a450 <_strtod_l+0x918>
 800a344:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a348:	f77f aeaa 	ble.w	800a0a0 <_strtod_l+0x568>
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	4b19      	ldr	r3, [pc, #100]	; (800a3b8 <_strtod_l+0x880>)
 800a352:	2200      	movs	r2, #0
 800a354:	f7f6 f9ea 	bl	800072c <__aeabi_dmul>
 800a358:	460b      	mov	r3, r1
 800a35a:	4303      	orrs	r3, r0
 800a35c:	bf08      	it	eq
 800a35e:	2322      	moveq	r3, #34	; 0x22
 800a360:	4680      	mov	r8, r0
 800a362:	4689      	mov	r9, r1
 800a364:	bf08      	it	eq
 800a366:	f8ca 3000 	streq.w	r3, [sl]
 800a36a:	e62f      	b.n	8009fcc <_strtod_l+0x494>
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	ea03 0808 	and.w	r8, r3, r8
 800a378:	e6e0      	b.n	800a13c <_strtod_l+0x604>
 800a37a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a37e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a382:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a386:	35e2      	adds	r5, #226	; 0xe2
 800a388:	fa07 f505 	lsl.w	r5, r7, r5
 800a38c:	970f      	str	r7, [sp, #60]	; 0x3c
 800a38e:	e747      	b.n	800a220 <_strtod_l+0x6e8>
 800a390:	2301      	movs	r3, #1
 800a392:	2500      	movs	r5, #0
 800a394:	930f      	str	r3, [sp, #60]	; 0x3c
 800a396:	e743      	b.n	800a220 <_strtod_l+0x6e8>
 800a398:	463a      	mov	r2, r7
 800a39a:	4650      	mov	r0, sl
 800a39c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a39e:	f002 fa0d 	bl	800c7bc <__lshift>
 800a3a2:	901a      	str	r0, [sp, #104]	; 0x68
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	f47f af69 	bne.w	800a27c <_strtod_l+0x744>
 800a3aa:	e604      	b.n	8009fb6 <_strtod_l+0x47e>
 800a3ac:	0800d930 	.word	0x0800d930
 800a3b0:	fffffc02 	.word	0xfffffc02
 800a3b4:	7ff00000 	.word	0x7ff00000
 800a3b8:	39500000 	.word	0x39500000
 800a3bc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a3c0:	d165      	bne.n	800a48e <_strtod_l+0x956>
 800a3c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3c8:	b35a      	cbz	r2, 800a422 <_strtod_l+0x8ea>
 800a3ca:	4a99      	ldr	r2, [pc, #612]	; (800a630 <_strtod_l+0xaf8>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d12b      	bne.n	800a428 <_strtod_l+0x8f0>
 800a3d0:	9b05      	ldr	r3, [sp, #20]
 800a3d2:	4641      	mov	r1, r8
 800a3d4:	b303      	cbz	r3, 800a418 <_strtod_l+0x8e0>
 800a3d6:	464a      	mov	r2, r9
 800a3d8:	4b96      	ldr	r3, [pc, #600]	; (800a634 <_strtod_l+0xafc>)
 800a3da:	4013      	ands	r3, r2
 800a3dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e4:	d81b      	bhi.n	800a41e <_strtod_l+0x8e6>
 800a3e6:	0d1b      	lsrs	r3, r3, #20
 800a3e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f0:	4299      	cmp	r1, r3
 800a3f2:	d119      	bne.n	800a428 <_strtod_l+0x8f0>
 800a3f4:	4b90      	ldr	r3, [pc, #576]	; (800a638 <_strtod_l+0xb00>)
 800a3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d102      	bne.n	800a402 <_strtod_l+0x8ca>
 800a3fc:	3101      	adds	r1, #1
 800a3fe:	f43f adda 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a402:	f04f 0800 	mov.w	r8, #0
 800a406:	4b8b      	ldr	r3, [pc, #556]	; (800a634 <_strtod_l+0xafc>)
 800a408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a40a:	401a      	ands	r2, r3
 800a40c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a410:	9b05      	ldr	r3, [sp, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d19a      	bne.n	800a34c <_strtod_l+0x814>
 800a416:	e5d9      	b.n	8009fcc <_strtod_l+0x494>
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	e7e8      	b.n	800a3f0 <_strtod_l+0x8b8>
 800a41e:	4613      	mov	r3, r2
 800a420:	e7e6      	b.n	800a3f0 <_strtod_l+0x8b8>
 800a422:	ea53 0308 	orrs.w	r3, r3, r8
 800a426:	d081      	beq.n	800a32c <_strtod_l+0x7f4>
 800a428:	b1e5      	cbz	r5, 800a464 <_strtod_l+0x92c>
 800a42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42c:	421d      	tst	r5, r3
 800a42e:	d0ef      	beq.n	800a410 <_strtod_l+0x8d8>
 800a430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a432:	4640      	mov	r0, r8
 800a434:	4649      	mov	r1, r9
 800a436:	9a05      	ldr	r2, [sp, #20]
 800a438:	b1c3      	cbz	r3, 800a46c <_strtod_l+0x934>
 800a43a:	f7ff fb59 	bl	8009af0 <sulp>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a446:	f7f5 ffbb 	bl	80003c0 <__adddf3>
 800a44a:	4680      	mov	r8, r0
 800a44c:	4689      	mov	r9, r1
 800a44e:	e7df      	b.n	800a410 <_strtod_l+0x8d8>
 800a450:	4013      	ands	r3, r2
 800a452:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a456:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a45a:	f04f 38ff 	mov.w	r8, #4294967295
 800a45e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a462:	e7d5      	b.n	800a410 <_strtod_l+0x8d8>
 800a464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a466:	ea13 0f08 	tst.w	r3, r8
 800a46a:	e7e0      	b.n	800a42e <_strtod_l+0x8f6>
 800a46c:	f7ff fb40 	bl	8009af0 <sulp>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a478:	f7f5 ffa0 	bl	80003bc <__aeabi_dsub>
 800a47c:	2200      	movs	r2, #0
 800a47e:	2300      	movs	r3, #0
 800a480:	4680      	mov	r8, r0
 800a482:	4689      	mov	r9, r1
 800a484:	f7f6 fbba 	bl	8000bfc <__aeabi_dcmpeq>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d0c1      	beq.n	800a410 <_strtod_l+0x8d8>
 800a48c:	e608      	b.n	800a0a0 <_strtod_l+0x568>
 800a48e:	4658      	mov	r0, fp
 800a490:	9904      	ldr	r1, [sp, #16]
 800a492:	f002 fb81 	bl	800cb98 <__ratio>
 800a496:	2200      	movs	r2, #0
 800a498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a49c:	4606      	mov	r6, r0
 800a49e:	460f      	mov	r7, r1
 800a4a0:	f7f6 fbc0 	bl	8000c24 <__aeabi_dcmple>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d070      	beq.n	800a58a <_strtod_l+0xa52>
 800a4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d042      	beq.n	800a534 <_strtod_l+0x9fc>
 800a4ae:	2600      	movs	r6, #0
 800a4b0:	4f62      	ldr	r7, [pc, #392]	; (800a63c <_strtod_l+0xb04>)
 800a4b2:	4d62      	ldr	r5, [pc, #392]	; (800a63c <_strtod_l+0xb04>)
 800a4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4ba:	0d1b      	lsrs	r3, r3, #20
 800a4bc:	051b      	lsls	r3, r3, #20
 800a4be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4c2:	4b5f      	ldr	r3, [pc, #380]	; (800a640 <_strtod_l+0xb08>)
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	f040 80c3 	bne.w	800a650 <_strtod_l+0xb18>
 800a4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	f002 fa8a 	bl	800c9ec <__ulp>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4630      	mov	r0, r6
 800a4de:	4639      	mov	r1, r7
 800a4e0:	f7f6 f924 	bl	800072c <__aeabi_dmul>
 800a4e4:	4642      	mov	r2, r8
 800a4e6:	464b      	mov	r3, r9
 800a4e8:	f7f5 ff6a 	bl	80003c0 <__adddf3>
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4951      	ldr	r1, [pc, #324]	; (800a634 <_strtod_l+0xafc>)
 800a4f0:	4a54      	ldr	r2, [pc, #336]	; (800a644 <_strtod_l+0xb0c>)
 800a4f2:	4019      	ands	r1, r3
 800a4f4:	4291      	cmp	r1, r2
 800a4f6:	4680      	mov	r8, r0
 800a4f8:	d95d      	bls.n	800a5b6 <_strtod_l+0xa7e>
 800a4fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4fc:	4b4e      	ldr	r3, [pc, #312]	; (800a638 <_strtod_l+0xb00>)
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d103      	bne.n	800a50a <_strtod_l+0x9d2>
 800a502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a504:	3301      	adds	r3, #1
 800a506:	f43f ad56 	beq.w	8009fb6 <_strtod_l+0x47e>
 800a50a:	f04f 38ff 	mov.w	r8, #4294967295
 800a50e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a638 <_strtod_l+0xb00>
 800a512:	4650      	mov	r0, sl
 800a514:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a516:	f001 ff39 	bl	800c38c <_Bfree>
 800a51a:	4650      	mov	r0, sl
 800a51c:	9906      	ldr	r1, [sp, #24]
 800a51e:	f001 ff35 	bl	800c38c <_Bfree>
 800a522:	4650      	mov	r0, sl
 800a524:	9904      	ldr	r1, [sp, #16]
 800a526:	f001 ff31 	bl	800c38c <_Bfree>
 800a52a:	4659      	mov	r1, fp
 800a52c:	4650      	mov	r0, sl
 800a52e:	f001 ff2d 	bl	800c38c <_Bfree>
 800a532:	e627      	b.n	800a184 <_strtod_l+0x64c>
 800a534:	f1b8 0f00 	cmp.w	r8, #0
 800a538:	d119      	bne.n	800a56e <_strtod_l+0xa36>
 800a53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a540:	b9e3      	cbnz	r3, 800a57c <_strtod_l+0xa44>
 800a542:	2200      	movs	r2, #0
 800a544:	4630      	mov	r0, r6
 800a546:	4639      	mov	r1, r7
 800a548:	4b3c      	ldr	r3, [pc, #240]	; (800a63c <_strtod_l+0xb04>)
 800a54a:	f7f6 fb61 	bl	8000c10 <__aeabi_dcmplt>
 800a54e:	b9c8      	cbnz	r0, 800a584 <_strtod_l+0xa4c>
 800a550:	2200      	movs	r2, #0
 800a552:	4630      	mov	r0, r6
 800a554:	4639      	mov	r1, r7
 800a556:	4b3c      	ldr	r3, [pc, #240]	; (800a648 <_strtod_l+0xb10>)
 800a558:	f7f6 f8e8 	bl	800072c <__aeabi_dmul>
 800a55c:	4604      	mov	r4, r0
 800a55e:	460d      	mov	r5, r1
 800a560:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a564:	9416      	str	r4, [sp, #88]	; 0x58
 800a566:	9317      	str	r3, [sp, #92]	; 0x5c
 800a568:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a56c:	e7a2      	b.n	800a4b4 <_strtod_l+0x97c>
 800a56e:	f1b8 0f01 	cmp.w	r8, #1
 800a572:	d103      	bne.n	800a57c <_strtod_l+0xa44>
 800a574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a576:	2b00      	cmp	r3, #0
 800a578:	f43f ad92 	beq.w	800a0a0 <_strtod_l+0x568>
 800a57c:	2600      	movs	r6, #0
 800a57e:	2400      	movs	r4, #0
 800a580:	4f32      	ldr	r7, [pc, #200]	; (800a64c <_strtod_l+0xb14>)
 800a582:	e796      	b.n	800a4b2 <_strtod_l+0x97a>
 800a584:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a586:	4d30      	ldr	r5, [pc, #192]	; (800a648 <_strtod_l+0xb10>)
 800a588:	e7ea      	b.n	800a560 <_strtod_l+0xa28>
 800a58a:	4b2f      	ldr	r3, [pc, #188]	; (800a648 <_strtod_l+0xb10>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	4630      	mov	r0, r6
 800a590:	4639      	mov	r1, r7
 800a592:	f7f6 f8cb 	bl	800072c <__aeabi_dmul>
 800a596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a598:	4604      	mov	r4, r0
 800a59a:	460d      	mov	r5, r1
 800a59c:	b933      	cbnz	r3, 800a5ac <_strtod_l+0xa74>
 800a59e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5a2:	9010      	str	r0, [sp, #64]	; 0x40
 800a5a4:	9311      	str	r3, [sp, #68]	; 0x44
 800a5a6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a5aa:	e783      	b.n	800a4b4 <_strtod_l+0x97c>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a5b4:	e7f7      	b.n	800a5a6 <_strtod_l+0xa6e>
 800a5b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a5ba:	9b05      	ldr	r3, [sp, #20]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1a8      	bne.n	800a512 <_strtod_l+0x9da>
 800a5c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5c6:	0d1b      	lsrs	r3, r3, #20
 800a5c8:	051b      	lsls	r3, r3, #20
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d1a1      	bne.n	800a512 <_strtod_l+0x9da>
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f7f6 fd9d 	bl	8001110 <__aeabi_d2lz>
 800a5d6:	f7f6 f87b 	bl	80006d0 <__aeabi_l2d>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4620      	mov	r0, r4
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	f7f5 feeb 	bl	80003bc <__aeabi_dsub>
 800a5e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5ec:	ea43 0308 	orr.w	r3, r3, r8
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	460d      	mov	r5, r1
 800a5f6:	d066      	beq.n	800a6c6 <_strtod_l+0xb8e>
 800a5f8:	a309      	add	r3, pc, #36	; (adr r3, 800a620 <_strtod_l+0xae8>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f7f6 fb07 	bl	8000c10 <__aeabi_dcmplt>
 800a602:	2800      	cmp	r0, #0
 800a604:	f47f ace2 	bne.w	8009fcc <_strtod_l+0x494>
 800a608:	a307      	add	r3, pc, #28	; (adr r3, 800a628 <_strtod_l+0xaf0>)
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f6 fb1b 	bl	8000c4c <__aeabi_dcmpgt>
 800a616:	2800      	cmp	r0, #0
 800a618:	f43f af7b 	beq.w	800a512 <_strtod_l+0x9da>
 800a61c:	e4d6      	b.n	8009fcc <_strtod_l+0x494>
 800a61e:	bf00      	nop
 800a620:	94a03595 	.word	0x94a03595
 800a624:	3fdfffff 	.word	0x3fdfffff
 800a628:	35afe535 	.word	0x35afe535
 800a62c:	3fe00000 	.word	0x3fe00000
 800a630:	000fffff 	.word	0x000fffff
 800a634:	7ff00000 	.word	0x7ff00000
 800a638:	7fefffff 	.word	0x7fefffff
 800a63c:	3ff00000 	.word	0x3ff00000
 800a640:	7fe00000 	.word	0x7fe00000
 800a644:	7c9fffff 	.word	0x7c9fffff
 800a648:	3fe00000 	.word	0x3fe00000
 800a64c:	bff00000 	.word	0xbff00000
 800a650:	9b05      	ldr	r3, [sp, #20]
 800a652:	b313      	cbz	r3, 800a69a <_strtod_l+0xb62>
 800a654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a656:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a65a:	d81e      	bhi.n	800a69a <_strtod_l+0xb62>
 800a65c:	a326      	add	r3, pc, #152	; (adr r3, 800a6f8 <_strtod_l+0xbc0>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	4620      	mov	r0, r4
 800a664:	4629      	mov	r1, r5
 800a666:	f7f6 fadd 	bl	8000c24 <__aeabi_dcmple>
 800a66a:	b190      	cbz	r0, 800a692 <_strtod_l+0xb5a>
 800a66c:	4629      	mov	r1, r5
 800a66e:	4620      	mov	r0, r4
 800a670:	f7f6 fb34 	bl	8000cdc <__aeabi_d2uiz>
 800a674:	2801      	cmp	r0, #1
 800a676:	bf38      	it	cc
 800a678:	2001      	movcc	r0, #1
 800a67a:	f7f5 ffdd 	bl	8000638 <__aeabi_ui2d>
 800a67e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a680:	4604      	mov	r4, r0
 800a682:	460d      	mov	r5, r1
 800a684:	b9d3      	cbnz	r3, 800a6bc <_strtod_l+0xb84>
 800a686:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a68a:	9012      	str	r0, [sp, #72]	; 0x48
 800a68c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a68e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a692:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a694:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a698:	1a9f      	subs	r7, r3, r2
 800a69a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a69e:	f002 f9a5 	bl	800c9ec <__ulp>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	f7f6 f83f 	bl	800072c <__aeabi_dmul>
 800a6ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6b2:	f7f5 fe85 	bl	80003c0 <__adddf3>
 800a6b6:	4680      	mov	r8, r0
 800a6b8:	4689      	mov	r9, r1
 800a6ba:	e77e      	b.n	800a5ba <_strtod_l+0xa82>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a6c4:	e7e3      	b.n	800a68e <_strtod_l+0xb56>
 800a6c6:	a30e      	add	r3, pc, #56	; (adr r3, 800a700 <_strtod_l+0xbc8>)
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	f7f6 faa0 	bl	8000c10 <__aeabi_dcmplt>
 800a6d0:	e7a1      	b.n	800a616 <_strtod_l+0xade>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a6d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	f7ff ba71 	b.w	8009bc2 <_strtod_l+0x8a>
 800a6e0:	2a65      	cmp	r2, #101	; 0x65
 800a6e2:	f43f ab63 	beq.w	8009dac <_strtod_l+0x274>
 800a6e6:	2a45      	cmp	r2, #69	; 0x45
 800a6e8:	f43f ab60 	beq.w	8009dac <_strtod_l+0x274>
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	f7ff bb95 	b.w	8009e1c <_strtod_l+0x2e4>
 800a6f2:	bf00      	nop
 800a6f4:	f3af 8000 	nop.w
 800a6f8:	ffc00000 	.word	0xffc00000
 800a6fc:	41dfffff 	.word	0x41dfffff
 800a700:	94a03595 	.word	0x94a03595
 800a704:	3fcfffff 	.word	0x3fcfffff

0800a708 <_strtod_r>:
 800a708:	4b01      	ldr	r3, [pc, #4]	; (800a710 <_strtod_r+0x8>)
 800a70a:	f7ff ba15 	b.w	8009b38 <_strtod_l>
 800a70e:	bf00      	nop
 800a710:	20000678 	.word	0x20000678

0800a714 <strtok>:
 800a714:	4b16      	ldr	r3, [pc, #88]	; (800a770 <strtok+0x5c>)
 800a716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71a:	681f      	ldr	r7, [r3, #0]
 800a71c:	4605      	mov	r5, r0
 800a71e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a720:	460e      	mov	r6, r1
 800a722:	b9ec      	cbnz	r4, 800a760 <strtok+0x4c>
 800a724:	2050      	movs	r0, #80	; 0x50
 800a726:	f001 fdc9 	bl	800c2bc <malloc>
 800a72a:	4602      	mov	r2, r0
 800a72c:	65b8      	str	r0, [r7, #88]	; 0x58
 800a72e:	b920      	cbnz	r0, 800a73a <strtok+0x26>
 800a730:	2157      	movs	r1, #87	; 0x57
 800a732:	4b10      	ldr	r3, [pc, #64]	; (800a774 <strtok+0x60>)
 800a734:	4810      	ldr	r0, [pc, #64]	; (800a778 <strtok+0x64>)
 800a736:	f000 f991 	bl	800aa5c <__assert_func>
 800a73a:	e9c0 4400 	strd	r4, r4, [r0]
 800a73e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a742:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a746:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a74a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a74e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a752:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a756:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a75a:	6184      	str	r4, [r0, #24]
 800a75c:	7704      	strb	r4, [r0, #28]
 800a75e:	6244      	str	r4, [r0, #36]	; 0x24
 800a760:	4631      	mov	r1, r6
 800a762:	4628      	mov	r0, r5
 800a764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a766:	2301      	movs	r3, #1
 800a768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a76c:	f000 b806 	b.w	800a77c <__strtok_r>
 800a770:	20000610 	.word	0x20000610
 800a774:	0800d958 	.word	0x0800d958
 800a778:	0800d96f 	.word	0x0800d96f

0800a77c <__strtok_r>:
 800a77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a77e:	b908      	cbnz	r0, 800a784 <__strtok_r+0x8>
 800a780:	6810      	ldr	r0, [r2, #0]
 800a782:	b188      	cbz	r0, 800a7a8 <__strtok_r+0x2c>
 800a784:	4604      	mov	r4, r0
 800a786:	460f      	mov	r7, r1
 800a788:	4620      	mov	r0, r4
 800a78a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a78e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a792:	b91e      	cbnz	r6, 800a79c <__strtok_r+0x20>
 800a794:	b965      	cbnz	r5, 800a7b0 <__strtok_r+0x34>
 800a796:	4628      	mov	r0, r5
 800a798:	6015      	str	r5, [r2, #0]
 800a79a:	e005      	b.n	800a7a8 <__strtok_r+0x2c>
 800a79c:	42b5      	cmp	r5, r6
 800a79e:	d1f6      	bne.n	800a78e <__strtok_r+0x12>
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1f0      	bne.n	800a786 <__strtok_r+0xa>
 800a7a4:	6014      	str	r4, [r2, #0]
 800a7a6:	7003      	strb	r3, [r0, #0]
 800a7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7aa:	461c      	mov	r4, r3
 800a7ac:	e00c      	b.n	800a7c8 <__strtok_r+0x4c>
 800a7ae:	b915      	cbnz	r5, 800a7b6 <__strtok_r+0x3a>
 800a7b0:	460e      	mov	r6, r1
 800a7b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a7ba:	42ab      	cmp	r3, r5
 800a7bc:	d1f7      	bne.n	800a7ae <__strtok_r+0x32>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d0f3      	beq.n	800a7aa <__strtok_r+0x2e>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a7c8:	6014      	str	r4, [r2, #0]
 800a7ca:	e7ed      	b.n	800a7a8 <__strtok_r+0x2c>

0800a7cc <_strtol_l.constprop.0>:
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d2:	4680      	mov	r8, r0
 800a7d4:	d001      	beq.n	800a7da <_strtol_l.constprop.0+0xe>
 800a7d6:	2b24      	cmp	r3, #36	; 0x24
 800a7d8:	d906      	bls.n	800a7e8 <_strtol_l.constprop.0+0x1c>
 800a7da:	f7fe fa15 	bl	8008c08 <__errno>
 800a7de:	2316      	movs	r3, #22
 800a7e0:	6003      	str	r3, [r0, #0]
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e8:	460d      	mov	r5, r1
 800a7ea:	4f35      	ldr	r7, [pc, #212]	; (800a8c0 <_strtol_l.constprop.0+0xf4>)
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f2:	5de6      	ldrb	r6, [r4, r7]
 800a7f4:	f016 0608 	ands.w	r6, r6, #8
 800a7f8:	d1f8      	bne.n	800a7ec <_strtol_l.constprop.0+0x20>
 800a7fa:	2c2d      	cmp	r4, #45	; 0x2d
 800a7fc:	d12f      	bne.n	800a85e <_strtol_l.constprop.0+0x92>
 800a7fe:	2601      	movs	r6, #1
 800a800:	782c      	ldrb	r4, [r5, #0]
 800a802:	1c85      	adds	r5, r0, #2
 800a804:	2b00      	cmp	r3, #0
 800a806:	d057      	beq.n	800a8b8 <_strtol_l.constprop.0+0xec>
 800a808:	2b10      	cmp	r3, #16
 800a80a:	d109      	bne.n	800a820 <_strtol_l.constprop.0+0x54>
 800a80c:	2c30      	cmp	r4, #48	; 0x30
 800a80e:	d107      	bne.n	800a820 <_strtol_l.constprop.0+0x54>
 800a810:	7828      	ldrb	r0, [r5, #0]
 800a812:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a816:	2858      	cmp	r0, #88	; 0x58
 800a818:	d149      	bne.n	800a8ae <_strtol_l.constprop.0+0xe2>
 800a81a:	2310      	movs	r3, #16
 800a81c:	786c      	ldrb	r4, [r5, #1]
 800a81e:	3502      	adds	r5, #2
 800a820:	2700      	movs	r7, #0
 800a822:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a826:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a82a:	fbbe f9f3 	udiv	r9, lr, r3
 800a82e:	4638      	mov	r0, r7
 800a830:	fb03 ea19 	mls	sl, r3, r9, lr
 800a834:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a838:	f1bc 0f09 	cmp.w	ip, #9
 800a83c:	d814      	bhi.n	800a868 <_strtol_l.constprop.0+0x9c>
 800a83e:	4664      	mov	r4, ip
 800a840:	42a3      	cmp	r3, r4
 800a842:	dd22      	ble.n	800a88a <_strtol_l.constprop.0+0xbe>
 800a844:	2f00      	cmp	r7, #0
 800a846:	db1d      	blt.n	800a884 <_strtol_l.constprop.0+0xb8>
 800a848:	4581      	cmp	r9, r0
 800a84a:	d31b      	bcc.n	800a884 <_strtol_l.constprop.0+0xb8>
 800a84c:	d101      	bne.n	800a852 <_strtol_l.constprop.0+0x86>
 800a84e:	45a2      	cmp	sl, r4
 800a850:	db18      	blt.n	800a884 <_strtol_l.constprop.0+0xb8>
 800a852:	2701      	movs	r7, #1
 800a854:	fb00 4003 	mla	r0, r0, r3, r4
 800a858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a85c:	e7ea      	b.n	800a834 <_strtol_l.constprop.0+0x68>
 800a85e:	2c2b      	cmp	r4, #43	; 0x2b
 800a860:	bf04      	itt	eq
 800a862:	782c      	ldrbeq	r4, [r5, #0]
 800a864:	1c85      	addeq	r5, r0, #2
 800a866:	e7cd      	b.n	800a804 <_strtol_l.constprop.0+0x38>
 800a868:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a86c:	f1bc 0f19 	cmp.w	ip, #25
 800a870:	d801      	bhi.n	800a876 <_strtol_l.constprop.0+0xaa>
 800a872:	3c37      	subs	r4, #55	; 0x37
 800a874:	e7e4      	b.n	800a840 <_strtol_l.constprop.0+0x74>
 800a876:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a87a:	f1bc 0f19 	cmp.w	ip, #25
 800a87e:	d804      	bhi.n	800a88a <_strtol_l.constprop.0+0xbe>
 800a880:	3c57      	subs	r4, #87	; 0x57
 800a882:	e7dd      	b.n	800a840 <_strtol_l.constprop.0+0x74>
 800a884:	f04f 37ff 	mov.w	r7, #4294967295
 800a888:	e7e6      	b.n	800a858 <_strtol_l.constprop.0+0x8c>
 800a88a:	2f00      	cmp	r7, #0
 800a88c:	da07      	bge.n	800a89e <_strtol_l.constprop.0+0xd2>
 800a88e:	2322      	movs	r3, #34	; 0x22
 800a890:	4670      	mov	r0, lr
 800a892:	f8c8 3000 	str.w	r3, [r8]
 800a896:	2a00      	cmp	r2, #0
 800a898:	d0a4      	beq.n	800a7e4 <_strtol_l.constprop.0+0x18>
 800a89a:	1e69      	subs	r1, r5, #1
 800a89c:	e005      	b.n	800a8aa <_strtol_l.constprop.0+0xde>
 800a89e:	b106      	cbz	r6, 800a8a2 <_strtol_l.constprop.0+0xd6>
 800a8a0:	4240      	negs	r0, r0
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	d09e      	beq.n	800a7e4 <_strtol_l.constprop.0+0x18>
 800a8a6:	2f00      	cmp	r7, #0
 800a8a8:	d1f7      	bne.n	800a89a <_strtol_l.constprop.0+0xce>
 800a8aa:	6011      	str	r1, [r2, #0]
 800a8ac:	e79a      	b.n	800a7e4 <_strtol_l.constprop.0+0x18>
 800a8ae:	2430      	movs	r4, #48	; 0x30
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1b5      	bne.n	800a820 <_strtol_l.constprop.0+0x54>
 800a8b4:	2308      	movs	r3, #8
 800a8b6:	e7b3      	b.n	800a820 <_strtol_l.constprop.0+0x54>
 800a8b8:	2c30      	cmp	r4, #48	; 0x30
 800a8ba:	d0a9      	beq.n	800a810 <_strtol_l.constprop.0+0x44>
 800a8bc:	230a      	movs	r3, #10
 800a8be:	e7af      	b.n	800a820 <_strtol_l.constprop.0+0x54>
 800a8c0:	0800da09 	.word	0x0800da09

0800a8c4 <_strtol_r>:
 800a8c4:	f7ff bf82 	b.w	800a7cc <_strtol_l.constprop.0>

0800a8c8 <strtol>:
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	460a      	mov	r2, r1
 800a8cc:	4601      	mov	r1, r0
 800a8ce:	4802      	ldr	r0, [pc, #8]	; (800a8d8 <strtol+0x10>)
 800a8d0:	6800      	ldr	r0, [r0, #0]
 800a8d2:	f7ff bf7b 	b.w	800a7cc <_strtol_l.constprop.0>
 800a8d6:	bf00      	nop
 800a8d8:	20000610 	.word	0x20000610

0800a8dc <__swbuf_r>:
 800a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8de:	460e      	mov	r6, r1
 800a8e0:	4614      	mov	r4, r2
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	b118      	cbz	r0, 800a8ee <__swbuf_r+0x12>
 800a8e6:	6983      	ldr	r3, [r0, #24]
 800a8e8:	b90b      	cbnz	r3, 800a8ee <__swbuf_r+0x12>
 800a8ea:	f001 f865 	bl	800b9b8 <__sinit>
 800a8ee:	4b21      	ldr	r3, [pc, #132]	; (800a974 <__swbuf_r+0x98>)
 800a8f0:	429c      	cmp	r4, r3
 800a8f2:	d12b      	bne.n	800a94c <__swbuf_r+0x70>
 800a8f4:	686c      	ldr	r4, [r5, #4]
 800a8f6:	69a3      	ldr	r3, [r4, #24]
 800a8f8:	60a3      	str	r3, [r4, #8]
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	071a      	lsls	r2, r3, #28
 800a8fe:	d52f      	bpl.n	800a960 <__swbuf_r+0x84>
 800a900:	6923      	ldr	r3, [r4, #16]
 800a902:	b36b      	cbz	r3, 800a960 <__swbuf_r+0x84>
 800a904:	6923      	ldr	r3, [r4, #16]
 800a906:	6820      	ldr	r0, [r4, #0]
 800a908:	b2f6      	uxtb	r6, r6
 800a90a:	1ac0      	subs	r0, r0, r3
 800a90c:	6963      	ldr	r3, [r4, #20]
 800a90e:	4637      	mov	r7, r6
 800a910:	4283      	cmp	r3, r0
 800a912:	dc04      	bgt.n	800a91e <__swbuf_r+0x42>
 800a914:	4621      	mov	r1, r4
 800a916:	4628      	mov	r0, r5
 800a918:	f000 ffba 	bl	800b890 <_fflush_r>
 800a91c:	bb30      	cbnz	r0, 800a96c <__swbuf_r+0x90>
 800a91e:	68a3      	ldr	r3, [r4, #8]
 800a920:	3001      	adds	r0, #1
 800a922:	3b01      	subs	r3, #1
 800a924:	60a3      	str	r3, [r4, #8]
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	1c5a      	adds	r2, r3, #1
 800a92a:	6022      	str	r2, [r4, #0]
 800a92c:	701e      	strb	r6, [r3, #0]
 800a92e:	6963      	ldr	r3, [r4, #20]
 800a930:	4283      	cmp	r3, r0
 800a932:	d004      	beq.n	800a93e <__swbuf_r+0x62>
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	07db      	lsls	r3, r3, #31
 800a938:	d506      	bpl.n	800a948 <__swbuf_r+0x6c>
 800a93a:	2e0a      	cmp	r6, #10
 800a93c:	d104      	bne.n	800a948 <__swbuf_r+0x6c>
 800a93e:	4621      	mov	r1, r4
 800a940:	4628      	mov	r0, r5
 800a942:	f000 ffa5 	bl	800b890 <_fflush_r>
 800a946:	b988      	cbnz	r0, 800a96c <__swbuf_r+0x90>
 800a948:	4638      	mov	r0, r7
 800a94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a94c:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <__swbuf_r+0x9c>)
 800a94e:	429c      	cmp	r4, r3
 800a950:	d101      	bne.n	800a956 <__swbuf_r+0x7a>
 800a952:	68ac      	ldr	r4, [r5, #8]
 800a954:	e7cf      	b.n	800a8f6 <__swbuf_r+0x1a>
 800a956:	4b09      	ldr	r3, [pc, #36]	; (800a97c <__swbuf_r+0xa0>)
 800a958:	429c      	cmp	r4, r3
 800a95a:	bf08      	it	eq
 800a95c:	68ec      	ldreq	r4, [r5, #12]
 800a95e:	e7ca      	b.n	800a8f6 <__swbuf_r+0x1a>
 800a960:	4621      	mov	r1, r4
 800a962:	4628      	mov	r0, r5
 800a964:	f000 f80c 	bl	800a980 <__swsetup_r>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d0cb      	beq.n	800a904 <__swbuf_r+0x28>
 800a96c:	f04f 37ff 	mov.w	r7, #4294967295
 800a970:	e7ea      	b.n	800a948 <__swbuf_r+0x6c>
 800a972:	bf00      	nop
 800a974:	0800dba4 	.word	0x0800dba4
 800a978:	0800dbc4 	.word	0x0800dbc4
 800a97c:	0800db84 	.word	0x0800db84

0800a980 <__swsetup_r>:
 800a980:	4b32      	ldr	r3, [pc, #200]	; (800aa4c <__swsetup_r+0xcc>)
 800a982:	b570      	push	{r4, r5, r6, lr}
 800a984:	681d      	ldr	r5, [r3, #0]
 800a986:	4606      	mov	r6, r0
 800a988:	460c      	mov	r4, r1
 800a98a:	b125      	cbz	r5, 800a996 <__swsetup_r+0x16>
 800a98c:	69ab      	ldr	r3, [r5, #24]
 800a98e:	b913      	cbnz	r3, 800a996 <__swsetup_r+0x16>
 800a990:	4628      	mov	r0, r5
 800a992:	f001 f811 	bl	800b9b8 <__sinit>
 800a996:	4b2e      	ldr	r3, [pc, #184]	; (800aa50 <__swsetup_r+0xd0>)
 800a998:	429c      	cmp	r4, r3
 800a99a:	d10f      	bne.n	800a9bc <__swsetup_r+0x3c>
 800a99c:	686c      	ldr	r4, [r5, #4]
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9a4:	0719      	lsls	r1, r3, #28
 800a9a6:	d42c      	bmi.n	800aa02 <__swsetup_r+0x82>
 800a9a8:	06dd      	lsls	r5, r3, #27
 800a9aa:	d411      	bmi.n	800a9d0 <__swsetup_r+0x50>
 800a9ac:	2309      	movs	r3, #9
 800a9ae:	6033      	str	r3, [r6, #0]
 800a9b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b8:	81a3      	strh	r3, [r4, #12]
 800a9ba:	e03e      	b.n	800aa3a <__swsetup_r+0xba>
 800a9bc:	4b25      	ldr	r3, [pc, #148]	; (800aa54 <__swsetup_r+0xd4>)
 800a9be:	429c      	cmp	r4, r3
 800a9c0:	d101      	bne.n	800a9c6 <__swsetup_r+0x46>
 800a9c2:	68ac      	ldr	r4, [r5, #8]
 800a9c4:	e7eb      	b.n	800a99e <__swsetup_r+0x1e>
 800a9c6:	4b24      	ldr	r3, [pc, #144]	; (800aa58 <__swsetup_r+0xd8>)
 800a9c8:	429c      	cmp	r4, r3
 800a9ca:	bf08      	it	eq
 800a9cc:	68ec      	ldreq	r4, [r5, #12]
 800a9ce:	e7e6      	b.n	800a99e <__swsetup_r+0x1e>
 800a9d0:	0758      	lsls	r0, r3, #29
 800a9d2:	d512      	bpl.n	800a9fa <__swsetup_r+0x7a>
 800a9d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9d6:	b141      	cbz	r1, 800a9ea <__swsetup_r+0x6a>
 800a9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d002      	beq.n	800a9e6 <__swsetup_r+0x66>
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f002 f95f 	bl	800cca4 <_free_r>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	6363      	str	r3, [r4, #52]	; 0x34
 800a9ea:	89a3      	ldrh	r3, [r4, #12]
 800a9ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9f0:	81a3      	strh	r3, [r4, #12]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	6063      	str	r3, [r4, #4]
 800a9f6:	6923      	ldr	r3, [r4, #16]
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f043 0308 	orr.w	r3, r3, #8
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	6923      	ldr	r3, [r4, #16]
 800aa04:	b94b      	cbnz	r3, 800aa1a <__swsetup_r+0x9a>
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa10:	d003      	beq.n	800aa1a <__swsetup_r+0x9a>
 800aa12:	4621      	mov	r1, r4
 800aa14:	4630      	mov	r0, r6
 800aa16:	f001 fc11 	bl	800c23c <__smakebuf_r>
 800aa1a:	89a0      	ldrh	r0, [r4, #12]
 800aa1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa20:	f010 0301 	ands.w	r3, r0, #1
 800aa24:	d00a      	beq.n	800aa3c <__swsetup_r+0xbc>
 800aa26:	2300      	movs	r3, #0
 800aa28:	60a3      	str	r3, [r4, #8]
 800aa2a:	6963      	ldr	r3, [r4, #20]
 800aa2c:	425b      	negs	r3, r3
 800aa2e:	61a3      	str	r3, [r4, #24]
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	b943      	cbnz	r3, 800aa46 <__swsetup_r+0xc6>
 800aa34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa38:	d1ba      	bne.n	800a9b0 <__swsetup_r+0x30>
 800aa3a:	bd70      	pop	{r4, r5, r6, pc}
 800aa3c:	0781      	lsls	r1, r0, #30
 800aa3e:	bf58      	it	pl
 800aa40:	6963      	ldrpl	r3, [r4, #20]
 800aa42:	60a3      	str	r3, [r4, #8]
 800aa44:	e7f4      	b.n	800aa30 <__swsetup_r+0xb0>
 800aa46:	2000      	movs	r0, #0
 800aa48:	e7f7      	b.n	800aa3a <__swsetup_r+0xba>
 800aa4a:	bf00      	nop
 800aa4c:	20000610 	.word	0x20000610
 800aa50:	0800dba4 	.word	0x0800dba4
 800aa54:	0800dbc4 	.word	0x0800dbc4
 800aa58:	0800db84 	.word	0x0800db84

0800aa5c <__assert_func>:
 800aa5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa5e:	4614      	mov	r4, r2
 800aa60:	461a      	mov	r2, r3
 800aa62:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <__assert_func+0x2c>)
 800aa64:	4605      	mov	r5, r0
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68d8      	ldr	r0, [r3, #12]
 800aa6a:	b14c      	cbz	r4, 800aa80 <__assert_func+0x24>
 800aa6c:	4b07      	ldr	r3, [pc, #28]	; (800aa8c <__assert_func+0x30>)
 800aa6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa72:	9100      	str	r1, [sp, #0]
 800aa74:	462b      	mov	r3, r5
 800aa76:	4906      	ldr	r1, [pc, #24]	; (800aa90 <__assert_func+0x34>)
 800aa78:	f001 f81c 	bl	800bab4 <fiprintf>
 800aa7c:	f002 fd76 	bl	800d56c <abort>
 800aa80:	4b04      	ldr	r3, [pc, #16]	; (800aa94 <__assert_func+0x38>)
 800aa82:	461c      	mov	r4, r3
 800aa84:	e7f3      	b.n	800aa6e <__assert_func+0x12>
 800aa86:	bf00      	nop
 800aa88:	20000610 	.word	0x20000610
 800aa8c:	0800d9cc 	.word	0x0800d9cc
 800aa90:	0800d9d9 	.word	0x0800d9d9
 800aa94:	0800da07 	.word	0x0800da07

0800aa98 <quorem>:
 800aa98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	6903      	ldr	r3, [r0, #16]
 800aa9e:	690c      	ldr	r4, [r1, #16]
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	42a3      	cmp	r3, r4
 800aaa4:	f2c0 8082 	blt.w	800abac <quorem+0x114>
 800aaa8:	3c01      	subs	r4, #1
 800aaaa:	f100 0514 	add.w	r5, r0, #20
 800aaae:	f101 0814 	add.w	r8, r1, #20
 800aab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aab6:	9301      	str	r3, [sp, #4]
 800aab8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aabc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aac0:	3301      	adds	r3, #1
 800aac2:	429a      	cmp	r2, r3
 800aac4:	fbb2 f6f3 	udiv	r6, r2, r3
 800aac8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aacc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aad0:	d331      	bcc.n	800ab36 <quorem+0x9e>
 800aad2:	f04f 0e00 	mov.w	lr, #0
 800aad6:	4640      	mov	r0, r8
 800aad8:	46ac      	mov	ip, r5
 800aada:	46f2      	mov	sl, lr
 800aadc:	f850 2b04 	ldr.w	r2, [r0], #4
 800aae0:	b293      	uxth	r3, r2
 800aae2:	fb06 e303 	mla	r3, r6, r3, lr
 800aae6:	0c12      	lsrs	r2, r2, #16
 800aae8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	fb06 e202 	mla	r2, r6, r2, lr
 800aaf2:	ebaa 0303 	sub.w	r3, sl, r3
 800aaf6:	f8dc a000 	ldr.w	sl, [ip]
 800aafa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aafe:	fa1f fa8a 	uxth.w	sl, sl
 800ab02:	4453      	add	r3, sl
 800ab04:	f8dc a000 	ldr.w	sl, [ip]
 800ab08:	b292      	uxth	r2, r2
 800ab0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab18:	4581      	cmp	r9, r0
 800ab1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab1e:	f84c 3b04 	str.w	r3, [ip], #4
 800ab22:	d2db      	bcs.n	800aadc <quorem+0x44>
 800ab24:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab28:	b92b      	cbnz	r3, 800ab36 <quorem+0x9e>
 800ab2a:	9b01      	ldr	r3, [sp, #4]
 800ab2c:	3b04      	subs	r3, #4
 800ab2e:	429d      	cmp	r5, r3
 800ab30:	461a      	mov	r2, r3
 800ab32:	d32f      	bcc.n	800ab94 <quorem+0xfc>
 800ab34:	613c      	str	r4, [r7, #16]
 800ab36:	4638      	mov	r0, r7
 800ab38:	f001 feb0 	bl	800c89c <__mcmp>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	db25      	blt.n	800ab8c <quorem+0xf4>
 800ab40:	4628      	mov	r0, r5
 800ab42:	f04f 0c00 	mov.w	ip, #0
 800ab46:	3601      	adds	r6, #1
 800ab48:	f858 1b04 	ldr.w	r1, [r8], #4
 800ab4c:	f8d0 e000 	ldr.w	lr, [r0]
 800ab50:	b28b      	uxth	r3, r1
 800ab52:	ebac 0303 	sub.w	r3, ip, r3
 800ab56:	fa1f f28e 	uxth.w	r2, lr
 800ab5a:	4413      	add	r3, r2
 800ab5c:	0c0a      	lsrs	r2, r1, #16
 800ab5e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab6c:	45c1      	cmp	r9, r8
 800ab6e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab72:	f840 3b04 	str.w	r3, [r0], #4
 800ab76:	d2e7      	bcs.n	800ab48 <quorem+0xb0>
 800ab78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab80:	b922      	cbnz	r2, 800ab8c <quorem+0xf4>
 800ab82:	3b04      	subs	r3, #4
 800ab84:	429d      	cmp	r5, r3
 800ab86:	461a      	mov	r2, r3
 800ab88:	d30a      	bcc.n	800aba0 <quorem+0x108>
 800ab8a:	613c      	str	r4, [r7, #16]
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	b003      	add	sp, #12
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	3b04      	subs	r3, #4
 800ab98:	2a00      	cmp	r2, #0
 800ab9a:	d1cb      	bne.n	800ab34 <quorem+0x9c>
 800ab9c:	3c01      	subs	r4, #1
 800ab9e:	e7c6      	b.n	800ab2e <quorem+0x96>
 800aba0:	6812      	ldr	r2, [r2, #0]
 800aba2:	3b04      	subs	r3, #4
 800aba4:	2a00      	cmp	r2, #0
 800aba6:	d1f0      	bne.n	800ab8a <quorem+0xf2>
 800aba8:	3c01      	subs	r4, #1
 800abaa:	e7eb      	b.n	800ab84 <quorem+0xec>
 800abac:	2000      	movs	r0, #0
 800abae:	e7ee      	b.n	800ab8e <quorem+0xf6>

0800abb0 <_dtoa_r>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	4616      	mov	r6, r2
 800abb6:	461f      	mov	r7, r3
 800abb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800abba:	b099      	sub	sp, #100	; 0x64
 800abbc:	4605      	mov	r5, r0
 800abbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800abc2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800abc6:	b974      	cbnz	r4, 800abe6 <_dtoa_r+0x36>
 800abc8:	2010      	movs	r0, #16
 800abca:	f001 fb77 	bl	800c2bc <malloc>
 800abce:	4602      	mov	r2, r0
 800abd0:	6268      	str	r0, [r5, #36]	; 0x24
 800abd2:	b920      	cbnz	r0, 800abde <_dtoa_r+0x2e>
 800abd4:	21ea      	movs	r1, #234	; 0xea
 800abd6:	4ba8      	ldr	r3, [pc, #672]	; (800ae78 <_dtoa_r+0x2c8>)
 800abd8:	48a8      	ldr	r0, [pc, #672]	; (800ae7c <_dtoa_r+0x2cc>)
 800abda:	f7ff ff3f 	bl	800aa5c <__assert_func>
 800abde:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abe2:	6004      	str	r4, [r0, #0]
 800abe4:	60c4      	str	r4, [r0, #12]
 800abe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abe8:	6819      	ldr	r1, [r3, #0]
 800abea:	b151      	cbz	r1, 800ac02 <_dtoa_r+0x52>
 800abec:	685a      	ldr	r2, [r3, #4]
 800abee:	2301      	movs	r3, #1
 800abf0:	4093      	lsls	r3, r2
 800abf2:	604a      	str	r2, [r1, #4]
 800abf4:	608b      	str	r3, [r1, #8]
 800abf6:	4628      	mov	r0, r5
 800abf8:	f001 fbc8 	bl	800c38c <_Bfree>
 800abfc:	2200      	movs	r2, #0
 800abfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	1e3b      	subs	r3, r7, #0
 800ac04:	bfaf      	iteee	ge
 800ac06:	2300      	movge	r3, #0
 800ac08:	2201      	movlt	r2, #1
 800ac0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ac0e:	9305      	strlt	r3, [sp, #20]
 800ac10:	bfa8      	it	ge
 800ac12:	f8c8 3000 	strge.w	r3, [r8]
 800ac16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ac1a:	4b99      	ldr	r3, [pc, #612]	; (800ae80 <_dtoa_r+0x2d0>)
 800ac1c:	bfb8      	it	lt
 800ac1e:	f8c8 2000 	strlt.w	r2, [r8]
 800ac22:	ea33 0309 	bics.w	r3, r3, r9
 800ac26:	d119      	bne.n	800ac5c <_dtoa_r+0xac>
 800ac28:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac34:	4333      	orrs	r3, r6
 800ac36:	f000 857f 	beq.w	800b738 <_dtoa_r+0xb88>
 800ac3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac3c:	b953      	cbnz	r3, 800ac54 <_dtoa_r+0xa4>
 800ac3e:	4b91      	ldr	r3, [pc, #580]	; (800ae84 <_dtoa_r+0x2d4>)
 800ac40:	e022      	b.n	800ac88 <_dtoa_r+0xd8>
 800ac42:	4b91      	ldr	r3, [pc, #580]	; (800ae88 <_dtoa_r+0x2d8>)
 800ac44:	9303      	str	r3, [sp, #12]
 800ac46:	3308      	adds	r3, #8
 800ac48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	9803      	ldr	r0, [sp, #12]
 800ac4e:	b019      	add	sp, #100	; 0x64
 800ac50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac54:	4b8b      	ldr	r3, [pc, #556]	; (800ae84 <_dtoa_r+0x2d4>)
 800ac56:	9303      	str	r3, [sp, #12]
 800ac58:	3303      	adds	r3, #3
 800ac5a:	e7f5      	b.n	800ac48 <_dtoa_r+0x98>
 800ac5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ac60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ac64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac68:	2200      	movs	r2, #0
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f7f5 ffc6 	bl	8000bfc <__aeabi_dcmpeq>
 800ac70:	4680      	mov	r8, r0
 800ac72:	b158      	cbz	r0, 800ac8c <_dtoa_r+0xdc>
 800ac74:	2301      	movs	r3, #1
 800ac76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac78:	6013      	str	r3, [r2, #0]
 800ac7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 8558 	beq.w	800b732 <_dtoa_r+0xb82>
 800ac82:	4882      	ldr	r0, [pc, #520]	; (800ae8c <_dtoa_r+0x2dc>)
 800ac84:	6018      	str	r0, [r3, #0]
 800ac86:	1e43      	subs	r3, r0, #1
 800ac88:	9303      	str	r3, [sp, #12]
 800ac8a:	e7df      	b.n	800ac4c <_dtoa_r+0x9c>
 800ac8c:	ab16      	add	r3, sp, #88	; 0x58
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	ab17      	add	r3, sp, #92	; 0x5c
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	4628      	mov	r0, r5
 800ac96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac9a:	f001 ff21 	bl	800cae0 <__d2b>
 800ac9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aca2:	4683      	mov	fp, r0
 800aca4:	2c00      	cmp	r4, #0
 800aca6:	d07f      	beq.n	800ada8 <_dtoa_r+0x1f8>
 800aca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800acb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acb6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800acba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800acbe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800acc2:	2200      	movs	r2, #0
 800acc4:	4b72      	ldr	r3, [pc, #456]	; (800ae90 <_dtoa_r+0x2e0>)
 800acc6:	f7f5 fb79 	bl	80003bc <__aeabi_dsub>
 800acca:	a365      	add	r3, pc, #404	; (adr r3, 800ae60 <_dtoa_r+0x2b0>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f7f5 fd2c 	bl	800072c <__aeabi_dmul>
 800acd4:	a364      	add	r3, pc, #400	; (adr r3, 800ae68 <_dtoa_r+0x2b8>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fb71 	bl	80003c0 <__adddf3>
 800acde:	4606      	mov	r6, r0
 800ace0:	4620      	mov	r0, r4
 800ace2:	460f      	mov	r7, r1
 800ace4:	f7f5 fcb8 	bl	8000658 <__aeabi_i2d>
 800ace8:	a361      	add	r3, pc, #388	; (adr r3, 800ae70 <_dtoa_r+0x2c0>)
 800acea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acee:	f7f5 fd1d 	bl	800072c <__aeabi_dmul>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	4630      	mov	r0, r6
 800acf8:	4639      	mov	r1, r7
 800acfa:	f7f5 fb61 	bl	80003c0 <__adddf3>
 800acfe:	4606      	mov	r6, r0
 800ad00:	460f      	mov	r7, r1
 800ad02:	f7f5 ffc3 	bl	8000c8c <__aeabi_d2iz>
 800ad06:	2200      	movs	r2, #0
 800ad08:	4682      	mov	sl, r0
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	4639      	mov	r1, r7
 800ad10:	f7f5 ff7e 	bl	8000c10 <__aeabi_dcmplt>
 800ad14:	b148      	cbz	r0, 800ad2a <_dtoa_r+0x17a>
 800ad16:	4650      	mov	r0, sl
 800ad18:	f7f5 fc9e 	bl	8000658 <__aeabi_i2d>
 800ad1c:	4632      	mov	r2, r6
 800ad1e:	463b      	mov	r3, r7
 800ad20:	f7f5 ff6c 	bl	8000bfc <__aeabi_dcmpeq>
 800ad24:	b908      	cbnz	r0, 800ad2a <_dtoa_r+0x17a>
 800ad26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad2a:	f1ba 0f16 	cmp.w	sl, #22
 800ad2e:	d858      	bhi.n	800ade2 <_dtoa_r+0x232>
 800ad30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad34:	4b57      	ldr	r3, [pc, #348]	; (800ae94 <_dtoa_r+0x2e4>)
 800ad36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	f7f5 ff67 	bl	8000c10 <__aeabi_dcmplt>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d04f      	beq.n	800ade6 <_dtoa_r+0x236>
 800ad46:	2300      	movs	r3, #0
 800ad48:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad50:	1b1c      	subs	r4, r3, r4
 800ad52:	1e63      	subs	r3, r4, #1
 800ad54:	9309      	str	r3, [sp, #36]	; 0x24
 800ad56:	bf49      	itett	mi
 800ad58:	f1c4 0301 	rsbmi	r3, r4, #1
 800ad5c:	2300      	movpl	r3, #0
 800ad5e:	9306      	strmi	r3, [sp, #24]
 800ad60:	2300      	movmi	r3, #0
 800ad62:	bf54      	ite	pl
 800ad64:	9306      	strpl	r3, [sp, #24]
 800ad66:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ad68:	f1ba 0f00 	cmp.w	sl, #0
 800ad6c:	db3d      	blt.n	800adea <_dtoa_r+0x23a>
 800ad6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad70:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ad74:	4453      	add	r3, sl
 800ad76:	9309      	str	r3, [sp, #36]	; 0x24
 800ad78:	2300      	movs	r3, #0
 800ad7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad7e:	2b09      	cmp	r3, #9
 800ad80:	f200 808c 	bhi.w	800ae9c <_dtoa_r+0x2ec>
 800ad84:	2b05      	cmp	r3, #5
 800ad86:	bfc4      	itt	gt
 800ad88:	3b04      	subgt	r3, #4
 800ad8a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ad8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad8e:	bfc8      	it	gt
 800ad90:	2400      	movgt	r4, #0
 800ad92:	f1a3 0302 	sub.w	r3, r3, #2
 800ad96:	bfd8      	it	le
 800ad98:	2401      	movle	r4, #1
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	f200 808a 	bhi.w	800aeb4 <_dtoa_r+0x304>
 800ada0:	e8df f003 	tbb	[pc, r3]
 800ada4:	5b4d4f2d 	.word	0x5b4d4f2d
 800ada8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800adac:	441c      	add	r4, r3
 800adae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800adb2:	2b20      	cmp	r3, #32
 800adb4:	bfc3      	ittte	gt
 800adb6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800adba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800adbe:	fa09 f303 	lslgt.w	r3, r9, r3
 800adc2:	f1c3 0320 	rsble	r3, r3, #32
 800adc6:	bfc6      	itte	gt
 800adc8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800adcc:	4318      	orrgt	r0, r3
 800adce:	fa06 f003 	lslle.w	r0, r6, r3
 800add2:	f7f5 fc31 	bl	8000638 <__aeabi_ui2d>
 800add6:	2301      	movs	r3, #1
 800add8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800addc:	3c01      	subs	r4, #1
 800adde:	9313      	str	r3, [sp, #76]	; 0x4c
 800ade0:	e76f      	b.n	800acc2 <_dtoa_r+0x112>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e7b2      	b.n	800ad4c <_dtoa_r+0x19c>
 800ade6:	900f      	str	r0, [sp, #60]	; 0x3c
 800ade8:	e7b1      	b.n	800ad4e <_dtoa_r+0x19e>
 800adea:	9b06      	ldr	r3, [sp, #24]
 800adec:	eba3 030a 	sub.w	r3, r3, sl
 800adf0:	9306      	str	r3, [sp, #24]
 800adf2:	f1ca 0300 	rsb	r3, sl, #0
 800adf6:	930a      	str	r3, [sp, #40]	; 0x28
 800adf8:	2300      	movs	r3, #0
 800adfa:	930e      	str	r3, [sp, #56]	; 0x38
 800adfc:	e7be      	b.n	800ad7c <_dtoa_r+0x1cc>
 800adfe:	2300      	movs	r3, #0
 800ae00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	dc58      	bgt.n	800aeba <_dtoa_r+0x30a>
 800ae08:	f04f 0901 	mov.w	r9, #1
 800ae0c:	464b      	mov	r3, r9
 800ae0e:	f8cd 9020 	str.w	r9, [sp, #32]
 800ae12:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ae16:	2200      	movs	r2, #0
 800ae18:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ae1a:	6042      	str	r2, [r0, #4]
 800ae1c:	2204      	movs	r2, #4
 800ae1e:	f102 0614 	add.w	r6, r2, #20
 800ae22:	429e      	cmp	r6, r3
 800ae24:	6841      	ldr	r1, [r0, #4]
 800ae26:	d94e      	bls.n	800aec6 <_dtoa_r+0x316>
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f001 fa6f 	bl	800c30c <_Balloc>
 800ae2e:	9003      	str	r0, [sp, #12]
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d14c      	bne.n	800aece <_dtoa_r+0x31e>
 800ae34:	4602      	mov	r2, r0
 800ae36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ae3a:	4b17      	ldr	r3, [pc, #92]	; (800ae98 <_dtoa_r+0x2e8>)
 800ae3c:	e6cc      	b.n	800abd8 <_dtoa_r+0x28>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e7de      	b.n	800ae00 <_dtoa_r+0x250>
 800ae42:	2300      	movs	r3, #0
 800ae44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae48:	eb0a 0903 	add.w	r9, sl, r3
 800ae4c:	f109 0301 	add.w	r3, r9, #1
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	9308      	str	r3, [sp, #32]
 800ae54:	bfb8      	it	lt
 800ae56:	2301      	movlt	r3, #1
 800ae58:	e7dd      	b.n	800ae16 <_dtoa_r+0x266>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e7f2      	b.n	800ae44 <_dtoa_r+0x294>
 800ae5e:	bf00      	nop
 800ae60:	636f4361 	.word	0x636f4361
 800ae64:	3fd287a7 	.word	0x3fd287a7
 800ae68:	8b60c8b3 	.word	0x8b60c8b3
 800ae6c:	3fc68a28 	.word	0x3fc68a28
 800ae70:	509f79fb 	.word	0x509f79fb
 800ae74:	3fd34413 	.word	0x3fd34413
 800ae78:	0800d958 	.word	0x0800d958
 800ae7c:	0800db16 	.word	0x0800db16
 800ae80:	7ff00000 	.word	0x7ff00000
 800ae84:	0800db12 	.word	0x0800db12
 800ae88:	0800db09 	.word	0x0800db09
 800ae8c:	0800d8d9 	.word	0x0800d8d9
 800ae90:	3ff80000 	.word	0x3ff80000
 800ae94:	0800dce8 	.word	0x0800dce8
 800ae98:	0800db71 	.word	0x0800db71
 800ae9c:	2401      	movs	r4, #1
 800ae9e:	2300      	movs	r3, #0
 800aea0:	940b      	str	r4, [sp, #44]	; 0x2c
 800aea2:	9322      	str	r3, [sp, #136]	; 0x88
 800aea4:	f04f 39ff 	mov.w	r9, #4294967295
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2312      	movs	r3, #18
 800aeac:	f8cd 9020 	str.w	r9, [sp, #32]
 800aeb0:	9223      	str	r2, [sp, #140]	; 0x8c
 800aeb2:	e7b0      	b.n	800ae16 <_dtoa_r+0x266>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeb8:	e7f4      	b.n	800aea4 <_dtoa_r+0x2f4>
 800aeba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800aebe:	464b      	mov	r3, r9
 800aec0:	f8cd 9020 	str.w	r9, [sp, #32]
 800aec4:	e7a7      	b.n	800ae16 <_dtoa_r+0x266>
 800aec6:	3101      	adds	r1, #1
 800aec8:	6041      	str	r1, [r0, #4]
 800aeca:	0052      	lsls	r2, r2, #1
 800aecc:	e7a7      	b.n	800ae1e <_dtoa_r+0x26e>
 800aece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aed0:	9a03      	ldr	r2, [sp, #12]
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	9b08      	ldr	r3, [sp, #32]
 800aed6:	2b0e      	cmp	r3, #14
 800aed8:	f200 80a8 	bhi.w	800b02c <_dtoa_r+0x47c>
 800aedc:	2c00      	cmp	r4, #0
 800aede:	f000 80a5 	beq.w	800b02c <_dtoa_r+0x47c>
 800aee2:	f1ba 0f00 	cmp.w	sl, #0
 800aee6:	dd34      	ble.n	800af52 <_dtoa_r+0x3a2>
 800aee8:	4a9a      	ldr	r2, [pc, #616]	; (800b154 <_dtoa_r+0x5a4>)
 800aeea:	f00a 030f 	and.w	r3, sl, #15
 800aeee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aef2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aef6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aefa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aefe:	ea4f 142a 	mov.w	r4, sl, asr #4
 800af02:	d016      	beq.n	800af32 <_dtoa_r+0x382>
 800af04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af08:	4b93      	ldr	r3, [pc, #588]	; (800b158 <_dtoa_r+0x5a8>)
 800af0a:	2703      	movs	r7, #3
 800af0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af10:	f7f5 fd36 	bl	8000980 <__aeabi_ddiv>
 800af14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af18:	f004 040f 	and.w	r4, r4, #15
 800af1c:	4e8e      	ldr	r6, [pc, #568]	; (800b158 <_dtoa_r+0x5a8>)
 800af1e:	b954      	cbnz	r4, 800af36 <_dtoa_r+0x386>
 800af20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af28:	f7f5 fd2a 	bl	8000980 <__aeabi_ddiv>
 800af2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af30:	e029      	b.n	800af86 <_dtoa_r+0x3d6>
 800af32:	2702      	movs	r7, #2
 800af34:	e7f2      	b.n	800af1c <_dtoa_r+0x36c>
 800af36:	07e1      	lsls	r1, r4, #31
 800af38:	d508      	bpl.n	800af4c <_dtoa_r+0x39c>
 800af3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af42:	f7f5 fbf3 	bl	800072c <__aeabi_dmul>
 800af46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af4a:	3701      	adds	r7, #1
 800af4c:	1064      	asrs	r4, r4, #1
 800af4e:	3608      	adds	r6, #8
 800af50:	e7e5      	b.n	800af1e <_dtoa_r+0x36e>
 800af52:	f000 80a5 	beq.w	800b0a0 <_dtoa_r+0x4f0>
 800af56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af5a:	f1ca 0400 	rsb	r4, sl, #0
 800af5e:	4b7d      	ldr	r3, [pc, #500]	; (800b154 <_dtoa_r+0x5a4>)
 800af60:	f004 020f 	and.w	r2, r4, #15
 800af64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f7f5 fbde 	bl	800072c <__aeabi_dmul>
 800af70:	2702      	movs	r7, #2
 800af72:	2300      	movs	r3, #0
 800af74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af78:	4e77      	ldr	r6, [pc, #476]	; (800b158 <_dtoa_r+0x5a8>)
 800af7a:	1124      	asrs	r4, r4, #4
 800af7c:	2c00      	cmp	r4, #0
 800af7e:	f040 8084 	bne.w	800b08a <_dtoa_r+0x4da>
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1d2      	bne.n	800af2c <_dtoa_r+0x37c>
 800af86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 808b 	beq.w	800b0a4 <_dtoa_r+0x4f4>
 800af8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800af96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af9a:	2200      	movs	r2, #0
 800af9c:	4b6f      	ldr	r3, [pc, #444]	; (800b15c <_dtoa_r+0x5ac>)
 800af9e:	f7f5 fe37 	bl	8000c10 <__aeabi_dcmplt>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d07e      	beq.n	800b0a4 <_dtoa_r+0x4f4>
 800afa6:	9b08      	ldr	r3, [sp, #32]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d07b      	beq.n	800b0a4 <_dtoa_r+0x4f4>
 800afac:	f1b9 0f00 	cmp.w	r9, #0
 800afb0:	dd38      	ble.n	800b024 <_dtoa_r+0x474>
 800afb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800afb6:	2200      	movs	r2, #0
 800afb8:	4b69      	ldr	r3, [pc, #420]	; (800b160 <_dtoa_r+0x5b0>)
 800afba:	f7f5 fbb7 	bl	800072c <__aeabi_dmul>
 800afbe:	464c      	mov	r4, r9
 800afc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afc4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800afc8:	3701      	adds	r7, #1
 800afca:	4638      	mov	r0, r7
 800afcc:	f7f5 fb44 	bl	8000658 <__aeabi_i2d>
 800afd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afd4:	f7f5 fbaa 	bl	800072c <__aeabi_dmul>
 800afd8:	2200      	movs	r2, #0
 800afda:	4b62      	ldr	r3, [pc, #392]	; (800b164 <_dtoa_r+0x5b4>)
 800afdc:	f7f5 f9f0 	bl	80003c0 <__adddf3>
 800afe0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800afe4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800afe8:	9611      	str	r6, [sp, #68]	; 0x44
 800afea:	2c00      	cmp	r4, #0
 800afec:	d15d      	bne.n	800b0aa <_dtoa_r+0x4fa>
 800afee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aff2:	2200      	movs	r2, #0
 800aff4:	4b5c      	ldr	r3, [pc, #368]	; (800b168 <_dtoa_r+0x5b8>)
 800aff6:	f7f5 f9e1 	bl	80003bc <__aeabi_dsub>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b002:	4633      	mov	r3, r6
 800b004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b006:	f7f5 fe21 	bl	8000c4c <__aeabi_dcmpgt>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	f040 829c 	bne.w	800b548 <_dtoa_r+0x998>
 800b010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b016:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b01a:	f7f5 fdf9 	bl	8000c10 <__aeabi_dcmplt>
 800b01e:	2800      	cmp	r0, #0
 800b020:	f040 8290 	bne.w	800b544 <_dtoa_r+0x994>
 800b024:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b028:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b02c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f2c0 8152 	blt.w	800b2d8 <_dtoa_r+0x728>
 800b034:	f1ba 0f0e 	cmp.w	sl, #14
 800b038:	f300 814e 	bgt.w	800b2d8 <_dtoa_r+0x728>
 800b03c:	4b45      	ldr	r3, [pc, #276]	; (800b154 <_dtoa_r+0x5a4>)
 800b03e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b042:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b046:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b04a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f280 80db 	bge.w	800b208 <_dtoa_r+0x658>
 800b052:	9b08      	ldr	r3, [sp, #32]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f300 80d7 	bgt.w	800b208 <_dtoa_r+0x658>
 800b05a:	f040 8272 	bne.w	800b542 <_dtoa_r+0x992>
 800b05e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b062:	2200      	movs	r2, #0
 800b064:	4b40      	ldr	r3, [pc, #256]	; (800b168 <_dtoa_r+0x5b8>)
 800b066:	f7f5 fb61 	bl	800072c <__aeabi_dmul>
 800b06a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b06e:	f7f5 fde3 	bl	8000c38 <__aeabi_dcmpge>
 800b072:	9c08      	ldr	r4, [sp, #32]
 800b074:	4626      	mov	r6, r4
 800b076:	2800      	cmp	r0, #0
 800b078:	f040 8248 	bne.w	800b50c <_dtoa_r+0x95c>
 800b07c:	2331      	movs	r3, #49	; 0x31
 800b07e:	9f03      	ldr	r7, [sp, #12]
 800b080:	f10a 0a01 	add.w	sl, sl, #1
 800b084:	f807 3b01 	strb.w	r3, [r7], #1
 800b088:	e244      	b.n	800b514 <_dtoa_r+0x964>
 800b08a:	07e2      	lsls	r2, r4, #31
 800b08c:	d505      	bpl.n	800b09a <_dtoa_r+0x4ea>
 800b08e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b092:	f7f5 fb4b 	bl	800072c <__aeabi_dmul>
 800b096:	2301      	movs	r3, #1
 800b098:	3701      	adds	r7, #1
 800b09a:	1064      	asrs	r4, r4, #1
 800b09c:	3608      	adds	r6, #8
 800b09e:	e76d      	b.n	800af7c <_dtoa_r+0x3cc>
 800b0a0:	2702      	movs	r7, #2
 800b0a2:	e770      	b.n	800af86 <_dtoa_r+0x3d6>
 800b0a4:	46d0      	mov	r8, sl
 800b0a6:	9c08      	ldr	r4, [sp, #32]
 800b0a8:	e78f      	b.n	800afca <_dtoa_r+0x41a>
 800b0aa:	9903      	ldr	r1, [sp, #12]
 800b0ac:	4b29      	ldr	r3, [pc, #164]	; (800b154 <_dtoa_r+0x5a4>)
 800b0ae:	4421      	add	r1, r4
 800b0b0:	9112      	str	r1, [sp, #72]	; 0x48
 800b0b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b0bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0c0:	2900      	cmp	r1, #0
 800b0c2:	d055      	beq.n	800b170 <_dtoa_r+0x5c0>
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	4929      	ldr	r1, [pc, #164]	; (800b16c <_dtoa_r+0x5bc>)
 800b0c8:	f7f5 fc5a 	bl	8000980 <__aeabi_ddiv>
 800b0cc:	463b      	mov	r3, r7
 800b0ce:	4632      	mov	r2, r6
 800b0d0:	f7f5 f974 	bl	80003bc <__aeabi_dsub>
 800b0d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0d8:	9f03      	ldr	r7, [sp, #12]
 800b0da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0de:	f7f5 fdd5 	bl	8000c8c <__aeabi_d2iz>
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	f7f5 fab8 	bl	8000658 <__aeabi_i2d>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0f0:	f7f5 f964 	bl	80003bc <__aeabi_dsub>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	3430      	adds	r4, #48	; 0x30
 800b0fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b102:	f807 4b01 	strb.w	r4, [r7], #1
 800b106:	f7f5 fd83 	bl	8000c10 <__aeabi_dcmplt>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d174      	bne.n	800b1f8 <_dtoa_r+0x648>
 800b10e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b112:	2000      	movs	r0, #0
 800b114:	4911      	ldr	r1, [pc, #68]	; (800b15c <_dtoa_r+0x5ac>)
 800b116:	f7f5 f951 	bl	80003bc <__aeabi_dsub>
 800b11a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b11e:	f7f5 fd77 	bl	8000c10 <__aeabi_dcmplt>
 800b122:	2800      	cmp	r0, #0
 800b124:	f040 80b7 	bne.w	800b296 <_dtoa_r+0x6e6>
 800b128:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b12a:	429f      	cmp	r7, r3
 800b12c:	f43f af7a 	beq.w	800b024 <_dtoa_r+0x474>
 800b130:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b134:	2200      	movs	r2, #0
 800b136:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <_dtoa_r+0x5b0>)
 800b138:	f7f5 faf8 	bl	800072c <__aeabi_dmul>
 800b13c:	2200      	movs	r2, #0
 800b13e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b146:	4b06      	ldr	r3, [pc, #24]	; (800b160 <_dtoa_r+0x5b0>)
 800b148:	f7f5 faf0 	bl	800072c <__aeabi_dmul>
 800b14c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b150:	e7c3      	b.n	800b0da <_dtoa_r+0x52a>
 800b152:	bf00      	nop
 800b154:	0800dce8 	.word	0x0800dce8
 800b158:	0800dcc0 	.word	0x0800dcc0
 800b15c:	3ff00000 	.word	0x3ff00000
 800b160:	40240000 	.word	0x40240000
 800b164:	401c0000 	.word	0x401c0000
 800b168:	40140000 	.word	0x40140000
 800b16c:	3fe00000 	.word	0x3fe00000
 800b170:	4630      	mov	r0, r6
 800b172:	4639      	mov	r1, r7
 800b174:	f7f5 fada 	bl	800072c <__aeabi_dmul>
 800b178:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b17a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b17e:	9c03      	ldr	r4, [sp, #12]
 800b180:	9314      	str	r3, [sp, #80]	; 0x50
 800b182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b186:	f7f5 fd81 	bl	8000c8c <__aeabi_d2iz>
 800b18a:	9015      	str	r0, [sp, #84]	; 0x54
 800b18c:	f7f5 fa64 	bl	8000658 <__aeabi_i2d>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b198:	f7f5 f910 	bl	80003bc <__aeabi_dsub>
 800b19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b19e:	4606      	mov	r6, r0
 800b1a0:	3330      	adds	r3, #48	; 0x30
 800b1a2:	f804 3b01 	strb.w	r3, [r4], #1
 800b1a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1a8:	460f      	mov	r7, r1
 800b1aa:	429c      	cmp	r4, r3
 800b1ac:	f04f 0200 	mov.w	r2, #0
 800b1b0:	d124      	bne.n	800b1fc <_dtoa_r+0x64c>
 800b1b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b1b6:	4bb0      	ldr	r3, [pc, #704]	; (800b478 <_dtoa_r+0x8c8>)
 800b1b8:	f7f5 f902 	bl	80003c0 <__adddf3>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	4639      	mov	r1, r7
 800b1c4:	f7f5 fd42 	bl	8000c4c <__aeabi_dcmpgt>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d163      	bne.n	800b294 <_dtoa_r+0x6e4>
 800b1cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	49a9      	ldr	r1, [pc, #676]	; (800b478 <_dtoa_r+0x8c8>)
 800b1d4:	f7f5 f8f2 	bl	80003bc <__aeabi_dsub>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4630      	mov	r0, r6
 800b1de:	4639      	mov	r1, r7
 800b1e0:	f7f5 fd16 	bl	8000c10 <__aeabi_dcmplt>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	f43f af1d 	beq.w	800b024 <_dtoa_r+0x474>
 800b1ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b1ec:	1e7b      	subs	r3, r7, #1
 800b1ee:	9314      	str	r3, [sp, #80]	; 0x50
 800b1f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b1f4:	2b30      	cmp	r3, #48	; 0x30
 800b1f6:	d0f8      	beq.n	800b1ea <_dtoa_r+0x63a>
 800b1f8:	46c2      	mov	sl, r8
 800b1fa:	e03b      	b.n	800b274 <_dtoa_r+0x6c4>
 800b1fc:	4b9f      	ldr	r3, [pc, #636]	; (800b47c <_dtoa_r+0x8cc>)
 800b1fe:	f7f5 fa95 	bl	800072c <__aeabi_dmul>
 800b202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b206:	e7bc      	b.n	800b182 <_dtoa_r+0x5d2>
 800b208:	9f03      	ldr	r7, [sp, #12]
 800b20a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b20e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b212:	4640      	mov	r0, r8
 800b214:	4649      	mov	r1, r9
 800b216:	f7f5 fbb3 	bl	8000980 <__aeabi_ddiv>
 800b21a:	f7f5 fd37 	bl	8000c8c <__aeabi_d2iz>
 800b21e:	4604      	mov	r4, r0
 800b220:	f7f5 fa1a 	bl	8000658 <__aeabi_i2d>
 800b224:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b228:	f7f5 fa80 	bl	800072c <__aeabi_dmul>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	4640      	mov	r0, r8
 800b232:	4649      	mov	r1, r9
 800b234:	f7f5 f8c2 	bl	80003bc <__aeabi_dsub>
 800b238:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b23c:	f807 6b01 	strb.w	r6, [r7], #1
 800b240:	9e03      	ldr	r6, [sp, #12]
 800b242:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b246:	1bbe      	subs	r6, r7, r6
 800b248:	45b4      	cmp	ip, r6
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	d136      	bne.n	800b2be <_dtoa_r+0x70e>
 800b250:	f7f5 f8b6 	bl	80003c0 <__adddf3>
 800b254:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b258:	4680      	mov	r8, r0
 800b25a:	4689      	mov	r9, r1
 800b25c:	f7f5 fcf6 	bl	8000c4c <__aeabi_dcmpgt>
 800b260:	bb58      	cbnz	r0, 800b2ba <_dtoa_r+0x70a>
 800b262:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b266:	4640      	mov	r0, r8
 800b268:	4649      	mov	r1, r9
 800b26a:	f7f5 fcc7 	bl	8000bfc <__aeabi_dcmpeq>
 800b26e:	b108      	cbz	r0, 800b274 <_dtoa_r+0x6c4>
 800b270:	07e1      	lsls	r1, r4, #31
 800b272:	d422      	bmi.n	800b2ba <_dtoa_r+0x70a>
 800b274:	4628      	mov	r0, r5
 800b276:	4659      	mov	r1, fp
 800b278:	f001 f888 	bl	800c38c <_Bfree>
 800b27c:	2300      	movs	r3, #0
 800b27e:	703b      	strb	r3, [r7, #0]
 800b280:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b282:	f10a 0001 	add.w	r0, sl, #1
 800b286:	6018      	str	r0, [r3, #0]
 800b288:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f43f acde 	beq.w	800ac4c <_dtoa_r+0x9c>
 800b290:	601f      	str	r7, [r3, #0]
 800b292:	e4db      	b.n	800ac4c <_dtoa_r+0x9c>
 800b294:	4627      	mov	r7, r4
 800b296:	463b      	mov	r3, r7
 800b298:	461f      	mov	r7, r3
 800b29a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b29e:	2a39      	cmp	r2, #57	; 0x39
 800b2a0:	d107      	bne.n	800b2b2 <_dtoa_r+0x702>
 800b2a2:	9a03      	ldr	r2, [sp, #12]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d1f7      	bne.n	800b298 <_dtoa_r+0x6e8>
 800b2a8:	2230      	movs	r2, #48	; 0x30
 800b2aa:	9903      	ldr	r1, [sp, #12]
 800b2ac:	f108 0801 	add.w	r8, r8, #1
 800b2b0:	700a      	strb	r2, [r1, #0]
 800b2b2:	781a      	ldrb	r2, [r3, #0]
 800b2b4:	3201      	adds	r2, #1
 800b2b6:	701a      	strb	r2, [r3, #0]
 800b2b8:	e79e      	b.n	800b1f8 <_dtoa_r+0x648>
 800b2ba:	46d0      	mov	r8, sl
 800b2bc:	e7eb      	b.n	800b296 <_dtoa_r+0x6e6>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	4b6e      	ldr	r3, [pc, #440]	; (800b47c <_dtoa_r+0x8cc>)
 800b2c2:	f7f5 fa33 	bl	800072c <__aeabi_dmul>
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4680      	mov	r8, r0
 800b2cc:	4689      	mov	r9, r1
 800b2ce:	f7f5 fc95 	bl	8000bfc <__aeabi_dcmpeq>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d09b      	beq.n	800b20e <_dtoa_r+0x65e>
 800b2d6:	e7cd      	b.n	800b274 <_dtoa_r+0x6c4>
 800b2d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2da:	2a00      	cmp	r2, #0
 800b2dc:	f000 80d0 	beq.w	800b480 <_dtoa_r+0x8d0>
 800b2e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b2e2:	2a01      	cmp	r2, #1
 800b2e4:	f300 80ae 	bgt.w	800b444 <_dtoa_r+0x894>
 800b2e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	f000 80a6 	beq.w	800b43c <_dtoa_r+0x88c>
 800b2f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2f6:	9f06      	ldr	r7, [sp, #24]
 800b2f8:	9a06      	ldr	r2, [sp, #24]
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	441a      	add	r2, r3
 800b2fe:	9206      	str	r2, [sp, #24]
 800b300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b302:	4628      	mov	r0, r5
 800b304:	441a      	add	r2, r3
 800b306:	9209      	str	r2, [sp, #36]	; 0x24
 800b308:	f001 f940 	bl	800c58c <__i2b>
 800b30c:	4606      	mov	r6, r0
 800b30e:	2f00      	cmp	r7, #0
 800b310:	dd0c      	ble.n	800b32c <_dtoa_r+0x77c>
 800b312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b314:	2b00      	cmp	r3, #0
 800b316:	dd09      	ble.n	800b32c <_dtoa_r+0x77c>
 800b318:	42bb      	cmp	r3, r7
 800b31a:	bfa8      	it	ge
 800b31c:	463b      	movge	r3, r7
 800b31e:	9a06      	ldr	r2, [sp, #24]
 800b320:	1aff      	subs	r7, r7, r3
 800b322:	1ad2      	subs	r2, r2, r3
 800b324:	9206      	str	r2, [sp, #24]
 800b326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	9309      	str	r3, [sp, #36]	; 0x24
 800b32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b32e:	b1f3      	cbz	r3, 800b36e <_dtoa_r+0x7be>
 800b330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 80a8 	beq.w	800b488 <_dtoa_r+0x8d8>
 800b338:	2c00      	cmp	r4, #0
 800b33a:	dd10      	ble.n	800b35e <_dtoa_r+0x7ae>
 800b33c:	4631      	mov	r1, r6
 800b33e:	4622      	mov	r2, r4
 800b340:	4628      	mov	r0, r5
 800b342:	f001 f9e1 	bl	800c708 <__pow5mult>
 800b346:	465a      	mov	r2, fp
 800b348:	4601      	mov	r1, r0
 800b34a:	4606      	mov	r6, r0
 800b34c:	4628      	mov	r0, r5
 800b34e:	f001 f933 	bl	800c5b8 <__multiply>
 800b352:	4680      	mov	r8, r0
 800b354:	4659      	mov	r1, fp
 800b356:	4628      	mov	r0, r5
 800b358:	f001 f818 	bl	800c38c <_Bfree>
 800b35c:	46c3      	mov	fp, r8
 800b35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b360:	1b1a      	subs	r2, r3, r4
 800b362:	d004      	beq.n	800b36e <_dtoa_r+0x7be>
 800b364:	4659      	mov	r1, fp
 800b366:	4628      	mov	r0, r5
 800b368:	f001 f9ce 	bl	800c708 <__pow5mult>
 800b36c:	4683      	mov	fp, r0
 800b36e:	2101      	movs	r1, #1
 800b370:	4628      	mov	r0, r5
 800b372:	f001 f90b 	bl	800c58c <__i2b>
 800b376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b378:	4604      	mov	r4, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f340 8086 	ble.w	800b48c <_dtoa_r+0x8dc>
 800b380:	461a      	mov	r2, r3
 800b382:	4601      	mov	r1, r0
 800b384:	4628      	mov	r0, r5
 800b386:	f001 f9bf 	bl	800c708 <__pow5mult>
 800b38a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b38c:	4604      	mov	r4, r0
 800b38e:	2b01      	cmp	r3, #1
 800b390:	dd7f      	ble.n	800b492 <_dtoa_r+0x8e2>
 800b392:	f04f 0800 	mov.w	r8, #0
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b39c:	6918      	ldr	r0, [r3, #16]
 800b39e:	f001 f8a7 	bl	800c4f0 <__hi0bits>
 800b3a2:	f1c0 0020 	rsb	r0, r0, #32
 800b3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a8:	4418      	add	r0, r3
 800b3aa:	f010 001f 	ands.w	r0, r0, #31
 800b3ae:	f000 8092 	beq.w	800b4d6 <_dtoa_r+0x926>
 800b3b2:	f1c0 0320 	rsb	r3, r0, #32
 800b3b6:	2b04      	cmp	r3, #4
 800b3b8:	f340 808a 	ble.w	800b4d0 <_dtoa_r+0x920>
 800b3bc:	f1c0 001c 	rsb	r0, r0, #28
 800b3c0:	9b06      	ldr	r3, [sp, #24]
 800b3c2:	4407      	add	r7, r0
 800b3c4:	4403      	add	r3, r0
 800b3c6:	9306      	str	r3, [sp, #24]
 800b3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ca:	4403      	add	r3, r0
 800b3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ce:	9b06      	ldr	r3, [sp, #24]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	dd05      	ble.n	800b3e0 <_dtoa_r+0x830>
 800b3d4:	4659      	mov	r1, fp
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	4628      	mov	r0, r5
 800b3da:	f001 f9ef 	bl	800c7bc <__lshift>
 800b3de:	4683      	mov	fp, r0
 800b3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	dd05      	ble.n	800b3f2 <_dtoa_r+0x842>
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f001 f9e6 	bl	800c7bc <__lshift>
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d070      	beq.n	800b4da <_dtoa_r+0x92a>
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	4658      	mov	r0, fp
 800b3fc:	f001 fa4e 	bl	800c89c <__mcmp>
 800b400:	2800      	cmp	r0, #0
 800b402:	da6a      	bge.n	800b4da <_dtoa_r+0x92a>
 800b404:	2300      	movs	r3, #0
 800b406:	4659      	mov	r1, fp
 800b408:	220a      	movs	r2, #10
 800b40a:	4628      	mov	r0, r5
 800b40c:	f000 ffe0 	bl	800c3d0 <__multadd>
 800b410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b412:	4683      	mov	fp, r0
 800b414:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 8194 	beq.w	800b746 <_dtoa_r+0xb96>
 800b41e:	4631      	mov	r1, r6
 800b420:	2300      	movs	r3, #0
 800b422:	220a      	movs	r2, #10
 800b424:	4628      	mov	r0, r5
 800b426:	f000 ffd3 	bl	800c3d0 <__multadd>
 800b42a:	f1b9 0f00 	cmp.w	r9, #0
 800b42e:	4606      	mov	r6, r0
 800b430:	f300 8093 	bgt.w	800b55a <_dtoa_r+0x9aa>
 800b434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b436:	2b02      	cmp	r3, #2
 800b438:	dc57      	bgt.n	800b4ea <_dtoa_r+0x93a>
 800b43a:	e08e      	b.n	800b55a <_dtoa_r+0x9aa>
 800b43c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b43e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b442:	e757      	b.n	800b2f4 <_dtoa_r+0x744>
 800b444:	9b08      	ldr	r3, [sp, #32]
 800b446:	1e5c      	subs	r4, r3, #1
 800b448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b44a:	42a3      	cmp	r3, r4
 800b44c:	bfb7      	itett	lt
 800b44e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b450:	1b1c      	subge	r4, r3, r4
 800b452:	1ae2      	sublt	r2, r4, r3
 800b454:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b456:	bfbe      	ittt	lt
 800b458:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b45a:	189b      	addlt	r3, r3, r2
 800b45c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b45e:	9b08      	ldr	r3, [sp, #32]
 800b460:	bfb8      	it	lt
 800b462:	2400      	movlt	r4, #0
 800b464:	2b00      	cmp	r3, #0
 800b466:	bfbb      	ittet	lt
 800b468:	9b06      	ldrlt	r3, [sp, #24]
 800b46a:	9a08      	ldrlt	r2, [sp, #32]
 800b46c:	9f06      	ldrge	r7, [sp, #24]
 800b46e:	1a9f      	sublt	r7, r3, r2
 800b470:	bfac      	ite	ge
 800b472:	9b08      	ldrge	r3, [sp, #32]
 800b474:	2300      	movlt	r3, #0
 800b476:	e73f      	b.n	800b2f8 <_dtoa_r+0x748>
 800b478:	3fe00000 	.word	0x3fe00000
 800b47c:	40240000 	.word	0x40240000
 800b480:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b482:	9f06      	ldr	r7, [sp, #24]
 800b484:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b486:	e742      	b.n	800b30e <_dtoa_r+0x75e>
 800b488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b48a:	e76b      	b.n	800b364 <_dtoa_r+0x7b4>
 800b48c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b48e:	2b01      	cmp	r3, #1
 800b490:	dc19      	bgt.n	800b4c6 <_dtoa_r+0x916>
 800b492:	9b04      	ldr	r3, [sp, #16]
 800b494:	b9bb      	cbnz	r3, 800b4c6 <_dtoa_r+0x916>
 800b496:	9b05      	ldr	r3, [sp, #20]
 800b498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b49c:	b99b      	cbnz	r3, 800b4c6 <_dtoa_r+0x916>
 800b49e:	9b05      	ldr	r3, [sp, #20]
 800b4a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4a4:	0d1b      	lsrs	r3, r3, #20
 800b4a6:	051b      	lsls	r3, r3, #20
 800b4a8:	b183      	cbz	r3, 800b4cc <_dtoa_r+0x91c>
 800b4aa:	f04f 0801 	mov.w	r8, #1
 800b4ae:	9b06      	ldr	r3, [sp, #24]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	9306      	str	r3, [sp, #24]
 800b4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f47f af6a 	bne.w	800b396 <_dtoa_r+0x7e6>
 800b4c2:	2001      	movs	r0, #1
 800b4c4:	e76f      	b.n	800b3a6 <_dtoa_r+0x7f6>
 800b4c6:	f04f 0800 	mov.w	r8, #0
 800b4ca:	e7f6      	b.n	800b4ba <_dtoa_r+0x90a>
 800b4cc:	4698      	mov	r8, r3
 800b4ce:	e7f4      	b.n	800b4ba <_dtoa_r+0x90a>
 800b4d0:	f43f af7d 	beq.w	800b3ce <_dtoa_r+0x81e>
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	301c      	adds	r0, #28
 800b4d8:	e772      	b.n	800b3c0 <_dtoa_r+0x810>
 800b4da:	9b08      	ldr	r3, [sp, #32]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc36      	bgt.n	800b54e <_dtoa_r+0x99e>
 800b4e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	dd33      	ble.n	800b54e <_dtoa_r+0x99e>
 800b4e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4ea:	f1b9 0f00 	cmp.w	r9, #0
 800b4ee:	d10d      	bne.n	800b50c <_dtoa_r+0x95c>
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	464b      	mov	r3, r9
 800b4f4:	2205      	movs	r2, #5
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f000 ff6a 	bl	800c3d0 <__multadd>
 800b4fc:	4601      	mov	r1, r0
 800b4fe:	4604      	mov	r4, r0
 800b500:	4658      	mov	r0, fp
 800b502:	f001 f9cb 	bl	800c89c <__mcmp>
 800b506:	2800      	cmp	r0, #0
 800b508:	f73f adb8 	bgt.w	800b07c <_dtoa_r+0x4cc>
 800b50c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b50e:	9f03      	ldr	r7, [sp, #12]
 800b510:	ea6f 0a03 	mvn.w	sl, r3
 800b514:	f04f 0800 	mov.w	r8, #0
 800b518:	4621      	mov	r1, r4
 800b51a:	4628      	mov	r0, r5
 800b51c:	f000 ff36 	bl	800c38c <_Bfree>
 800b520:	2e00      	cmp	r6, #0
 800b522:	f43f aea7 	beq.w	800b274 <_dtoa_r+0x6c4>
 800b526:	f1b8 0f00 	cmp.w	r8, #0
 800b52a:	d005      	beq.n	800b538 <_dtoa_r+0x988>
 800b52c:	45b0      	cmp	r8, r6
 800b52e:	d003      	beq.n	800b538 <_dtoa_r+0x988>
 800b530:	4641      	mov	r1, r8
 800b532:	4628      	mov	r0, r5
 800b534:	f000 ff2a 	bl	800c38c <_Bfree>
 800b538:	4631      	mov	r1, r6
 800b53a:	4628      	mov	r0, r5
 800b53c:	f000 ff26 	bl	800c38c <_Bfree>
 800b540:	e698      	b.n	800b274 <_dtoa_r+0x6c4>
 800b542:	2400      	movs	r4, #0
 800b544:	4626      	mov	r6, r4
 800b546:	e7e1      	b.n	800b50c <_dtoa_r+0x95c>
 800b548:	46c2      	mov	sl, r8
 800b54a:	4626      	mov	r6, r4
 800b54c:	e596      	b.n	800b07c <_dtoa_r+0x4cc>
 800b54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 80fd 	beq.w	800b754 <_dtoa_r+0xba4>
 800b55a:	2f00      	cmp	r7, #0
 800b55c:	dd05      	ble.n	800b56a <_dtoa_r+0x9ba>
 800b55e:	4631      	mov	r1, r6
 800b560:	463a      	mov	r2, r7
 800b562:	4628      	mov	r0, r5
 800b564:	f001 f92a 	bl	800c7bc <__lshift>
 800b568:	4606      	mov	r6, r0
 800b56a:	f1b8 0f00 	cmp.w	r8, #0
 800b56e:	d05c      	beq.n	800b62a <_dtoa_r+0xa7a>
 800b570:	4628      	mov	r0, r5
 800b572:	6871      	ldr	r1, [r6, #4]
 800b574:	f000 feca 	bl	800c30c <_Balloc>
 800b578:	4607      	mov	r7, r0
 800b57a:	b928      	cbnz	r0, 800b588 <_dtoa_r+0x9d8>
 800b57c:	4602      	mov	r2, r0
 800b57e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b582:	4b7f      	ldr	r3, [pc, #508]	; (800b780 <_dtoa_r+0xbd0>)
 800b584:	f7ff bb28 	b.w	800abd8 <_dtoa_r+0x28>
 800b588:	6932      	ldr	r2, [r6, #16]
 800b58a:	f106 010c 	add.w	r1, r6, #12
 800b58e:	3202      	adds	r2, #2
 800b590:	0092      	lsls	r2, r2, #2
 800b592:	300c      	adds	r0, #12
 800b594:	f7fd fb62 	bl	8008c5c <memcpy>
 800b598:	2201      	movs	r2, #1
 800b59a:	4639      	mov	r1, r7
 800b59c:	4628      	mov	r0, r5
 800b59e:	f001 f90d 	bl	800c7bc <__lshift>
 800b5a2:	46b0      	mov	r8, r6
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	9b03      	ldr	r3, [sp, #12]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	9308      	str	r3, [sp, #32]
 800b5ac:	9b03      	ldr	r3, [sp, #12]
 800b5ae:	444b      	add	r3, r9
 800b5b0:	930a      	str	r3, [sp, #40]	; 0x28
 800b5b2:	9b04      	ldr	r3, [sp, #16]
 800b5b4:	f003 0301 	and.w	r3, r3, #1
 800b5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ba:	9b08      	ldr	r3, [sp, #32]
 800b5bc:	4621      	mov	r1, r4
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	4658      	mov	r0, fp
 800b5c2:	9304      	str	r3, [sp, #16]
 800b5c4:	f7ff fa68 	bl	800aa98 <quorem>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	4641      	mov	r1, r8
 800b5cc:	3330      	adds	r3, #48	; 0x30
 800b5ce:	9006      	str	r0, [sp, #24]
 800b5d0:	4658      	mov	r0, fp
 800b5d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5d4:	f001 f962 	bl	800c89c <__mcmp>
 800b5d8:	4632      	mov	r2, r6
 800b5da:	4681      	mov	r9, r0
 800b5dc:	4621      	mov	r1, r4
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f001 f978 	bl	800c8d4 <__mdiff>
 800b5e4:	68c2      	ldr	r2, [r0, #12]
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ea:	bb02      	cbnz	r2, 800b62e <_dtoa_r+0xa7e>
 800b5ec:	4601      	mov	r1, r0
 800b5ee:	4658      	mov	r0, fp
 800b5f0:	f001 f954 	bl	800c89c <__mcmp>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b600:	f000 fec4 	bl	800c38c <_Bfree>
 800b604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b608:	9f08      	ldr	r7, [sp, #32]
 800b60a:	ea43 0102 	orr.w	r1, r3, r2
 800b60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b610:	430b      	orrs	r3, r1
 800b612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b614:	d10d      	bne.n	800b632 <_dtoa_r+0xa82>
 800b616:	2b39      	cmp	r3, #57	; 0x39
 800b618:	d029      	beq.n	800b66e <_dtoa_r+0xabe>
 800b61a:	f1b9 0f00 	cmp.w	r9, #0
 800b61e:	dd01      	ble.n	800b624 <_dtoa_r+0xa74>
 800b620:	9b06      	ldr	r3, [sp, #24]
 800b622:	3331      	adds	r3, #49	; 0x31
 800b624:	9a04      	ldr	r2, [sp, #16]
 800b626:	7013      	strb	r3, [r2, #0]
 800b628:	e776      	b.n	800b518 <_dtoa_r+0x968>
 800b62a:	4630      	mov	r0, r6
 800b62c:	e7b9      	b.n	800b5a2 <_dtoa_r+0x9f2>
 800b62e:	2201      	movs	r2, #1
 800b630:	e7e2      	b.n	800b5f8 <_dtoa_r+0xa48>
 800b632:	f1b9 0f00 	cmp.w	r9, #0
 800b636:	db06      	blt.n	800b646 <_dtoa_r+0xa96>
 800b638:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b63a:	ea41 0909 	orr.w	r9, r1, r9
 800b63e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b640:	ea59 0101 	orrs.w	r1, r9, r1
 800b644:	d120      	bne.n	800b688 <_dtoa_r+0xad8>
 800b646:	2a00      	cmp	r2, #0
 800b648:	ddec      	ble.n	800b624 <_dtoa_r+0xa74>
 800b64a:	4659      	mov	r1, fp
 800b64c:	2201      	movs	r2, #1
 800b64e:	4628      	mov	r0, r5
 800b650:	9308      	str	r3, [sp, #32]
 800b652:	f001 f8b3 	bl	800c7bc <__lshift>
 800b656:	4621      	mov	r1, r4
 800b658:	4683      	mov	fp, r0
 800b65a:	f001 f91f 	bl	800c89c <__mcmp>
 800b65e:	2800      	cmp	r0, #0
 800b660:	9b08      	ldr	r3, [sp, #32]
 800b662:	dc02      	bgt.n	800b66a <_dtoa_r+0xaba>
 800b664:	d1de      	bne.n	800b624 <_dtoa_r+0xa74>
 800b666:	07da      	lsls	r2, r3, #31
 800b668:	d5dc      	bpl.n	800b624 <_dtoa_r+0xa74>
 800b66a:	2b39      	cmp	r3, #57	; 0x39
 800b66c:	d1d8      	bne.n	800b620 <_dtoa_r+0xa70>
 800b66e:	2339      	movs	r3, #57	; 0x39
 800b670:	9a04      	ldr	r2, [sp, #16]
 800b672:	7013      	strb	r3, [r2, #0]
 800b674:	463b      	mov	r3, r7
 800b676:	461f      	mov	r7, r3
 800b678:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	2a39      	cmp	r2, #57	; 0x39
 800b680:	d050      	beq.n	800b724 <_dtoa_r+0xb74>
 800b682:	3201      	adds	r2, #1
 800b684:	701a      	strb	r2, [r3, #0]
 800b686:	e747      	b.n	800b518 <_dtoa_r+0x968>
 800b688:	2a00      	cmp	r2, #0
 800b68a:	dd03      	ble.n	800b694 <_dtoa_r+0xae4>
 800b68c:	2b39      	cmp	r3, #57	; 0x39
 800b68e:	d0ee      	beq.n	800b66e <_dtoa_r+0xabe>
 800b690:	3301      	adds	r3, #1
 800b692:	e7c7      	b.n	800b624 <_dtoa_r+0xa74>
 800b694:	9a08      	ldr	r2, [sp, #32]
 800b696:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b698:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b69c:	428a      	cmp	r2, r1
 800b69e:	d02a      	beq.n	800b6f6 <_dtoa_r+0xb46>
 800b6a0:	4659      	mov	r1, fp
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	220a      	movs	r2, #10
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f000 fe92 	bl	800c3d0 <__multadd>
 800b6ac:	45b0      	cmp	r8, r6
 800b6ae:	4683      	mov	fp, r0
 800b6b0:	f04f 0300 	mov.w	r3, #0
 800b6b4:	f04f 020a 	mov.w	r2, #10
 800b6b8:	4641      	mov	r1, r8
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	d107      	bne.n	800b6ce <_dtoa_r+0xb1e>
 800b6be:	f000 fe87 	bl	800c3d0 <__multadd>
 800b6c2:	4680      	mov	r8, r0
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	9b08      	ldr	r3, [sp, #32]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	9308      	str	r3, [sp, #32]
 800b6cc:	e775      	b.n	800b5ba <_dtoa_r+0xa0a>
 800b6ce:	f000 fe7f 	bl	800c3d0 <__multadd>
 800b6d2:	4631      	mov	r1, r6
 800b6d4:	4680      	mov	r8, r0
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	220a      	movs	r2, #10
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f000 fe78 	bl	800c3d0 <__multadd>
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	e7f0      	b.n	800b6c6 <_dtoa_r+0xb16>
 800b6e4:	f1b9 0f00 	cmp.w	r9, #0
 800b6e8:	bfcc      	ite	gt
 800b6ea:	464f      	movgt	r7, r9
 800b6ec:	2701      	movle	r7, #1
 800b6ee:	f04f 0800 	mov.w	r8, #0
 800b6f2:	9a03      	ldr	r2, [sp, #12]
 800b6f4:	4417      	add	r7, r2
 800b6f6:	4659      	mov	r1, fp
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	9308      	str	r3, [sp, #32]
 800b6fe:	f001 f85d 	bl	800c7bc <__lshift>
 800b702:	4621      	mov	r1, r4
 800b704:	4683      	mov	fp, r0
 800b706:	f001 f8c9 	bl	800c89c <__mcmp>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	dcb2      	bgt.n	800b674 <_dtoa_r+0xac4>
 800b70e:	d102      	bne.n	800b716 <_dtoa_r+0xb66>
 800b710:	9b08      	ldr	r3, [sp, #32]
 800b712:	07db      	lsls	r3, r3, #31
 800b714:	d4ae      	bmi.n	800b674 <_dtoa_r+0xac4>
 800b716:	463b      	mov	r3, r7
 800b718:	461f      	mov	r7, r3
 800b71a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b71e:	2a30      	cmp	r2, #48	; 0x30
 800b720:	d0fa      	beq.n	800b718 <_dtoa_r+0xb68>
 800b722:	e6f9      	b.n	800b518 <_dtoa_r+0x968>
 800b724:	9a03      	ldr	r2, [sp, #12]
 800b726:	429a      	cmp	r2, r3
 800b728:	d1a5      	bne.n	800b676 <_dtoa_r+0xac6>
 800b72a:	2331      	movs	r3, #49	; 0x31
 800b72c:	f10a 0a01 	add.w	sl, sl, #1
 800b730:	e779      	b.n	800b626 <_dtoa_r+0xa76>
 800b732:	4b14      	ldr	r3, [pc, #80]	; (800b784 <_dtoa_r+0xbd4>)
 800b734:	f7ff baa8 	b.w	800ac88 <_dtoa_r+0xd8>
 800b738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f47f aa81 	bne.w	800ac42 <_dtoa_r+0x92>
 800b740:	4b11      	ldr	r3, [pc, #68]	; (800b788 <_dtoa_r+0xbd8>)
 800b742:	f7ff baa1 	b.w	800ac88 <_dtoa_r+0xd8>
 800b746:	f1b9 0f00 	cmp.w	r9, #0
 800b74a:	dc03      	bgt.n	800b754 <_dtoa_r+0xba4>
 800b74c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b74e:	2b02      	cmp	r3, #2
 800b750:	f73f aecb 	bgt.w	800b4ea <_dtoa_r+0x93a>
 800b754:	9f03      	ldr	r7, [sp, #12]
 800b756:	4621      	mov	r1, r4
 800b758:	4658      	mov	r0, fp
 800b75a:	f7ff f99d 	bl	800aa98 <quorem>
 800b75e:	9a03      	ldr	r2, [sp, #12]
 800b760:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b764:	f807 3b01 	strb.w	r3, [r7], #1
 800b768:	1aba      	subs	r2, r7, r2
 800b76a:	4591      	cmp	r9, r2
 800b76c:	ddba      	ble.n	800b6e4 <_dtoa_r+0xb34>
 800b76e:	4659      	mov	r1, fp
 800b770:	2300      	movs	r3, #0
 800b772:	220a      	movs	r2, #10
 800b774:	4628      	mov	r0, r5
 800b776:	f000 fe2b 	bl	800c3d0 <__multadd>
 800b77a:	4683      	mov	fp, r0
 800b77c:	e7eb      	b.n	800b756 <_dtoa_r+0xba6>
 800b77e:	bf00      	nop
 800b780:	0800db71 	.word	0x0800db71
 800b784:	0800d8d8 	.word	0x0800d8d8
 800b788:	0800db09 	.word	0x0800db09

0800b78c <__sflush_r>:
 800b78c:	898a      	ldrh	r2, [r1, #12]
 800b78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b790:	4605      	mov	r5, r0
 800b792:	0710      	lsls	r0, r2, #28
 800b794:	460c      	mov	r4, r1
 800b796:	d457      	bmi.n	800b848 <__sflush_r+0xbc>
 800b798:	684b      	ldr	r3, [r1, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	dc04      	bgt.n	800b7a8 <__sflush_r+0x1c>
 800b79e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dc01      	bgt.n	800b7a8 <__sflush_r+0x1c>
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7aa:	2e00      	cmp	r6, #0
 800b7ac:	d0fa      	beq.n	800b7a4 <__sflush_r+0x18>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7b4:	682f      	ldr	r7, [r5, #0]
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	d032      	beq.n	800b820 <__sflush_r+0x94>
 800b7ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	075a      	lsls	r2, r3, #29
 800b7c0:	d505      	bpl.n	800b7ce <__sflush_r+0x42>
 800b7c2:	6863      	ldr	r3, [r4, #4]
 800b7c4:	1ac0      	subs	r0, r0, r3
 800b7c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7c8:	b10b      	cbz	r3, 800b7ce <__sflush_r+0x42>
 800b7ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7cc:	1ac0      	subs	r0, r0, r3
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	6a21      	ldr	r1, [r4, #32]
 800b7d8:	47b0      	blx	r6
 800b7da:	1c43      	adds	r3, r0, #1
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	d106      	bne.n	800b7ee <__sflush_r+0x62>
 800b7e0:	6829      	ldr	r1, [r5, #0]
 800b7e2:	291d      	cmp	r1, #29
 800b7e4:	d82c      	bhi.n	800b840 <__sflush_r+0xb4>
 800b7e6:	4a29      	ldr	r2, [pc, #164]	; (800b88c <__sflush_r+0x100>)
 800b7e8:	40ca      	lsrs	r2, r1
 800b7ea:	07d6      	lsls	r6, r2, #31
 800b7ec:	d528      	bpl.n	800b840 <__sflush_r+0xb4>
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	6062      	str	r2, [r4, #4]
 800b7f2:	6922      	ldr	r2, [r4, #16]
 800b7f4:	04d9      	lsls	r1, r3, #19
 800b7f6:	6022      	str	r2, [r4, #0]
 800b7f8:	d504      	bpl.n	800b804 <__sflush_r+0x78>
 800b7fa:	1c42      	adds	r2, r0, #1
 800b7fc:	d101      	bne.n	800b802 <__sflush_r+0x76>
 800b7fe:	682b      	ldr	r3, [r5, #0]
 800b800:	b903      	cbnz	r3, 800b804 <__sflush_r+0x78>
 800b802:	6560      	str	r0, [r4, #84]	; 0x54
 800b804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b806:	602f      	str	r7, [r5, #0]
 800b808:	2900      	cmp	r1, #0
 800b80a:	d0cb      	beq.n	800b7a4 <__sflush_r+0x18>
 800b80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b810:	4299      	cmp	r1, r3
 800b812:	d002      	beq.n	800b81a <__sflush_r+0x8e>
 800b814:	4628      	mov	r0, r5
 800b816:	f001 fa45 	bl	800cca4 <_free_r>
 800b81a:	2000      	movs	r0, #0
 800b81c:	6360      	str	r0, [r4, #52]	; 0x34
 800b81e:	e7c2      	b.n	800b7a6 <__sflush_r+0x1a>
 800b820:	6a21      	ldr	r1, [r4, #32]
 800b822:	2301      	movs	r3, #1
 800b824:	4628      	mov	r0, r5
 800b826:	47b0      	blx	r6
 800b828:	1c41      	adds	r1, r0, #1
 800b82a:	d1c7      	bne.n	800b7bc <__sflush_r+0x30>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d0c4      	beq.n	800b7bc <__sflush_r+0x30>
 800b832:	2b1d      	cmp	r3, #29
 800b834:	d001      	beq.n	800b83a <__sflush_r+0xae>
 800b836:	2b16      	cmp	r3, #22
 800b838:	d101      	bne.n	800b83e <__sflush_r+0xb2>
 800b83a:	602f      	str	r7, [r5, #0]
 800b83c:	e7b2      	b.n	800b7a4 <__sflush_r+0x18>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b844:	81a3      	strh	r3, [r4, #12]
 800b846:	e7ae      	b.n	800b7a6 <__sflush_r+0x1a>
 800b848:	690f      	ldr	r7, [r1, #16]
 800b84a:	2f00      	cmp	r7, #0
 800b84c:	d0aa      	beq.n	800b7a4 <__sflush_r+0x18>
 800b84e:	0793      	lsls	r3, r2, #30
 800b850:	bf18      	it	ne
 800b852:	2300      	movne	r3, #0
 800b854:	680e      	ldr	r6, [r1, #0]
 800b856:	bf08      	it	eq
 800b858:	694b      	ldreq	r3, [r1, #20]
 800b85a:	1bf6      	subs	r6, r6, r7
 800b85c:	600f      	str	r7, [r1, #0]
 800b85e:	608b      	str	r3, [r1, #8]
 800b860:	2e00      	cmp	r6, #0
 800b862:	dd9f      	ble.n	800b7a4 <__sflush_r+0x18>
 800b864:	4633      	mov	r3, r6
 800b866:	463a      	mov	r2, r7
 800b868:	4628      	mov	r0, r5
 800b86a:	6a21      	ldr	r1, [r4, #32]
 800b86c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b870:	47e0      	blx	ip
 800b872:	2800      	cmp	r0, #0
 800b874:	dc06      	bgt.n	800b884 <__sflush_r+0xf8>
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	f04f 30ff 	mov.w	r0, #4294967295
 800b87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b880:	81a3      	strh	r3, [r4, #12]
 800b882:	e790      	b.n	800b7a6 <__sflush_r+0x1a>
 800b884:	4407      	add	r7, r0
 800b886:	1a36      	subs	r6, r6, r0
 800b888:	e7ea      	b.n	800b860 <__sflush_r+0xd4>
 800b88a:	bf00      	nop
 800b88c:	20400001 	.word	0x20400001

0800b890 <_fflush_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	690b      	ldr	r3, [r1, #16]
 800b894:	4605      	mov	r5, r0
 800b896:	460c      	mov	r4, r1
 800b898:	b913      	cbnz	r3, 800b8a0 <_fflush_r+0x10>
 800b89a:	2500      	movs	r5, #0
 800b89c:	4628      	mov	r0, r5
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	b118      	cbz	r0, 800b8aa <_fflush_r+0x1a>
 800b8a2:	6983      	ldr	r3, [r0, #24]
 800b8a4:	b90b      	cbnz	r3, 800b8aa <_fflush_r+0x1a>
 800b8a6:	f000 f887 	bl	800b9b8 <__sinit>
 800b8aa:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <_fflush_r+0x6c>)
 800b8ac:	429c      	cmp	r4, r3
 800b8ae:	d11b      	bne.n	800b8e8 <_fflush_r+0x58>
 800b8b0:	686c      	ldr	r4, [r5, #4]
 800b8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d0ef      	beq.n	800b89a <_fflush_r+0xa>
 800b8ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8bc:	07d0      	lsls	r0, r2, #31
 800b8be:	d404      	bmi.n	800b8ca <_fflush_r+0x3a>
 800b8c0:	0599      	lsls	r1, r3, #22
 800b8c2:	d402      	bmi.n	800b8ca <_fflush_r+0x3a>
 800b8c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8c6:	f000 fc92 	bl	800c1ee <__retarget_lock_acquire_recursive>
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	f7ff ff5d 	bl	800b78c <__sflush_r>
 800b8d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	07da      	lsls	r2, r3, #31
 800b8d8:	d4e0      	bmi.n	800b89c <_fflush_r+0xc>
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	059b      	lsls	r3, r3, #22
 800b8de:	d4dd      	bmi.n	800b89c <_fflush_r+0xc>
 800b8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8e2:	f000 fc85 	bl	800c1f0 <__retarget_lock_release_recursive>
 800b8e6:	e7d9      	b.n	800b89c <_fflush_r+0xc>
 800b8e8:	4b05      	ldr	r3, [pc, #20]	; (800b900 <_fflush_r+0x70>)
 800b8ea:	429c      	cmp	r4, r3
 800b8ec:	d101      	bne.n	800b8f2 <_fflush_r+0x62>
 800b8ee:	68ac      	ldr	r4, [r5, #8]
 800b8f0:	e7df      	b.n	800b8b2 <_fflush_r+0x22>
 800b8f2:	4b04      	ldr	r3, [pc, #16]	; (800b904 <_fflush_r+0x74>)
 800b8f4:	429c      	cmp	r4, r3
 800b8f6:	bf08      	it	eq
 800b8f8:	68ec      	ldreq	r4, [r5, #12]
 800b8fa:	e7da      	b.n	800b8b2 <_fflush_r+0x22>
 800b8fc:	0800dba4 	.word	0x0800dba4
 800b900:	0800dbc4 	.word	0x0800dbc4
 800b904:	0800db84 	.word	0x0800db84

0800b908 <std>:
 800b908:	2300      	movs	r3, #0
 800b90a:	b510      	push	{r4, lr}
 800b90c:	4604      	mov	r4, r0
 800b90e:	e9c0 3300 	strd	r3, r3, [r0]
 800b912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b916:	6083      	str	r3, [r0, #8]
 800b918:	8181      	strh	r1, [r0, #12]
 800b91a:	6643      	str	r3, [r0, #100]	; 0x64
 800b91c:	81c2      	strh	r2, [r0, #14]
 800b91e:	6183      	str	r3, [r0, #24]
 800b920:	4619      	mov	r1, r3
 800b922:	2208      	movs	r2, #8
 800b924:	305c      	adds	r0, #92	; 0x5c
 800b926:	f7fd f9a7 	bl	8008c78 <memset>
 800b92a:	4b05      	ldr	r3, [pc, #20]	; (800b940 <std+0x38>)
 800b92c:	6224      	str	r4, [r4, #32]
 800b92e:	6263      	str	r3, [r4, #36]	; 0x24
 800b930:	4b04      	ldr	r3, [pc, #16]	; (800b944 <std+0x3c>)
 800b932:	62a3      	str	r3, [r4, #40]	; 0x28
 800b934:	4b04      	ldr	r3, [pc, #16]	; (800b948 <std+0x40>)
 800b936:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b938:	4b04      	ldr	r3, [pc, #16]	; (800b94c <std+0x44>)
 800b93a:	6323      	str	r3, [r4, #48]	; 0x30
 800b93c:	bd10      	pop	{r4, pc}
 800b93e:	bf00      	nop
 800b940:	0800d481 	.word	0x0800d481
 800b944:	0800d4a3 	.word	0x0800d4a3
 800b948:	0800d4db 	.word	0x0800d4db
 800b94c:	0800d4ff 	.word	0x0800d4ff

0800b950 <_cleanup_r>:
 800b950:	4901      	ldr	r1, [pc, #4]	; (800b958 <_cleanup_r+0x8>)
 800b952:	f000 b8c1 	b.w	800bad8 <_fwalk_reent>
 800b956:	bf00      	nop
 800b958:	0800b891 	.word	0x0800b891

0800b95c <__sfmoreglue>:
 800b95c:	2268      	movs	r2, #104	; 0x68
 800b95e:	b570      	push	{r4, r5, r6, lr}
 800b960:	1e4d      	subs	r5, r1, #1
 800b962:	4355      	muls	r5, r2
 800b964:	460e      	mov	r6, r1
 800b966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b96a:	f001 fa03 	bl	800cd74 <_malloc_r>
 800b96e:	4604      	mov	r4, r0
 800b970:	b140      	cbz	r0, 800b984 <__sfmoreglue+0x28>
 800b972:	2100      	movs	r1, #0
 800b974:	e9c0 1600 	strd	r1, r6, [r0]
 800b978:	300c      	adds	r0, #12
 800b97a:	60a0      	str	r0, [r4, #8]
 800b97c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b980:	f7fd f97a 	bl	8008c78 <memset>
 800b984:	4620      	mov	r0, r4
 800b986:	bd70      	pop	{r4, r5, r6, pc}

0800b988 <__sfp_lock_acquire>:
 800b988:	4801      	ldr	r0, [pc, #4]	; (800b990 <__sfp_lock_acquire+0x8>)
 800b98a:	f000 bc30 	b.w	800c1ee <__retarget_lock_acquire_recursive>
 800b98e:	bf00      	nop
 800b990:	20000c71 	.word	0x20000c71

0800b994 <__sfp_lock_release>:
 800b994:	4801      	ldr	r0, [pc, #4]	; (800b99c <__sfp_lock_release+0x8>)
 800b996:	f000 bc2b 	b.w	800c1f0 <__retarget_lock_release_recursive>
 800b99a:	bf00      	nop
 800b99c:	20000c71 	.word	0x20000c71

0800b9a0 <__sinit_lock_acquire>:
 800b9a0:	4801      	ldr	r0, [pc, #4]	; (800b9a8 <__sinit_lock_acquire+0x8>)
 800b9a2:	f000 bc24 	b.w	800c1ee <__retarget_lock_acquire_recursive>
 800b9a6:	bf00      	nop
 800b9a8:	20000c72 	.word	0x20000c72

0800b9ac <__sinit_lock_release>:
 800b9ac:	4801      	ldr	r0, [pc, #4]	; (800b9b4 <__sinit_lock_release+0x8>)
 800b9ae:	f000 bc1f 	b.w	800c1f0 <__retarget_lock_release_recursive>
 800b9b2:	bf00      	nop
 800b9b4:	20000c72 	.word	0x20000c72

0800b9b8 <__sinit>:
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	f7ff fff0 	bl	800b9a0 <__sinit_lock_acquire>
 800b9c0:	69a3      	ldr	r3, [r4, #24]
 800b9c2:	b11b      	cbz	r3, 800b9cc <__sinit+0x14>
 800b9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9c8:	f7ff bff0 	b.w	800b9ac <__sinit_lock_release>
 800b9cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9d0:	6523      	str	r3, [r4, #80]	; 0x50
 800b9d2:	4b13      	ldr	r3, [pc, #76]	; (800ba20 <__sinit+0x68>)
 800b9d4:	4a13      	ldr	r2, [pc, #76]	; (800ba24 <__sinit+0x6c>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9da:	42a3      	cmp	r3, r4
 800b9dc:	bf08      	it	eq
 800b9de:	2301      	moveq	r3, #1
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	bf08      	it	eq
 800b9e4:	61a3      	streq	r3, [r4, #24]
 800b9e6:	f000 f81f 	bl	800ba28 <__sfp>
 800b9ea:	6060      	str	r0, [r4, #4]
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f000 f81b 	bl	800ba28 <__sfp>
 800b9f2:	60a0      	str	r0, [r4, #8]
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f000 f817 	bl	800ba28 <__sfp>
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	2104      	movs	r1, #4
 800b9fe:	60e0      	str	r0, [r4, #12]
 800ba00:	6860      	ldr	r0, [r4, #4]
 800ba02:	f7ff ff81 	bl	800b908 <std>
 800ba06:	2201      	movs	r2, #1
 800ba08:	2109      	movs	r1, #9
 800ba0a:	68a0      	ldr	r0, [r4, #8]
 800ba0c:	f7ff ff7c 	bl	800b908 <std>
 800ba10:	2202      	movs	r2, #2
 800ba12:	2112      	movs	r1, #18
 800ba14:	68e0      	ldr	r0, [r4, #12]
 800ba16:	f7ff ff77 	bl	800b908 <std>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	61a3      	str	r3, [r4, #24]
 800ba1e:	e7d1      	b.n	800b9c4 <__sinit+0xc>
 800ba20:	0800d8c4 	.word	0x0800d8c4
 800ba24:	0800b951 	.word	0x0800b951

0800ba28 <__sfp>:
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	4607      	mov	r7, r0
 800ba2c:	f7ff ffac 	bl	800b988 <__sfp_lock_acquire>
 800ba30:	4b1e      	ldr	r3, [pc, #120]	; (800baac <__sfp+0x84>)
 800ba32:	681e      	ldr	r6, [r3, #0]
 800ba34:	69b3      	ldr	r3, [r6, #24]
 800ba36:	b913      	cbnz	r3, 800ba3e <__sfp+0x16>
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f7ff ffbd 	bl	800b9b8 <__sinit>
 800ba3e:	3648      	adds	r6, #72	; 0x48
 800ba40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	d503      	bpl.n	800ba50 <__sfp+0x28>
 800ba48:	6833      	ldr	r3, [r6, #0]
 800ba4a:	b30b      	cbz	r3, 800ba90 <__sfp+0x68>
 800ba4c:	6836      	ldr	r6, [r6, #0]
 800ba4e:	e7f7      	b.n	800ba40 <__sfp+0x18>
 800ba50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba54:	b9d5      	cbnz	r5, 800ba8c <__sfp+0x64>
 800ba56:	4b16      	ldr	r3, [pc, #88]	; (800bab0 <__sfp+0x88>)
 800ba58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba5c:	60e3      	str	r3, [r4, #12]
 800ba5e:	6665      	str	r5, [r4, #100]	; 0x64
 800ba60:	f000 fbc4 	bl	800c1ec <__retarget_lock_init_recursive>
 800ba64:	f7ff ff96 	bl	800b994 <__sfp_lock_release>
 800ba68:	2208      	movs	r2, #8
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba74:	6025      	str	r5, [r4, #0]
 800ba76:	61a5      	str	r5, [r4, #24]
 800ba78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba7c:	f7fd f8fc 	bl	8008c78 <memset>
 800ba80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba88:	4620      	mov	r0, r4
 800ba8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba8c:	3468      	adds	r4, #104	; 0x68
 800ba8e:	e7d9      	b.n	800ba44 <__sfp+0x1c>
 800ba90:	2104      	movs	r1, #4
 800ba92:	4638      	mov	r0, r7
 800ba94:	f7ff ff62 	bl	800b95c <__sfmoreglue>
 800ba98:	4604      	mov	r4, r0
 800ba9a:	6030      	str	r0, [r6, #0]
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d1d5      	bne.n	800ba4c <__sfp+0x24>
 800baa0:	f7ff ff78 	bl	800b994 <__sfp_lock_release>
 800baa4:	230c      	movs	r3, #12
 800baa6:	603b      	str	r3, [r7, #0]
 800baa8:	e7ee      	b.n	800ba88 <__sfp+0x60>
 800baaa:	bf00      	nop
 800baac:	0800d8c4 	.word	0x0800d8c4
 800bab0:	ffff0001 	.word	0xffff0001

0800bab4 <fiprintf>:
 800bab4:	b40e      	push	{r1, r2, r3}
 800bab6:	b503      	push	{r0, r1, lr}
 800bab8:	4601      	mov	r1, r0
 800baba:	ab03      	add	r3, sp, #12
 800babc:	4805      	ldr	r0, [pc, #20]	; (800bad4 <fiprintf+0x20>)
 800babe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bac2:	6800      	ldr	r0, [r0, #0]
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	f001 fb4d 	bl	800d164 <_vfiprintf_r>
 800baca:	b002      	add	sp, #8
 800bacc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bad0:	b003      	add	sp, #12
 800bad2:	4770      	bx	lr
 800bad4:	20000610 	.word	0x20000610

0800bad8 <_fwalk_reent>:
 800bad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800badc:	4606      	mov	r6, r0
 800bade:	4688      	mov	r8, r1
 800bae0:	2700      	movs	r7, #0
 800bae2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800baea:	f1b9 0901 	subs.w	r9, r9, #1
 800baee:	d505      	bpl.n	800bafc <_fwalk_reent+0x24>
 800baf0:	6824      	ldr	r4, [r4, #0]
 800baf2:	2c00      	cmp	r4, #0
 800baf4:	d1f7      	bne.n	800bae6 <_fwalk_reent+0xe>
 800baf6:	4638      	mov	r0, r7
 800baf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bafc:	89ab      	ldrh	r3, [r5, #12]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d907      	bls.n	800bb12 <_fwalk_reent+0x3a>
 800bb02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb06:	3301      	adds	r3, #1
 800bb08:	d003      	beq.n	800bb12 <_fwalk_reent+0x3a>
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	47c0      	blx	r8
 800bb10:	4307      	orrs	r7, r0
 800bb12:	3568      	adds	r5, #104	; 0x68
 800bb14:	e7e9      	b.n	800baea <_fwalk_reent+0x12>

0800bb16 <rshift>:
 800bb16:	6903      	ldr	r3, [r0, #16]
 800bb18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb1c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb20:	f100 0414 	add.w	r4, r0, #20
 800bb24:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb28:	dd46      	ble.n	800bbb8 <rshift+0xa2>
 800bb2a:	f011 011f 	ands.w	r1, r1, #31
 800bb2e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb32:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb36:	d10c      	bne.n	800bb52 <rshift+0x3c>
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f100 0710 	add.w	r7, r0, #16
 800bb3e:	42b1      	cmp	r1, r6
 800bb40:	d335      	bcc.n	800bbae <rshift+0x98>
 800bb42:	1a9b      	subs	r3, r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	1eea      	subs	r2, r5, #3
 800bb48:	4296      	cmp	r6, r2
 800bb4a:	bf38      	it	cc
 800bb4c:	2300      	movcc	r3, #0
 800bb4e:	4423      	add	r3, r4
 800bb50:	e015      	b.n	800bb7e <rshift+0x68>
 800bb52:	46a1      	mov	r9, r4
 800bb54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bb58:	f1c1 0820 	rsb	r8, r1, #32
 800bb5c:	40cf      	lsrs	r7, r1
 800bb5e:	f105 0e04 	add.w	lr, r5, #4
 800bb62:	4576      	cmp	r6, lr
 800bb64:	46f4      	mov	ip, lr
 800bb66:	d816      	bhi.n	800bb96 <rshift+0x80>
 800bb68:	1a9a      	subs	r2, r3, r2
 800bb6a:	0092      	lsls	r2, r2, #2
 800bb6c:	3a04      	subs	r2, #4
 800bb6e:	3501      	adds	r5, #1
 800bb70:	42ae      	cmp	r6, r5
 800bb72:	bf38      	it	cc
 800bb74:	2200      	movcc	r2, #0
 800bb76:	18a3      	adds	r3, r4, r2
 800bb78:	50a7      	str	r7, [r4, r2]
 800bb7a:	b107      	cbz	r7, 800bb7e <rshift+0x68>
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	42a3      	cmp	r3, r4
 800bb80:	eba3 0204 	sub.w	r2, r3, r4
 800bb84:	bf08      	it	eq
 800bb86:	2300      	moveq	r3, #0
 800bb88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb8c:	6102      	str	r2, [r0, #16]
 800bb8e:	bf08      	it	eq
 800bb90:	6143      	streq	r3, [r0, #20]
 800bb92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb96:	f8dc c000 	ldr.w	ip, [ip]
 800bb9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb9e:	ea4c 0707 	orr.w	r7, ip, r7
 800bba2:	f849 7b04 	str.w	r7, [r9], #4
 800bba6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbaa:	40cf      	lsrs	r7, r1
 800bbac:	e7d9      	b.n	800bb62 <rshift+0x4c>
 800bbae:	f851 cb04 	ldr.w	ip, [r1], #4
 800bbb2:	f847 cf04 	str.w	ip, [r7, #4]!
 800bbb6:	e7c2      	b.n	800bb3e <rshift+0x28>
 800bbb8:	4623      	mov	r3, r4
 800bbba:	e7e0      	b.n	800bb7e <rshift+0x68>

0800bbbc <__hexdig_fun>:
 800bbbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bbc0:	2b09      	cmp	r3, #9
 800bbc2:	d802      	bhi.n	800bbca <__hexdig_fun+0xe>
 800bbc4:	3820      	subs	r0, #32
 800bbc6:	b2c0      	uxtb	r0, r0
 800bbc8:	4770      	bx	lr
 800bbca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bbce:	2b05      	cmp	r3, #5
 800bbd0:	d801      	bhi.n	800bbd6 <__hexdig_fun+0x1a>
 800bbd2:	3847      	subs	r0, #71	; 0x47
 800bbd4:	e7f7      	b.n	800bbc6 <__hexdig_fun+0xa>
 800bbd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bbda:	2b05      	cmp	r3, #5
 800bbdc:	d801      	bhi.n	800bbe2 <__hexdig_fun+0x26>
 800bbde:	3827      	subs	r0, #39	; 0x27
 800bbe0:	e7f1      	b.n	800bbc6 <__hexdig_fun+0xa>
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	4770      	bx	lr
	...

0800bbe8 <__gethex>:
 800bbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbec:	b08b      	sub	sp, #44	; 0x2c
 800bbee:	9305      	str	r3, [sp, #20]
 800bbf0:	4bb2      	ldr	r3, [pc, #712]	; (800bebc <__gethex+0x2d4>)
 800bbf2:	9002      	str	r0, [sp, #8]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	468b      	mov	fp, r1
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	4690      	mov	r8, r2
 800bbfc:	9303      	str	r3, [sp, #12]
 800bbfe:	f7f4 fb1d 	bl	800023c <strlen>
 800bc02:	4682      	mov	sl, r0
 800bc04:	9b03      	ldr	r3, [sp, #12]
 800bc06:	f8db 2000 	ldr.w	r2, [fp]
 800bc0a:	4403      	add	r3, r0
 800bc0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bc10:	9306      	str	r3, [sp, #24]
 800bc12:	1c93      	adds	r3, r2, #2
 800bc14:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bc18:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bc1c:	32fe      	adds	r2, #254	; 0xfe
 800bc1e:	18d1      	adds	r1, r2, r3
 800bc20:	461f      	mov	r7, r3
 800bc22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc26:	9101      	str	r1, [sp, #4]
 800bc28:	2830      	cmp	r0, #48	; 0x30
 800bc2a:	d0f8      	beq.n	800bc1e <__gethex+0x36>
 800bc2c:	f7ff ffc6 	bl	800bbbc <__hexdig_fun>
 800bc30:	4604      	mov	r4, r0
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d13a      	bne.n	800bcac <__gethex+0xc4>
 800bc36:	4652      	mov	r2, sl
 800bc38:	4638      	mov	r0, r7
 800bc3a:	9903      	ldr	r1, [sp, #12]
 800bc3c:	f001 fc63 	bl	800d506 <strncmp>
 800bc40:	4605      	mov	r5, r0
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d166      	bne.n	800bd14 <__gethex+0x12c>
 800bc46:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bc4a:	eb07 060a 	add.w	r6, r7, sl
 800bc4e:	f7ff ffb5 	bl	800bbbc <__hexdig_fun>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d060      	beq.n	800bd18 <__gethex+0x130>
 800bc56:	4633      	mov	r3, r6
 800bc58:	7818      	ldrb	r0, [r3, #0]
 800bc5a:	461f      	mov	r7, r3
 800bc5c:	2830      	cmp	r0, #48	; 0x30
 800bc5e:	f103 0301 	add.w	r3, r3, #1
 800bc62:	d0f9      	beq.n	800bc58 <__gethex+0x70>
 800bc64:	f7ff ffaa 	bl	800bbbc <__hexdig_fun>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	fab0 f480 	clz	r4, r0
 800bc6e:	4635      	mov	r5, r6
 800bc70:	0964      	lsrs	r4, r4, #5
 800bc72:	9301      	str	r3, [sp, #4]
 800bc74:	463a      	mov	r2, r7
 800bc76:	4616      	mov	r6, r2
 800bc78:	7830      	ldrb	r0, [r6, #0]
 800bc7a:	3201      	adds	r2, #1
 800bc7c:	f7ff ff9e 	bl	800bbbc <__hexdig_fun>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d1f8      	bne.n	800bc76 <__gethex+0x8e>
 800bc84:	4652      	mov	r2, sl
 800bc86:	4630      	mov	r0, r6
 800bc88:	9903      	ldr	r1, [sp, #12]
 800bc8a:	f001 fc3c 	bl	800d506 <strncmp>
 800bc8e:	b980      	cbnz	r0, 800bcb2 <__gethex+0xca>
 800bc90:	b94d      	cbnz	r5, 800bca6 <__gethex+0xbe>
 800bc92:	eb06 050a 	add.w	r5, r6, sl
 800bc96:	462a      	mov	r2, r5
 800bc98:	4616      	mov	r6, r2
 800bc9a:	7830      	ldrb	r0, [r6, #0]
 800bc9c:	3201      	adds	r2, #1
 800bc9e:	f7ff ff8d 	bl	800bbbc <__hexdig_fun>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d1f8      	bne.n	800bc98 <__gethex+0xb0>
 800bca6:	1bad      	subs	r5, r5, r6
 800bca8:	00ad      	lsls	r5, r5, #2
 800bcaa:	e004      	b.n	800bcb6 <__gethex+0xce>
 800bcac:	2400      	movs	r4, #0
 800bcae:	4625      	mov	r5, r4
 800bcb0:	e7e0      	b.n	800bc74 <__gethex+0x8c>
 800bcb2:	2d00      	cmp	r5, #0
 800bcb4:	d1f7      	bne.n	800bca6 <__gethex+0xbe>
 800bcb6:	7833      	ldrb	r3, [r6, #0]
 800bcb8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bcbc:	2b50      	cmp	r3, #80	; 0x50
 800bcbe:	d139      	bne.n	800bd34 <__gethex+0x14c>
 800bcc0:	7873      	ldrb	r3, [r6, #1]
 800bcc2:	2b2b      	cmp	r3, #43	; 0x2b
 800bcc4:	d02a      	beq.n	800bd1c <__gethex+0x134>
 800bcc6:	2b2d      	cmp	r3, #45	; 0x2d
 800bcc8:	d02c      	beq.n	800bd24 <__gethex+0x13c>
 800bcca:	f04f 0900 	mov.w	r9, #0
 800bcce:	1c71      	adds	r1, r6, #1
 800bcd0:	7808      	ldrb	r0, [r1, #0]
 800bcd2:	f7ff ff73 	bl	800bbbc <__hexdig_fun>
 800bcd6:	1e43      	subs	r3, r0, #1
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b18      	cmp	r3, #24
 800bcdc:	d82a      	bhi.n	800bd34 <__gethex+0x14c>
 800bcde:	f1a0 0210 	sub.w	r2, r0, #16
 800bce2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bce6:	f7ff ff69 	bl	800bbbc <__hexdig_fun>
 800bcea:	1e43      	subs	r3, r0, #1
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b18      	cmp	r3, #24
 800bcf0:	d91b      	bls.n	800bd2a <__gethex+0x142>
 800bcf2:	f1b9 0f00 	cmp.w	r9, #0
 800bcf6:	d000      	beq.n	800bcfa <__gethex+0x112>
 800bcf8:	4252      	negs	r2, r2
 800bcfa:	4415      	add	r5, r2
 800bcfc:	f8cb 1000 	str.w	r1, [fp]
 800bd00:	b1d4      	cbz	r4, 800bd38 <__gethex+0x150>
 800bd02:	9b01      	ldr	r3, [sp, #4]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	bf14      	ite	ne
 800bd08:	2700      	movne	r7, #0
 800bd0a:	2706      	moveq	r7, #6
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	b00b      	add	sp, #44	; 0x2c
 800bd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd14:	463e      	mov	r6, r7
 800bd16:	4625      	mov	r5, r4
 800bd18:	2401      	movs	r4, #1
 800bd1a:	e7cc      	b.n	800bcb6 <__gethex+0xce>
 800bd1c:	f04f 0900 	mov.w	r9, #0
 800bd20:	1cb1      	adds	r1, r6, #2
 800bd22:	e7d5      	b.n	800bcd0 <__gethex+0xe8>
 800bd24:	f04f 0901 	mov.w	r9, #1
 800bd28:	e7fa      	b.n	800bd20 <__gethex+0x138>
 800bd2a:	230a      	movs	r3, #10
 800bd2c:	fb03 0202 	mla	r2, r3, r2, r0
 800bd30:	3a10      	subs	r2, #16
 800bd32:	e7d6      	b.n	800bce2 <__gethex+0xfa>
 800bd34:	4631      	mov	r1, r6
 800bd36:	e7e1      	b.n	800bcfc <__gethex+0x114>
 800bd38:	4621      	mov	r1, r4
 800bd3a:	1bf3      	subs	r3, r6, r7
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	2b07      	cmp	r3, #7
 800bd40:	dc0a      	bgt.n	800bd58 <__gethex+0x170>
 800bd42:	9802      	ldr	r0, [sp, #8]
 800bd44:	f000 fae2 	bl	800c30c <_Balloc>
 800bd48:	4604      	mov	r4, r0
 800bd4a:	b940      	cbnz	r0, 800bd5e <__gethex+0x176>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	21de      	movs	r1, #222	; 0xde
 800bd50:	4b5b      	ldr	r3, [pc, #364]	; (800bec0 <__gethex+0x2d8>)
 800bd52:	485c      	ldr	r0, [pc, #368]	; (800bec4 <__gethex+0x2dc>)
 800bd54:	f7fe fe82 	bl	800aa5c <__assert_func>
 800bd58:	3101      	adds	r1, #1
 800bd5a:	105b      	asrs	r3, r3, #1
 800bd5c:	e7ef      	b.n	800bd3e <__gethex+0x156>
 800bd5e:	f04f 0b00 	mov.w	fp, #0
 800bd62:	f100 0914 	add.w	r9, r0, #20
 800bd66:	f1ca 0301 	rsb	r3, sl, #1
 800bd6a:	f8cd 9010 	str.w	r9, [sp, #16]
 800bd6e:	f8cd b004 	str.w	fp, [sp, #4]
 800bd72:	9308      	str	r3, [sp, #32]
 800bd74:	42b7      	cmp	r7, r6
 800bd76:	d33f      	bcc.n	800bdf8 <__gethex+0x210>
 800bd78:	9f04      	ldr	r7, [sp, #16]
 800bd7a:	9b01      	ldr	r3, [sp, #4]
 800bd7c:	f847 3b04 	str.w	r3, [r7], #4
 800bd80:	eba7 0709 	sub.w	r7, r7, r9
 800bd84:	10bf      	asrs	r7, r7, #2
 800bd86:	6127      	str	r7, [r4, #16]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fbb1 	bl	800c4f0 <__hi0bits>
 800bd8e:	017f      	lsls	r7, r7, #5
 800bd90:	f8d8 6000 	ldr.w	r6, [r8]
 800bd94:	1a3f      	subs	r7, r7, r0
 800bd96:	42b7      	cmp	r7, r6
 800bd98:	dd62      	ble.n	800be60 <__gethex+0x278>
 800bd9a:	1bbf      	subs	r7, r7, r6
 800bd9c:	4639      	mov	r1, r7
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 ff4b 	bl	800cc3a <__any_on>
 800bda4:	4682      	mov	sl, r0
 800bda6:	b1a8      	cbz	r0, 800bdd4 <__gethex+0x1ec>
 800bda8:	f04f 0a01 	mov.w	sl, #1
 800bdac:	1e7b      	subs	r3, r7, #1
 800bdae:	1159      	asrs	r1, r3, #5
 800bdb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bdb4:	f003 021f 	and.w	r2, r3, #31
 800bdb8:	fa0a f202 	lsl.w	r2, sl, r2
 800bdbc:	420a      	tst	r2, r1
 800bdbe:	d009      	beq.n	800bdd4 <__gethex+0x1ec>
 800bdc0:	4553      	cmp	r3, sl
 800bdc2:	dd05      	ble.n	800bdd0 <__gethex+0x1e8>
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	1eb9      	subs	r1, r7, #2
 800bdc8:	f000 ff37 	bl	800cc3a <__any_on>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d144      	bne.n	800be5a <__gethex+0x272>
 800bdd0:	f04f 0a02 	mov.w	sl, #2
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f7ff fe9d 	bl	800bb16 <rshift>
 800bddc:	443d      	add	r5, r7
 800bdde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bde2:	42ab      	cmp	r3, r5
 800bde4:	da4a      	bge.n	800be7c <__gethex+0x294>
 800bde6:	4621      	mov	r1, r4
 800bde8:	9802      	ldr	r0, [sp, #8]
 800bdea:	f000 facf 	bl	800c38c <_Bfree>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bdf2:	27a3      	movs	r7, #163	; 0xa3
 800bdf4:	6013      	str	r3, [r2, #0]
 800bdf6:	e789      	b.n	800bd0c <__gethex+0x124>
 800bdf8:	1e73      	subs	r3, r6, #1
 800bdfa:	9a06      	ldr	r2, [sp, #24]
 800bdfc:	9307      	str	r3, [sp, #28]
 800bdfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be02:	4293      	cmp	r3, r2
 800be04:	d019      	beq.n	800be3a <__gethex+0x252>
 800be06:	f1bb 0f20 	cmp.w	fp, #32
 800be0a:	d107      	bne.n	800be1c <__gethex+0x234>
 800be0c:	9b04      	ldr	r3, [sp, #16]
 800be0e:	9a01      	ldr	r2, [sp, #4]
 800be10:	f843 2b04 	str.w	r2, [r3], #4
 800be14:	9304      	str	r3, [sp, #16]
 800be16:	2300      	movs	r3, #0
 800be18:	469b      	mov	fp, r3
 800be1a:	9301      	str	r3, [sp, #4]
 800be1c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800be20:	f7ff fecc 	bl	800bbbc <__hexdig_fun>
 800be24:	9b01      	ldr	r3, [sp, #4]
 800be26:	f000 000f 	and.w	r0, r0, #15
 800be2a:	fa00 f00b 	lsl.w	r0, r0, fp
 800be2e:	4303      	orrs	r3, r0
 800be30:	9301      	str	r3, [sp, #4]
 800be32:	f10b 0b04 	add.w	fp, fp, #4
 800be36:	9b07      	ldr	r3, [sp, #28]
 800be38:	e00d      	b.n	800be56 <__gethex+0x26e>
 800be3a:	9a08      	ldr	r2, [sp, #32]
 800be3c:	1e73      	subs	r3, r6, #1
 800be3e:	4413      	add	r3, r2
 800be40:	42bb      	cmp	r3, r7
 800be42:	d3e0      	bcc.n	800be06 <__gethex+0x21e>
 800be44:	4618      	mov	r0, r3
 800be46:	4652      	mov	r2, sl
 800be48:	9903      	ldr	r1, [sp, #12]
 800be4a:	9309      	str	r3, [sp, #36]	; 0x24
 800be4c:	f001 fb5b 	bl	800d506 <strncmp>
 800be50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be52:	2800      	cmp	r0, #0
 800be54:	d1d7      	bne.n	800be06 <__gethex+0x21e>
 800be56:	461e      	mov	r6, r3
 800be58:	e78c      	b.n	800bd74 <__gethex+0x18c>
 800be5a:	f04f 0a03 	mov.w	sl, #3
 800be5e:	e7b9      	b.n	800bdd4 <__gethex+0x1ec>
 800be60:	da09      	bge.n	800be76 <__gethex+0x28e>
 800be62:	1bf7      	subs	r7, r6, r7
 800be64:	4621      	mov	r1, r4
 800be66:	463a      	mov	r2, r7
 800be68:	9802      	ldr	r0, [sp, #8]
 800be6a:	f000 fca7 	bl	800c7bc <__lshift>
 800be6e:	4604      	mov	r4, r0
 800be70:	1bed      	subs	r5, r5, r7
 800be72:	f100 0914 	add.w	r9, r0, #20
 800be76:	f04f 0a00 	mov.w	sl, #0
 800be7a:	e7b0      	b.n	800bdde <__gethex+0x1f6>
 800be7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800be80:	42a8      	cmp	r0, r5
 800be82:	dd72      	ble.n	800bf6a <__gethex+0x382>
 800be84:	1b45      	subs	r5, r0, r5
 800be86:	42ae      	cmp	r6, r5
 800be88:	dc35      	bgt.n	800bef6 <__gethex+0x30e>
 800be8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d029      	beq.n	800bee6 <__gethex+0x2fe>
 800be92:	2b03      	cmp	r3, #3
 800be94:	d02b      	beq.n	800beee <__gethex+0x306>
 800be96:	2b01      	cmp	r3, #1
 800be98:	d11c      	bne.n	800bed4 <__gethex+0x2ec>
 800be9a:	42ae      	cmp	r6, r5
 800be9c:	d11a      	bne.n	800bed4 <__gethex+0x2ec>
 800be9e:	2e01      	cmp	r6, #1
 800bea0:	d112      	bne.n	800bec8 <__gethex+0x2e0>
 800bea2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bea6:	9a05      	ldr	r2, [sp, #20]
 800bea8:	2762      	movs	r7, #98	; 0x62
 800beaa:	6013      	str	r3, [r2, #0]
 800beac:	2301      	movs	r3, #1
 800beae:	6123      	str	r3, [r4, #16]
 800beb0:	f8c9 3000 	str.w	r3, [r9]
 800beb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800beb6:	601c      	str	r4, [r3, #0]
 800beb8:	e728      	b.n	800bd0c <__gethex+0x124>
 800beba:	bf00      	nop
 800bebc:	0800dc4c 	.word	0x0800dc4c
 800bec0:	0800db71 	.word	0x0800db71
 800bec4:	0800dbe4 	.word	0x0800dbe4
 800bec8:	4620      	mov	r0, r4
 800beca:	1e71      	subs	r1, r6, #1
 800becc:	f000 feb5 	bl	800cc3a <__any_on>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d1e6      	bne.n	800bea2 <__gethex+0x2ba>
 800bed4:	4621      	mov	r1, r4
 800bed6:	9802      	ldr	r0, [sp, #8]
 800bed8:	f000 fa58 	bl	800c38c <_Bfree>
 800bedc:	2300      	movs	r3, #0
 800bede:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bee0:	2750      	movs	r7, #80	; 0x50
 800bee2:	6013      	str	r3, [r2, #0]
 800bee4:	e712      	b.n	800bd0c <__gethex+0x124>
 800bee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1f3      	bne.n	800bed4 <__gethex+0x2ec>
 800beec:	e7d9      	b.n	800bea2 <__gethex+0x2ba>
 800beee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1d6      	bne.n	800bea2 <__gethex+0x2ba>
 800bef4:	e7ee      	b.n	800bed4 <__gethex+0x2ec>
 800bef6:	1e6f      	subs	r7, r5, #1
 800bef8:	f1ba 0f00 	cmp.w	sl, #0
 800befc:	d132      	bne.n	800bf64 <__gethex+0x37c>
 800befe:	b127      	cbz	r7, 800bf0a <__gethex+0x322>
 800bf00:	4639      	mov	r1, r7
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 fe99 	bl	800cc3a <__any_on>
 800bf08:	4682      	mov	sl, r0
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	117b      	asrs	r3, r7, #5
 800bf0e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bf12:	f007 071f 	and.w	r7, r7, #31
 800bf16:	fa01 f707 	lsl.w	r7, r1, r7
 800bf1a:	421f      	tst	r7, r3
 800bf1c:	f04f 0702 	mov.w	r7, #2
 800bf20:	4629      	mov	r1, r5
 800bf22:	4620      	mov	r0, r4
 800bf24:	bf18      	it	ne
 800bf26:	f04a 0a02 	orrne.w	sl, sl, #2
 800bf2a:	1b76      	subs	r6, r6, r5
 800bf2c:	f7ff fdf3 	bl	800bb16 <rshift>
 800bf30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bf34:	f1ba 0f00 	cmp.w	sl, #0
 800bf38:	d048      	beq.n	800bfcc <__gethex+0x3e4>
 800bf3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d015      	beq.n	800bf6e <__gethex+0x386>
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d017      	beq.n	800bf76 <__gethex+0x38e>
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d109      	bne.n	800bf5e <__gethex+0x376>
 800bf4a:	f01a 0f02 	tst.w	sl, #2
 800bf4e:	d006      	beq.n	800bf5e <__gethex+0x376>
 800bf50:	f8d9 0000 	ldr.w	r0, [r9]
 800bf54:	ea4a 0a00 	orr.w	sl, sl, r0
 800bf58:	f01a 0f01 	tst.w	sl, #1
 800bf5c:	d10e      	bne.n	800bf7c <__gethex+0x394>
 800bf5e:	f047 0710 	orr.w	r7, r7, #16
 800bf62:	e033      	b.n	800bfcc <__gethex+0x3e4>
 800bf64:	f04f 0a01 	mov.w	sl, #1
 800bf68:	e7cf      	b.n	800bf0a <__gethex+0x322>
 800bf6a:	2701      	movs	r7, #1
 800bf6c:	e7e2      	b.n	800bf34 <__gethex+0x34c>
 800bf6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf70:	f1c3 0301 	rsb	r3, r3, #1
 800bf74:	9315      	str	r3, [sp, #84]	; 0x54
 800bf76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d0f0      	beq.n	800bf5e <__gethex+0x376>
 800bf7c:	f04f 0c00 	mov.w	ip, #0
 800bf80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf84:	f104 0314 	add.w	r3, r4, #20
 800bf88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf90:	4618      	mov	r0, r3
 800bf92:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf96:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bf9a:	d01c      	beq.n	800bfd6 <__gethex+0x3ee>
 800bf9c:	3201      	adds	r2, #1
 800bf9e:	6002      	str	r2, [r0, #0]
 800bfa0:	2f02      	cmp	r7, #2
 800bfa2:	f104 0314 	add.w	r3, r4, #20
 800bfa6:	d13d      	bne.n	800c024 <__gethex+0x43c>
 800bfa8:	f8d8 2000 	ldr.w	r2, [r8]
 800bfac:	3a01      	subs	r2, #1
 800bfae:	42b2      	cmp	r2, r6
 800bfb0:	d10a      	bne.n	800bfc8 <__gethex+0x3e0>
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	1171      	asrs	r1, r6, #5
 800bfb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfba:	f006 061f 	and.w	r6, r6, #31
 800bfbe:	fa02 f606 	lsl.w	r6, r2, r6
 800bfc2:	421e      	tst	r6, r3
 800bfc4:	bf18      	it	ne
 800bfc6:	4617      	movne	r7, r2
 800bfc8:	f047 0720 	orr.w	r7, r7, #32
 800bfcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfce:	601c      	str	r4, [r3, #0]
 800bfd0:	9b05      	ldr	r3, [sp, #20]
 800bfd2:	601d      	str	r5, [r3, #0]
 800bfd4:	e69a      	b.n	800bd0c <__gethex+0x124>
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	f843 cc04 	str.w	ip, [r3, #-4]
 800bfdc:	d8d8      	bhi.n	800bf90 <__gethex+0x3a8>
 800bfde:	68a3      	ldr	r3, [r4, #8]
 800bfe0:	459b      	cmp	fp, r3
 800bfe2:	db17      	blt.n	800c014 <__gethex+0x42c>
 800bfe4:	6861      	ldr	r1, [r4, #4]
 800bfe6:	9802      	ldr	r0, [sp, #8]
 800bfe8:	3101      	adds	r1, #1
 800bfea:	f000 f98f 	bl	800c30c <_Balloc>
 800bfee:	4681      	mov	r9, r0
 800bff0:	b918      	cbnz	r0, 800bffa <__gethex+0x412>
 800bff2:	4602      	mov	r2, r0
 800bff4:	2184      	movs	r1, #132	; 0x84
 800bff6:	4b19      	ldr	r3, [pc, #100]	; (800c05c <__gethex+0x474>)
 800bff8:	e6ab      	b.n	800bd52 <__gethex+0x16a>
 800bffa:	6922      	ldr	r2, [r4, #16]
 800bffc:	f104 010c 	add.w	r1, r4, #12
 800c000:	3202      	adds	r2, #2
 800c002:	0092      	lsls	r2, r2, #2
 800c004:	300c      	adds	r0, #12
 800c006:	f7fc fe29 	bl	8008c5c <memcpy>
 800c00a:	4621      	mov	r1, r4
 800c00c:	9802      	ldr	r0, [sp, #8]
 800c00e:	f000 f9bd 	bl	800c38c <_Bfree>
 800c012:	464c      	mov	r4, r9
 800c014:	6923      	ldr	r3, [r4, #16]
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	6122      	str	r2, [r4, #16]
 800c01a:	2201      	movs	r2, #1
 800c01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c020:	615a      	str	r2, [r3, #20]
 800c022:	e7bd      	b.n	800bfa0 <__gethex+0x3b8>
 800c024:	6922      	ldr	r2, [r4, #16]
 800c026:	455a      	cmp	r2, fp
 800c028:	dd0b      	ble.n	800c042 <__gethex+0x45a>
 800c02a:	2101      	movs	r1, #1
 800c02c:	4620      	mov	r0, r4
 800c02e:	f7ff fd72 	bl	800bb16 <rshift>
 800c032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c036:	3501      	adds	r5, #1
 800c038:	42ab      	cmp	r3, r5
 800c03a:	f6ff aed4 	blt.w	800bde6 <__gethex+0x1fe>
 800c03e:	2701      	movs	r7, #1
 800c040:	e7c2      	b.n	800bfc8 <__gethex+0x3e0>
 800c042:	f016 061f 	ands.w	r6, r6, #31
 800c046:	d0fa      	beq.n	800c03e <__gethex+0x456>
 800c048:	4453      	add	r3, sl
 800c04a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c04e:	f000 fa4f 	bl	800c4f0 <__hi0bits>
 800c052:	f1c6 0620 	rsb	r6, r6, #32
 800c056:	42b0      	cmp	r0, r6
 800c058:	dbe7      	blt.n	800c02a <__gethex+0x442>
 800c05a:	e7f0      	b.n	800c03e <__gethex+0x456>
 800c05c:	0800db71 	.word	0x0800db71

0800c060 <L_shift>:
 800c060:	f1c2 0208 	rsb	r2, r2, #8
 800c064:	0092      	lsls	r2, r2, #2
 800c066:	b570      	push	{r4, r5, r6, lr}
 800c068:	f1c2 0620 	rsb	r6, r2, #32
 800c06c:	6843      	ldr	r3, [r0, #4]
 800c06e:	6804      	ldr	r4, [r0, #0]
 800c070:	fa03 f506 	lsl.w	r5, r3, r6
 800c074:	432c      	orrs	r4, r5
 800c076:	40d3      	lsrs	r3, r2
 800c078:	6004      	str	r4, [r0, #0]
 800c07a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c07e:	4288      	cmp	r0, r1
 800c080:	d3f4      	bcc.n	800c06c <L_shift+0xc>
 800c082:	bd70      	pop	{r4, r5, r6, pc}

0800c084 <__match>:
 800c084:	b530      	push	{r4, r5, lr}
 800c086:	6803      	ldr	r3, [r0, #0]
 800c088:	3301      	adds	r3, #1
 800c08a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c08e:	b914      	cbnz	r4, 800c096 <__match+0x12>
 800c090:	6003      	str	r3, [r0, #0]
 800c092:	2001      	movs	r0, #1
 800c094:	bd30      	pop	{r4, r5, pc}
 800c096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c09a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c09e:	2d19      	cmp	r5, #25
 800c0a0:	bf98      	it	ls
 800c0a2:	3220      	addls	r2, #32
 800c0a4:	42a2      	cmp	r2, r4
 800c0a6:	d0f0      	beq.n	800c08a <__match+0x6>
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e7f3      	b.n	800c094 <__match+0x10>

0800c0ac <__hexnan>:
 800c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b0:	2500      	movs	r5, #0
 800c0b2:	680b      	ldr	r3, [r1, #0]
 800c0b4:	4682      	mov	sl, r0
 800c0b6:	115e      	asrs	r6, r3, #5
 800c0b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0bc:	f013 031f 	ands.w	r3, r3, #31
 800c0c0:	bf18      	it	ne
 800c0c2:	3604      	addne	r6, #4
 800c0c4:	1f37      	subs	r7, r6, #4
 800c0c6:	46b9      	mov	r9, r7
 800c0c8:	463c      	mov	r4, r7
 800c0ca:	46ab      	mov	fp, r5
 800c0cc:	b087      	sub	sp, #28
 800c0ce:	4690      	mov	r8, r2
 800c0d0:	6802      	ldr	r2, [r0, #0]
 800c0d2:	9301      	str	r3, [sp, #4]
 800c0d4:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0d8:	9502      	str	r5, [sp, #8]
 800c0da:	7851      	ldrb	r1, [r2, #1]
 800c0dc:	1c53      	adds	r3, r2, #1
 800c0de:	9303      	str	r3, [sp, #12]
 800c0e0:	b341      	cbz	r1, 800c134 <__hexnan+0x88>
 800c0e2:	4608      	mov	r0, r1
 800c0e4:	9205      	str	r2, [sp, #20]
 800c0e6:	9104      	str	r1, [sp, #16]
 800c0e8:	f7ff fd68 	bl	800bbbc <__hexdig_fun>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d14f      	bne.n	800c190 <__hexnan+0xe4>
 800c0f0:	9904      	ldr	r1, [sp, #16]
 800c0f2:	9a05      	ldr	r2, [sp, #20]
 800c0f4:	2920      	cmp	r1, #32
 800c0f6:	d818      	bhi.n	800c12a <__hexnan+0x7e>
 800c0f8:	9b02      	ldr	r3, [sp, #8]
 800c0fa:	459b      	cmp	fp, r3
 800c0fc:	dd13      	ble.n	800c126 <__hexnan+0x7a>
 800c0fe:	454c      	cmp	r4, r9
 800c100:	d206      	bcs.n	800c110 <__hexnan+0x64>
 800c102:	2d07      	cmp	r5, #7
 800c104:	dc04      	bgt.n	800c110 <__hexnan+0x64>
 800c106:	462a      	mov	r2, r5
 800c108:	4649      	mov	r1, r9
 800c10a:	4620      	mov	r0, r4
 800c10c:	f7ff ffa8 	bl	800c060 <L_shift>
 800c110:	4544      	cmp	r4, r8
 800c112:	d950      	bls.n	800c1b6 <__hexnan+0x10a>
 800c114:	2300      	movs	r3, #0
 800c116:	f1a4 0904 	sub.w	r9, r4, #4
 800c11a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c11e:	461d      	mov	r5, r3
 800c120:	464c      	mov	r4, r9
 800c122:	f8cd b008 	str.w	fp, [sp, #8]
 800c126:	9a03      	ldr	r2, [sp, #12]
 800c128:	e7d7      	b.n	800c0da <__hexnan+0x2e>
 800c12a:	2929      	cmp	r1, #41	; 0x29
 800c12c:	d156      	bne.n	800c1dc <__hexnan+0x130>
 800c12e:	3202      	adds	r2, #2
 800c130:	f8ca 2000 	str.w	r2, [sl]
 800c134:	f1bb 0f00 	cmp.w	fp, #0
 800c138:	d050      	beq.n	800c1dc <__hexnan+0x130>
 800c13a:	454c      	cmp	r4, r9
 800c13c:	d206      	bcs.n	800c14c <__hexnan+0xa0>
 800c13e:	2d07      	cmp	r5, #7
 800c140:	dc04      	bgt.n	800c14c <__hexnan+0xa0>
 800c142:	462a      	mov	r2, r5
 800c144:	4649      	mov	r1, r9
 800c146:	4620      	mov	r0, r4
 800c148:	f7ff ff8a 	bl	800c060 <L_shift>
 800c14c:	4544      	cmp	r4, r8
 800c14e:	d934      	bls.n	800c1ba <__hexnan+0x10e>
 800c150:	4623      	mov	r3, r4
 800c152:	f1a8 0204 	sub.w	r2, r8, #4
 800c156:	f853 1b04 	ldr.w	r1, [r3], #4
 800c15a:	429f      	cmp	r7, r3
 800c15c:	f842 1f04 	str.w	r1, [r2, #4]!
 800c160:	d2f9      	bcs.n	800c156 <__hexnan+0xaa>
 800c162:	1b3b      	subs	r3, r7, r4
 800c164:	f023 0303 	bic.w	r3, r3, #3
 800c168:	3304      	adds	r3, #4
 800c16a:	3401      	adds	r4, #1
 800c16c:	3e03      	subs	r6, #3
 800c16e:	42b4      	cmp	r4, r6
 800c170:	bf88      	it	hi
 800c172:	2304      	movhi	r3, #4
 800c174:	2200      	movs	r2, #0
 800c176:	4443      	add	r3, r8
 800c178:	f843 2b04 	str.w	r2, [r3], #4
 800c17c:	429f      	cmp	r7, r3
 800c17e:	d2fb      	bcs.n	800c178 <__hexnan+0xcc>
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	b91b      	cbnz	r3, 800c18c <__hexnan+0xe0>
 800c184:	4547      	cmp	r7, r8
 800c186:	d127      	bne.n	800c1d8 <__hexnan+0x12c>
 800c188:	2301      	movs	r3, #1
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	2005      	movs	r0, #5
 800c18e:	e026      	b.n	800c1de <__hexnan+0x132>
 800c190:	3501      	adds	r5, #1
 800c192:	2d08      	cmp	r5, #8
 800c194:	f10b 0b01 	add.w	fp, fp, #1
 800c198:	dd06      	ble.n	800c1a8 <__hexnan+0xfc>
 800c19a:	4544      	cmp	r4, r8
 800c19c:	d9c3      	bls.n	800c126 <__hexnan+0x7a>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	2501      	movs	r5, #1
 800c1a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1a6:	3c04      	subs	r4, #4
 800c1a8:	6822      	ldr	r2, [r4, #0]
 800c1aa:	f000 000f 	and.w	r0, r0, #15
 800c1ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c1b2:	6022      	str	r2, [r4, #0]
 800c1b4:	e7b7      	b.n	800c126 <__hexnan+0x7a>
 800c1b6:	2508      	movs	r5, #8
 800c1b8:	e7b5      	b.n	800c126 <__hexnan+0x7a>
 800c1ba:	9b01      	ldr	r3, [sp, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d0df      	beq.n	800c180 <__hexnan+0xd4>
 800c1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c4:	f1c3 0320 	rsb	r3, r3, #32
 800c1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c1d0:	401a      	ands	r2, r3
 800c1d2:	f846 2c04 	str.w	r2, [r6, #-4]
 800c1d6:	e7d3      	b.n	800c180 <__hexnan+0xd4>
 800c1d8:	3f04      	subs	r7, #4
 800c1da:	e7d1      	b.n	800c180 <__hexnan+0xd4>
 800c1dc:	2004      	movs	r0, #4
 800c1de:	b007      	add	sp, #28
 800c1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1e4 <_localeconv_r>:
 800c1e4:	4800      	ldr	r0, [pc, #0]	; (800c1e8 <_localeconv_r+0x4>)
 800c1e6:	4770      	bx	lr
 800c1e8:	20000768 	.word	0x20000768

0800c1ec <__retarget_lock_init_recursive>:
 800c1ec:	4770      	bx	lr

0800c1ee <__retarget_lock_acquire_recursive>:
 800c1ee:	4770      	bx	lr

0800c1f0 <__retarget_lock_release_recursive>:
 800c1f0:	4770      	bx	lr

0800c1f2 <__swhatbuf_r>:
 800c1f2:	b570      	push	{r4, r5, r6, lr}
 800c1f4:	460e      	mov	r6, r1
 800c1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1fa:	4614      	mov	r4, r2
 800c1fc:	2900      	cmp	r1, #0
 800c1fe:	461d      	mov	r5, r3
 800c200:	b096      	sub	sp, #88	; 0x58
 800c202:	da08      	bge.n	800c216 <__swhatbuf_r+0x24>
 800c204:	2200      	movs	r2, #0
 800c206:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c20a:	602a      	str	r2, [r5, #0]
 800c20c:	061a      	lsls	r2, r3, #24
 800c20e:	d410      	bmi.n	800c232 <__swhatbuf_r+0x40>
 800c210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c214:	e00e      	b.n	800c234 <__swhatbuf_r+0x42>
 800c216:	466a      	mov	r2, sp
 800c218:	f001 f9c0 	bl	800d59c <_fstat_r>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	dbf1      	blt.n	800c204 <__swhatbuf_r+0x12>
 800c220:	9a01      	ldr	r2, [sp, #4]
 800c222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c22a:	425a      	negs	r2, r3
 800c22c:	415a      	adcs	r2, r3
 800c22e:	602a      	str	r2, [r5, #0]
 800c230:	e7ee      	b.n	800c210 <__swhatbuf_r+0x1e>
 800c232:	2340      	movs	r3, #64	; 0x40
 800c234:	2000      	movs	r0, #0
 800c236:	6023      	str	r3, [r4, #0]
 800c238:	b016      	add	sp, #88	; 0x58
 800c23a:	bd70      	pop	{r4, r5, r6, pc}

0800c23c <__smakebuf_r>:
 800c23c:	898b      	ldrh	r3, [r1, #12]
 800c23e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c240:	079d      	lsls	r5, r3, #30
 800c242:	4606      	mov	r6, r0
 800c244:	460c      	mov	r4, r1
 800c246:	d507      	bpl.n	800c258 <__smakebuf_r+0x1c>
 800c248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	6123      	str	r3, [r4, #16]
 800c250:	2301      	movs	r3, #1
 800c252:	6163      	str	r3, [r4, #20]
 800c254:	b002      	add	sp, #8
 800c256:	bd70      	pop	{r4, r5, r6, pc}
 800c258:	466a      	mov	r2, sp
 800c25a:	ab01      	add	r3, sp, #4
 800c25c:	f7ff ffc9 	bl	800c1f2 <__swhatbuf_r>
 800c260:	9900      	ldr	r1, [sp, #0]
 800c262:	4605      	mov	r5, r0
 800c264:	4630      	mov	r0, r6
 800c266:	f000 fd85 	bl	800cd74 <_malloc_r>
 800c26a:	b948      	cbnz	r0, 800c280 <__smakebuf_r+0x44>
 800c26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c270:	059a      	lsls	r2, r3, #22
 800c272:	d4ef      	bmi.n	800c254 <__smakebuf_r+0x18>
 800c274:	f023 0303 	bic.w	r3, r3, #3
 800c278:	f043 0302 	orr.w	r3, r3, #2
 800c27c:	81a3      	strh	r3, [r4, #12]
 800c27e:	e7e3      	b.n	800c248 <__smakebuf_r+0xc>
 800c280:	4b0d      	ldr	r3, [pc, #52]	; (800c2b8 <__smakebuf_r+0x7c>)
 800c282:	62b3      	str	r3, [r6, #40]	; 0x28
 800c284:	89a3      	ldrh	r3, [r4, #12]
 800c286:	6020      	str	r0, [r4, #0]
 800c288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c28c:	81a3      	strh	r3, [r4, #12]
 800c28e:	9b00      	ldr	r3, [sp, #0]
 800c290:	6120      	str	r0, [r4, #16]
 800c292:	6163      	str	r3, [r4, #20]
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	b15b      	cbz	r3, 800c2b0 <__smakebuf_r+0x74>
 800c298:	4630      	mov	r0, r6
 800c29a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c29e:	f001 f98f 	bl	800d5c0 <_isatty_r>
 800c2a2:	b128      	cbz	r0, 800c2b0 <__smakebuf_r+0x74>
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	f023 0303 	bic.w	r3, r3, #3
 800c2aa:	f043 0301 	orr.w	r3, r3, #1
 800c2ae:	81a3      	strh	r3, [r4, #12]
 800c2b0:	89a0      	ldrh	r0, [r4, #12]
 800c2b2:	4305      	orrs	r5, r0
 800c2b4:	81a5      	strh	r5, [r4, #12]
 800c2b6:	e7cd      	b.n	800c254 <__smakebuf_r+0x18>
 800c2b8:	0800b951 	.word	0x0800b951

0800c2bc <malloc>:
 800c2bc:	4b02      	ldr	r3, [pc, #8]	; (800c2c8 <malloc+0xc>)
 800c2be:	4601      	mov	r1, r0
 800c2c0:	6818      	ldr	r0, [r3, #0]
 800c2c2:	f000 bd57 	b.w	800cd74 <_malloc_r>
 800c2c6:	bf00      	nop
 800c2c8:	20000610 	.word	0x20000610

0800c2cc <__ascii_mbtowc>:
 800c2cc:	b082      	sub	sp, #8
 800c2ce:	b901      	cbnz	r1, 800c2d2 <__ascii_mbtowc+0x6>
 800c2d0:	a901      	add	r1, sp, #4
 800c2d2:	b142      	cbz	r2, 800c2e6 <__ascii_mbtowc+0x1a>
 800c2d4:	b14b      	cbz	r3, 800c2ea <__ascii_mbtowc+0x1e>
 800c2d6:	7813      	ldrb	r3, [r2, #0]
 800c2d8:	600b      	str	r3, [r1, #0]
 800c2da:	7812      	ldrb	r2, [r2, #0]
 800c2dc:	1e10      	subs	r0, r2, #0
 800c2de:	bf18      	it	ne
 800c2e0:	2001      	movne	r0, #1
 800c2e2:	b002      	add	sp, #8
 800c2e4:	4770      	bx	lr
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	e7fb      	b.n	800c2e2 <__ascii_mbtowc+0x16>
 800c2ea:	f06f 0001 	mvn.w	r0, #1
 800c2ee:	e7f8      	b.n	800c2e2 <__ascii_mbtowc+0x16>

0800c2f0 <memchr>:
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	b510      	push	{r4, lr}
 800c2f4:	b2c9      	uxtb	r1, r1
 800c2f6:	4402      	add	r2, r0
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	d101      	bne.n	800c302 <memchr+0x12>
 800c2fe:	2000      	movs	r0, #0
 800c300:	e003      	b.n	800c30a <memchr+0x1a>
 800c302:	7804      	ldrb	r4, [r0, #0]
 800c304:	3301      	adds	r3, #1
 800c306:	428c      	cmp	r4, r1
 800c308:	d1f6      	bne.n	800c2f8 <memchr+0x8>
 800c30a:	bd10      	pop	{r4, pc}

0800c30c <_Balloc>:
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c310:	4604      	mov	r4, r0
 800c312:	460d      	mov	r5, r1
 800c314:	b976      	cbnz	r6, 800c334 <_Balloc+0x28>
 800c316:	2010      	movs	r0, #16
 800c318:	f7ff ffd0 	bl	800c2bc <malloc>
 800c31c:	4602      	mov	r2, r0
 800c31e:	6260      	str	r0, [r4, #36]	; 0x24
 800c320:	b920      	cbnz	r0, 800c32c <_Balloc+0x20>
 800c322:	2166      	movs	r1, #102	; 0x66
 800c324:	4b17      	ldr	r3, [pc, #92]	; (800c384 <_Balloc+0x78>)
 800c326:	4818      	ldr	r0, [pc, #96]	; (800c388 <_Balloc+0x7c>)
 800c328:	f7fe fb98 	bl	800aa5c <__assert_func>
 800c32c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c330:	6006      	str	r6, [r0, #0]
 800c332:	60c6      	str	r6, [r0, #12]
 800c334:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c336:	68f3      	ldr	r3, [r6, #12]
 800c338:	b183      	cbz	r3, 800c35c <_Balloc+0x50>
 800c33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c342:	b9b8      	cbnz	r0, 800c374 <_Balloc+0x68>
 800c344:	2101      	movs	r1, #1
 800c346:	fa01 f605 	lsl.w	r6, r1, r5
 800c34a:	1d72      	adds	r2, r6, #5
 800c34c:	4620      	mov	r0, r4
 800c34e:	0092      	lsls	r2, r2, #2
 800c350:	f000 fc94 	bl	800cc7c <_calloc_r>
 800c354:	b160      	cbz	r0, 800c370 <_Balloc+0x64>
 800c356:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c35a:	e00e      	b.n	800c37a <_Balloc+0x6e>
 800c35c:	2221      	movs	r2, #33	; 0x21
 800c35e:	2104      	movs	r1, #4
 800c360:	4620      	mov	r0, r4
 800c362:	f000 fc8b 	bl	800cc7c <_calloc_r>
 800c366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c368:	60f0      	str	r0, [r6, #12]
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1e4      	bne.n	800c33a <_Balloc+0x2e>
 800c370:	2000      	movs	r0, #0
 800c372:	bd70      	pop	{r4, r5, r6, pc}
 800c374:	6802      	ldr	r2, [r0, #0]
 800c376:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c37a:	2300      	movs	r3, #0
 800c37c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c380:	e7f7      	b.n	800c372 <_Balloc+0x66>
 800c382:	bf00      	nop
 800c384:	0800d958 	.word	0x0800d958
 800c388:	0800dc60 	.word	0x0800dc60

0800c38c <_Bfree>:
 800c38c:	b570      	push	{r4, r5, r6, lr}
 800c38e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c390:	4605      	mov	r5, r0
 800c392:	460c      	mov	r4, r1
 800c394:	b976      	cbnz	r6, 800c3b4 <_Bfree+0x28>
 800c396:	2010      	movs	r0, #16
 800c398:	f7ff ff90 	bl	800c2bc <malloc>
 800c39c:	4602      	mov	r2, r0
 800c39e:	6268      	str	r0, [r5, #36]	; 0x24
 800c3a0:	b920      	cbnz	r0, 800c3ac <_Bfree+0x20>
 800c3a2:	218a      	movs	r1, #138	; 0x8a
 800c3a4:	4b08      	ldr	r3, [pc, #32]	; (800c3c8 <_Bfree+0x3c>)
 800c3a6:	4809      	ldr	r0, [pc, #36]	; (800c3cc <_Bfree+0x40>)
 800c3a8:	f7fe fb58 	bl	800aa5c <__assert_func>
 800c3ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3b0:	6006      	str	r6, [r0, #0]
 800c3b2:	60c6      	str	r6, [r0, #12]
 800c3b4:	b13c      	cbz	r4, 800c3c6 <_Bfree+0x3a>
 800c3b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3b8:	6862      	ldr	r2, [r4, #4]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3c0:	6021      	str	r1, [r4, #0]
 800c3c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
 800c3c8:	0800d958 	.word	0x0800d958
 800c3cc:	0800dc60 	.word	0x0800dc60

0800c3d0 <__multadd>:
 800c3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d4:	4607      	mov	r7, r0
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	461e      	mov	r6, r3
 800c3da:	2000      	movs	r0, #0
 800c3dc:	690d      	ldr	r5, [r1, #16]
 800c3de:	f101 0c14 	add.w	ip, r1, #20
 800c3e2:	f8dc 3000 	ldr.w	r3, [ip]
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	b299      	uxth	r1, r3
 800c3ea:	fb02 6101 	mla	r1, r2, r1, r6
 800c3ee:	0c1e      	lsrs	r6, r3, #16
 800c3f0:	0c0b      	lsrs	r3, r1, #16
 800c3f2:	fb02 3306 	mla	r3, r2, r6, r3
 800c3f6:	b289      	uxth	r1, r1
 800c3f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3fc:	4285      	cmp	r5, r0
 800c3fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c402:	f84c 1b04 	str.w	r1, [ip], #4
 800c406:	dcec      	bgt.n	800c3e2 <__multadd+0x12>
 800c408:	b30e      	cbz	r6, 800c44e <__multadd+0x7e>
 800c40a:	68a3      	ldr	r3, [r4, #8]
 800c40c:	42ab      	cmp	r3, r5
 800c40e:	dc19      	bgt.n	800c444 <__multadd+0x74>
 800c410:	6861      	ldr	r1, [r4, #4]
 800c412:	4638      	mov	r0, r7
 800c414:	3101      	adds	r1, #1
 800c416:	f7ff ff79 	bl	800c30c <_Balloc>
 800c41a:	4680      	mov	r8, r0
 800c41c:	b928      	cbnz	r0, 800c42a <__multadd+0x5a>
 800c41e:	4602      	mov	r2, r0
 800c420:	21b5      	movs	r1, #181	; 0xb5
 800c422:	4b0c      	ldr	r3, [pc, #48]	; (800c454 <__multadd+0x84>)
 800c424:	480c      	ldr	r0, [pc, #48]	; (800c458 <__multadd+0x88>)
 800c426:	f7fe fb19 	bl	800aa5c <__assert_func>
 800c42a:	6922      	ldr	r2, [r4, #16]
 800c42c:	f104 010c 	add.w	r1, r4, #12
 800c430:	3202      	adds	r2, #2
 800c432:	0092      	lsls	r2, r2, #2
 800c434:	300c      	adds	r0, #12
 800c436:	f7fc fc11 	bl	8008c5c <memcpy>
 800c43a:	4621      	mov	r1, r4
 800c43c:	4638      	mov	r0, r7
 800c43e:	f7ff ffa5 	bl	800c38c <_Bfree>
 800c442:	4644      	mov	r4, r8
 800c444:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c448:	3501      	adds	r5, #1
 800c44a:	615e      	str	r6, [r3, #20]
 800c44c:	6125      	str	r5, [r4, #16]
 800c44e:	4620      	mov	r0, r4
 800c450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c454:	0800db71 	.word	0x0800db71
 800c458:	0800dc60 	.word	0x0800dc60

0800c45c <__s2b>:
 800c45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c460:	4615      	mov	r5, r2
 800c462:	2209      	movs	r2, #9
 800c464:	461f      	mov	r7, r3
 800c466:	3308      	adds	r3, #8
 800c468:	460c      	mov	r4, r1
 800c46a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c46e:	4606      	mov	r6, r0
 800c470:	2201      	movs	r2, #1
 800c472:	2100      	movs	r1, #0
 800c474:	429a      	cmp	r2, r3
 800c476:	db09      	blt.n	800c48c <__s2b+0x30>
 800c478:	4630      	mov	r0, r6
 800c47a:	f7ff ff47 	bl	800c30c <_Balloc>
 800c47e:	b940      	cbnz	r0, 800c492 <__s2b+0x36>
 800c480:	4602      	mov	r2, r0
 800c482:	21ce      	movs	r1, #206	; 0xce
 800c484:	4b18      	ldr	r3, [pc, #96]	; (800c4e8 <__s2b+0x8c>)
 800c486:	4819      	ldr	r0, [pc, #100]	; (800c4ec <__s2b+0x90>)
 800c488:	f7fe fae8 	bl	800aa5c <__assert_func>
 800c48c:	0052      	lsls	r2, r2, #1
 800c48e:	3101      	adds	r1, #1
 800c490:	e7f0      	b.n	800c474 <__s2b+0x18>
 800c492:	9b08      	ldr	r3, [sp, #32]
 800c494:	2d09      	cmp	r5, #9
 800c496:	6143      	str	r3, [r0, #20]
 800c498:	f04f 0301 	mov.w	r3, #1
 800c49c:	6103      	str	r3, [r0, #16]
 800c49e:	dd16      	ble.n	800c4ce <__s2b+0x72>
 800c4a0:	f104 0909 	add.w	r9, r4, #9
 800c4a4:	46c8      	mov	r8, r9
 800c4a6:	442c      	add	r4, r5
 800c4a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4ac:	4601      	mov	r1, r0
 800c4ae:	220a      	movs	r2, #10
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	3b30      	subs	r3, #48	; 0x30
 800c4b4:	f7ff ff8c 	bl	800c3d0 <__multadd>
 800c4b8:	45a0      	cmp	r8, r4
 800c4ba:	d1f5      	bne.n	800c4a8 <__s2b+0x4c>
 800c4bc:	f1a5 0408 	sub.w	r4, r5, #8
 800c4c0:	444c      	add	r4, r9
 800c4c2:	1b2d      	subs	r5, r5, r4
 800c4c4:	1963      	adds	r3, r4, r5
 800c4c6:	42bb      	cmp	r3, r7
 800c4c8:	db04      	blt.n	800c4d4 <__s2b+0x78>
 800c4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ce:	2509      	movs	r5, #9
 800c4d0:	340a      	adds	r4, #10
 800c4d2:	e7f6      	b.n	800c4c2 <__s2b+0x66>
 800c4d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4d8:	4601      	mov	r1, r0
 800c4da:	220a      	movs	r2, #10
 800c4dc:	4630      	mov	r0, r6
 800c4de:	3b30      	subs	r3, #48	; 0x30
 800c4e0:	f7ff ff76 	bl	800c3d0 <__multadd>
 800c4e4:	e7ee      	b.n	800c4c4 <__s2b+0x68>
 800c4e6:	bf00      	nop
 800c4e8:	0800db71 	.word	0x0800db71
 800c4ec:	0800dc60 	.word	0x0800dc60

0800c4f0 <__hi0bits>:
 800c4f0:	0c02      	lsrs	r2, r0, #16
 800c4f2:	0412      	lsls	r2, r2, #16
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	b9ca      	cbnz	r2, 800c52c <__hi0bits+0x3c>
 800c4f8:	0403      	lsls	r3, r0, #16
 800c4fa:	2010      	movs	r0, #16
 800c4fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c500:	bf04      	itt	eq
 800c502:	021b      	lsleq	r3, r3, #8
 800c504:	3008      	addeq	r0, #8
 800c506:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c50a:	bf04      	itt	eq
 800c50c:	011b      	lsleq	r3, r3, #4
 800c50e:	3004      	addeq	r0, #4
 800c510:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c514:	bf04      	itt	eq
 800c516:	009b      	lsleq	r3, r3, #2
 800c518:	3002      	addeq	r0, #2
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	db05      	blt.n	800c52a <__hi0bits+0x3a>
 800c51e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c522:	f100 0001 	add.w	r0, r0, #1
 800c526:	bf08      	it	eq
 800c528:	2020      	moveq	r0, #32
 800c52a:	4770      	bx	lr
 800c52c:	2000      	movs	r0, #0
 800c52e:	e7e5      	b.n	800c4fc <__hi0bits+0xc>

0800c530 <__lo0bits>:
 800c530:	6803      	ldr	r3, [r0, #0]
 800c532:	4602      	mov	r2, r0
 800c534:	f013 0007 	ands.w	r0, r3, #7
 800c538:	d00b      	beq.n	800c552 <__lo0bits+0x22>
 800c53a:	07d9      	lsls	r1, r3, #31
 800c53c:	d421      	bmi.n	800c582 <__lo0bits+0x52>
 800c53e:	0798      	lsls	r0, r3, #30
 800c540:	bf49      	itett	mi
 800c542:	085b      	lsrmi	r3, r3, #1
 800c544:	089b      	lsrpl	r3, r3, #2
 800c546:	2001      	movmi	r0, #1
 800c548:	6013      	strmi	r3, [r2, #0]
 800c54a:	bf5c      	itt	pl
 800c54c:	2002      	movpl	r0, #2
 800c54e:	6013      	strpl	r3, [r2, #0]
 800c550:	4770      	bx	lr
 800c552:	b299      	uxth	r1, r3
 800c554:	b909      	cbnz	r1, 800c55a <__lo0bits+0x2a>
 800c556:	2010      	movs	r0, #16
 800c558:	0c1b      	lsrs	r3, r3, #16
 800c55a:	b2d9      	uxtb	r1, r3
 800c55c:	b909      	cbnz	r1, 800c562 <__lo0bits+0x32>
 800c55e:	3008      	adds	r0, #8
 800c560:	0a1b      	lsrs	r3, r3, #8
 800c562:	0719      	lsls	r1, r3, #28
 800c564:	bf04      	itt	eq
 800c566:	091b      	lsreq	r3, r3, #4
 800c568:	3004      	addeq	r0, #4
 800c56a:	0799      	lsls	r1, r3, #30
 800c56c:	bf04      	itt	eq
 800c56e:	089b      	lsreq	r3, r3, #2
 800c570:	3002      	addeq	r0, #2
 800c572:	07d9      	lsls	r1, r3, #31
 800c574:	d403      	bmi.n	800c57e <__lo0bits+0x4e>
 800c576:	085b      	lsrs	r3, r3, #1
 800c578:	f100 0001 	add.w	r0, r0, #1
 800c57c:	d003      	beq.n	800c586 <__lo0bits+0x56>
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	4770      	bx	lr
 800c582:	2000      	movs	r0, #0
 800c584:	4770      	bx	lr
 800c586:	2020      	movs	r0, #32
 800c588:	4770      	bx	lr
	...

0800c58c <__i2b>:
 800c58c:	b510      	push	{r4, lr}
 800c58e:	460c      	mov	r4, r1
 800c590:	2101      	movs	r1, #1
 800c592:	f7ff febb 	bl	800c30c <_Balloc>
 800c596:	4602      	mov	r2, r0
 800c598:	b928      	cbnz	r0, 800c5a6 <__i2b+0x1a>
 800c59a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c59e:	4b04      	ldr	r3, [pc, #16]	; (800c5b0 <__i2b+0x24>)
 800c5a0:	4804      	ldr	r0, [pc, #16]	; (800c5b4 <__i2b+0x28>)
 800c5a2:	f7fe fa5b 	bl	800aa5c <__assert_func>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	6144      	str	r4, [r0, #20]
 800c5aa:	6103      	str	r3, [r0, #16]
 800c5ac:	bd10      	pop	{r4, pc}
 800c5ae:	bf00      	nop
 800c5b0:	0800db71 	.word	0x0800db71
 800c5b4:	0800dc60 	.word	0x0800dc60

0800c5b8 <__multiply>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	4691      	mov	r9, r2
 800c5be:	690a      	ldr	r2, [r1, #16]
 800c5c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	bfbe      	ittt	lt
 800c5ca:	460b      	movlt	r3, r1
 800c5cc:	464c      	movlt	r4, r9
 800c5ce:	4699      	movlt	r9, r3
 800c5d0:	6927      	ldr	r7, [r4, #16]
 800c5d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5d6:	68a3      	ldr	r3, [r4, #8]
 800c5d8:	6861      	ldr	r1, [r4, #4]
 800c5da:	eb07 060a 	add.w	r6, r7, sl
 800c5de:	42b3      	cmp	r3, r6
 800c5e0:	b085      	sub	sp, #20
 800c5e2:	bfb8      	it	lt
 800c5e4:	3101      	addlt	r1, #1
 800c5e6:	f7ff fe91 	bl	800c30c <_Balloc>
 800c5ea:	b930      	cbnz	r0, 800c5fa <__multiply+0x42>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	f240 115d 	movw	r1, #349	; 0x15d
 800c5f2:	4b43      	ldr	r3, [pc, #268]	; (800c700 <__multiply+0x148>)
 800c5f4:	4843      	ldr	r0, [pc, #268]	; (800c704 <__multiply+0x14c>)
 800c5f6:	f7fe fa31 	bl	800aa5c <__assert_func>
 800c5fa:	f100 0514 	add.w	r5, r0, #20
 800c5fe:	462b      	mov	r3, r5
 800c600:	2200      	movs	r2, #0
 800c602:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c606:	4543      	cmp	r3, r8
 800c608:	d321      	bcc.n	800c64e <__multiply+0x96>
 800c60a:	f104 0314 	add.w	r3, r4, #20
 800c60e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c612:	f109 0314 	add.w	r3, r9, #20
 800c616:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c61a:	9202      	str	r2, [sp, #8]
 800c61c:	1b3a      	subs	r2, r7, r4
 800c61e:	3a15      	subs	r2, #21
 800c620:	f022 0203 	bic.w	r2, r2, #3
 800c624:	3204      	adds	r2, #4
 800c626:	f104 0115 	add.w	r1, r4, #21
 800c62a:	428f      	cmp	r7, r1
 800c62c:	bf38      	it	cc
 800c62e:	2204      	movcc	r2, #4
 800c630:	9201      	str	r2, [sp, #4]
 800c632:	9a02      	ldr	r2, [sp, #8]
 800c634:	9303      	str	r3, [sp, #12]
 800c636:	429a      	cmp	r2, r3
 800c638:	d80c      	bhi.n	800c654 <__multiply+0x9c>
 800c63a:	2e00      	cmp	r6, #0
 800c63c:	dd03      	ble.n	800c646 <__multiply+0x8e>
 800c63e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c642:	2b00      	cmp	r3, #0
 800c644:	d059      	beq.n	800c6fa <__multiply+0x142>
 800c646:	6106      	str	r6, [r0, #16]
 800c648:	b005      	add	sp, #20
 800c64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64e:	f843 2b04 	str.w	r2, [r3], #4
 800c652:	e7d8      	b.n	800c606 <__multiply+0x4e>
 800c654:	f8b3 a000 	ldrh.w	sl, [r3]
 800c658:	f1ba 0f00 	cmp.w	sl, #0
 800c65c:	d023      	beq.n	800c6a6 <__multiply+0xee>
 800c65e:	46a9      	mov	r9, r5
 800c660:	f04f 0c00 	mov.w	ip, #0
 800c664:	f104 0e14 	add.w	lr, r4, #20
 800c668:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c66c:	f8d9 1000 	ldr.w	r1, [r9]
 800c670:	fa1f fb82 	uxth.w	fp, r2
 800c674:	b289      	uxth	r1, r1
 800c676:	fb0a 110b 	mla	r1, sl, fp, r1
 800c67a:	4461      	add	r1, ip
 800c67c:	f8d9 c000 	ldr.w	ip, [r9]
 800c680:	0c12      	lsrs	r2, r2, #16
 800c682:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c686:	fb0a c202 	mla	r2, sl, r2, ip
 800c68a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c68e:	b289      	uxth	r1, r1
 800c690:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c694:	4577      	cmp	r7, lr
 800c696:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c69a:	f849 1b04 	str.w	r1, [r9], #4
 800c69e:	d8e3      	bhi.n	800c668 <__multiply+0xb0>
 800c6a0:	9a01      	ldr	r2, [sp, #4]
 800c6a2:	f845 c002 	str.w	ip, [r5, r2]
 800c6a6:	9a03      	ldr	r2, [sp, #12]
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c6ae:	f1b9 0f00 	cmp.w	r9, #0
 800c6b2:	d020      	beq.n	800c6f6 <__multiply+0x13e>
 800c6b4:	46ae      	mov	lr, r5
 800c6b6:	f04f 0a00 	mov.w	sl, #0
 800c6ba:	6829      	ldr	r1, [r5, #0]
 800c6bc:	f104 0c14 	add.w	ip, r4, #20
 800c6c0:	f8bc b000 	ldrh.w	fp, [ip]
 800c6c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c6c8:	b289      	uxth	r1, r1
 800c6ca:	fb09 220b 	mla	r2, r9, fp, r2
 800c6ce:	4492      	add	sl, r2
 800c6d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c6d4:	f84e 1b04 	str.w	r1, [lr], #4
 800c6d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6dc:	f8be 1000 	ldrh.w	r1, [lr]
 800c6e0:	0c12      	lsrs	r2, r2, #16
 800c6e2:	fb09 1102 	mla	r1, r9, r2, r1
 800c6e6:	4567      	cmp	r7, ip
 800c6e8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c6ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6f0:	d8e6      	bhi.n	800c6c0 <__multiply+0x108>
 800c6f2:	9a01      	ldr	r2, [sp, #4]
 800c6f4:	50a9      	str	r1, [r5, r2]
 800c6f6:	3504      	adds	r5, #4
 800c6f8:	e79b      	b.n	800c632 <__multiply+0x7a>
 800c6fa:	3e01      	subs	r6, #1
 800c6fc:	e79d      	b.n	800c63a <__multiply+0x82>
 800c6fe:	bf00      	nop
 800c700:	0800db71 	.word	0x0800db71
 800c704:	0800dc60 	.word	0x0800dc60

0800c708 <__pow5mult>:
 800c708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c70c:	4615      	mov	r5, r2
 800c70e:	f012 0203 	ands.w	r2, r2, #3
 800c712:	4606      	mov	r6, r0
 800c714:	460f      	mov	r7, r1
 800c716:	d007      	beq.n	800c728 <__pow5mult+0x20>
 800c718:	4c25      	ldr	r4, [pc, #148]	; (800c7b0 <__pow5mult+0xa8>)
 800c71a:	3a01      	subs	r2, #1
 800c71c:	2300      	movs	r3, #0
 800c71e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c722:	f7ff fe55 	bl	800c3d0 <__multadd>
 800c726:	4607      	mov	r7, r0
 800c728:	10ad      	asrs	r5, r5, #2
 800c72a:	d03d      	beq.n	800c7a8 <__pow5mult+0xa0>
 800c72c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c72e:	b97c      	cbnz	r4, 800c750 <__pow5mult+0x48>
 800c730:	2010      	movs	r0, #16
 800c732:	f7ff fdc3 	bl	800c2bc <malloc>
 800c736:	4602      	mov	r2, r0
 800c738:	6270      	str	r0, [r6, #36]	; 0x24
 800c73a:	b928      	cbnz	r0, 800c748 <__pow5mult+0x40>
 800c73c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c740:	4b1c      	ldr	r3, [pc, #112]	; (800c7b4 <__pow5mult+0xac>)
 800c742:	481d      	ldr	r0, [pc, #116]	; (800c7b8 <__pow5mult+0xb0>)
 800c744:	f7fe f98a 	bl	800aa5c <__assert_func>
 800c748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c74c:	6004      	str	r4, [r0, #0]
 800c74e:	60c4      	str	r4, [r0, #12]
 800c750:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c758:	b94c      	cbnz	r4, 800c76e <__pow5mult+0x66>
 800c75a:	f240 2171 	movw	r1, #625	; 0x271
 800c75e:	4630      	mov	r0, r6
 800c760:	f7ff ff14 	bl	800c58c <__i2b>
 800c764:	2300      	movs	r3, #0
 800c766:	4604      	mov	r4, r0
 800c768:	f8c8 0008 	str.w	r0, [r8, #8]
 800c76c:	6003      	str	r3, [r0, #0]
 800c76e:	f04f 0900 	mov.w	r9, #0
 800c772:	07eb      	lsls	r3, r5, #31
 800c774:	d50a      	bpl.n	800c78c <__pow5mult+0x84>
 800c776:	4639      	mov	r1, r7
 800c778:	4622      	mov	r2, r4
 800c77a:	4630      	mov	r0, r6
 800c77c:	f7ff ff1c 	bl	800c5b8 <__multiply>
 800c780:	4680      	mov	r8, r0
 800c782:	4639      	mov	r1, r7
 800c784:	4630      	mov	r0, r6
 800c786:	f7ff fe01 	bl	800c38c <_Bfree>
 800c78a:	4647      	mov	r7, r8
 800c78c:	106d      	asrs	r5, r5, #1
 800c78e:	d00b      	beq.n	800c7a8 <__pow5mult+0xa0>
 800c790:	6820      	ldr	r0, [r4, #0]
 800c792:	b938      	cbnz	r0, 800c7a4 <__pow5mult+0x9c>
 800c794:	4622      	mov	r2, r4
 800c796:	4621      	mov	r1, r4
 800c798:	4630      	mov	r0, r6
 800c79a:	f7ff ff0d 	bl	800c5b8 <__multiply>
 800c79e:	6020      	str	r0, [r4, #0]
 800c7a0:	f8c0 9000 	str.w	r9, [r0]
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	e7e4      	b.n	800c772 <__pow5mult+0x6a>
 800c7a8:	4638      	mov	r0, r7
 800c7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ae:	bf00      	nop
 800c7b0:	0800ddb0 	.word	0x0800ddb0
 800c7b4:	0800d958 	.word	0x0800d958
 800c7b8:	0800dc60 	.word	0x0800dc60

0800c7bc <__lshift>:
 800c7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	4607      	mov	r7, r0
 800c7c4:	4691      	mov	r9, r2
 800c7c6:	6923      	ldr	r3, [r4, #16]
 800c7c8:	6849      	ldr	r1, [r1, #4]
 800c7ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7d4:	f108 0601 	add.w	r6, r8, #1
 800c7d8:	42b3      	cmp	r3, r6
 800c7da:	db0b      	blt.n	800c7f4 <__lshift+0x38>
 800c7dc:	4638      	mov	r0, r7
 800c7de:	f7ff fd95 	bl	800c30c <_Balloc>
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	b948      	cbnz	r0, 800c7fa <__lshift+0x3e>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c7ec:	4b29      	ldr	r3, [pc, #164]	; (800c894 <__lshift+0xd8>)
 800c7ee:	482a      	ldr	r0, [pc, #168]	; (800c898 <__lshift+0xdc>)
 800c7f0:	f7fe f934 	bl	800aa5c <__assert_func>
 800c7f4:	3101      	adds	r1, #1
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	e7ee      	b.n	800c7d8 <__lshift+0x1c>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	f100 0114 	add.w	r1, r0, #20
 800c800:	f100 0210 	add.w	r2, r0, #16
 800c804:	4618      	mov	r0, r3
 800c806:	4553      	cmp	r3, sl
 800c808:	db37      	blt.n	800c87a <__lshift+0xbe>
 800c80a:	6920      	ldr	r0, [r4, #16]
 800c80c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c810:	f104 0314 	add.w	r3, r4, #20
 800c814:	f019 091f 	ands.w	r9, r9, #31
 800c818:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c81c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c820:	d02f      	beq.n	800c882 <__lshift+0xc6>
 800c822:	468a      	mov	sl, r1
 800c824:	f04f 0c00 	mov.w	ip, #0
 800c828:	f1c9 0e20 	rsb	lr, r9, #32
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	fa02 f209 	lsl.w	r2, r2, r9
 800c832:	ea42 020c 	orr.w	r2, r2, ip
 800c836:	f84a 2b04 	str.w	r2, [sl], #4
 800c83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c83e:	4298      	cmp	r0, r3
 800c840:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c844:	d8f2      	bhi.n	800c82c <__lshift+0x70>
 800c846:	1b03      	subs	r3, r0, r4
 800c848:	3b15      	subs	r3, #21
 800c84a:	f023 0303 	bic.w	r3, r3, #3
 800c84e:	3304      	adds	r3, #4
 800c850:	f104 0215 	add.w	r2, r4, #21
 800c854:	4290      	cmp	r0, r2
 800c856:	bf38      	it	cc
 800c858:	2304      	movcc	r3, #4
 800c85a:	f841 c003 	str.w	ip, [r1, r3]
 800c85e:	f1bc 0f00 	cmp.w	ip, #0
 800c862:	d001      	beq.n	800c868 <__lshift+0xac>
 800c864:	f108 0602 	add.w	r6, r8, #2
 800c868:	3e01      	subs	r6, #1
 800c86a:	4638      	mov	r0, r7
 800c86c:	4621      	mov	r1, r4
 800c86e:	612e      	str	r6, [r5, #16]
 800c870:	f7ff fd8c 	bl	800c38c <_Bfree>
 800c874:	4628      	mov	r0, r5
 800c876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c87a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c87e:	3301      	adds	r3, #1
 800c880:	e7c1      	b.n	800c806 <__lshift+0x4a>
 800c882:	3904      	subs	r1, #4
 800c884:	f853 2b04 	ldr.w	r2, [r3], #4
 800c888:	4298      	cmp	r0, r3
 800c88a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c88e:	d8f9      	bhi.n	800c884 <__lshift+0xc8>
 800c890:	e7ea      	b.n	800c868 <__lshift+0xac>
 800c892:	bf00      	nop
 800c894:	0800db71 	.word	0x0800db71
 800c898:	0800dc60 	.word	0x0800dc60

0800c89c <__mcmp>:
 800c89c:	4603      	mov	r3, r0
 800c89e:	690a      	ldr	r2, [r1, #16]
 800c8a0:	6900      	ldr	r0, [r0, #16]
 800c8a2:	b530      	push	{r4, r5, lr}
 800c8a4:	1a80      	subs	r0, r0, r2
 800c8a6:	d10d      	bne.n	800c8c4 <__mcmp+0x28>
 800c8a8:	3314      	adds	r3, #20
 800c8aa:	3114      	adds	r1, #20
 800c8ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8bc:	4295      	cmp	r5, r2
 800c8be:	d002      	beq.n	800c8c6 <__mcmp+0x2a>
 800c8c0:	d304      	bcc.n	800c8cc <__mcmp+0x30>
 800c8c2:	2001      	movs	r0, #1
 800c8c4:	bd30      	pop	{r4, r5, pc}
 800c8c6:	42a3      	cmp	r3, r4
 800c8c8:	d3f4      	bcc.n	800c8b4 <__mcmp+0x18>
 800c8ca:	e7fb      	b.n	800c8c4 <__mcmp+0x28>
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	e7f8      	b.n	800c8c4 <__mcmp+0x28>
	...

0800c8d4 <__mdiff>:
 800c8d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	460d      	mov	r5, r1
 800c8da:	4607      	mov	r7, r0
 800c8dc:	4611      	mov	r1, r2
 800c8de:	4628      	mov	r0, r5
 800c8e0:	4614      	mov	r4, r2
 800c8e2:	f7ff ffdb 	bl	800c89c <__mcmp>
 800c8e6:	1e06      	subs	r6, r0, #0
 800c8e8:	d111      	bne.n	800c90e <__mdiff+0x3a>
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f7ff fd0d 	bl	800c30c <_Balloc>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	b928      	cbnz	r0, 800c902 <__mdiff+0x2e>
 800c8f6:	f240 2132 	movw	r1, #562	; 0x232
 800c8fa:	4b3a      	ldr	r3, [pc, #232]	; (800c9e4 <__mdiff+0x110>)
 800c8fc:	483a      	ldr	r0, [pc, #232]	; (800c9e8 <__mdiff+0x114>)
 800c8fe:	f7fe f8ad 	bl	800aa5c <__assert_func>
 800c902:	2301      	movs	r3, #1
 800c904:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c908:	4610      	mov	r0, r2
 800c90a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90e:	bfa4      	itt	ge
 800c910:	4623      	movge	r3, r4
 800c912:	462c      	movge	r4, r5
 800c914:	4638      	mov	r0, r7
 800c916:	6861      	ldr	r1, [r4, #4]
 800c918:	bfa6      	itte	ge
 800c91a:	461d      	movge	r5, r3
 800c91c:	2600      	movge	r6, #0
 800c91e:	2601      	movlt	r6, #1
 800c920:	f7ff fcf4 	bl	800c30c <_Balloc>
 800c924:	4602      	mov	r2, r0
 800c926:	b918      	cbnz	r0, 800c930 <__mdiff+0x5c>
 800c928:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c92c:	4b2d      	ldr	r3, [pc, #180]	; (800c9e4 <__mdiff+0x110>)
 800c92e:	e7e5      	b.n	800c8fc <__mdiff+0x28>
 800c930:	f102 0814 	add.w	r8, r2, #20
 800c934:	46c2      	mov	sl, r8
 800c936:	f04f 0c00 	mov.w	ip, #0
 800c93a:	6927      	ldr	r7, [r4, #16]
 800c93c:	60c6      	str	r6, [r0, #12]
 800c93e:	692e      	ldr	r6, [r5, #16]
 800c940:	f104 0014 	add.w	r0, r4, #20
 800c944:	f105 0914 	add.w	r9, r5, #20
 800c948:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c94c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c950:	3410      	adds	r4, #16
 800c952:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c956:	f859 3b04 	ldr.w	r3, [r9], #4
 800c95a:	fa1f f18b 	uxth.w	r1, fp
 800c95e:	448c      	add	ip, r1
 800c960:	b299      	uxth	r1, r3
 800c962:	0c1b      	lsrs	r3, r3, #16
 800c964:	ebac 0101 	sub.w	r1, ip, r1
 800c968:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c96c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c970:	b289      	uxth	r1, r1
 800c972:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c976:	454e      	cmp	r6, r9
 800c978:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c97c:	f84a 3b04 	str.w	r3, [sl], #4
 800c980:	d8e7      	bhi.n	800c952 <__mdiff+0x7e>
 800c982:	1b73      	subs	r3, r6, r5
 800c984:	3b15      	subs	r3, #21
 800c986:	f023 0303 	bic.w	r3, r3, #3
 800c98a:	3515      	adds	r5, #21
 800c98c:	3304      	adds	r3, #4
 800c98e:	42ae      	cmp	r6, r5
 800c990:	bf38      	it	cc
 800c992:	2304      	movcc	r3, #4
 800c994:	4418      	add	r0, r3
 800c996:	4443      	add	r3, r8
 800c998:	461e      	mov	r6, r3
 800c99a:	4605      	mov	r5, r0
 800c99c:	4575      	cmp	r5, lr
 800c99e:	d30e      	bcc.n	800c9be <__mdiff+0xea>
 800c9a0:	f10e 0103 	add.w	r1, lr, #3
 800c9a4:	1a09      	subs	r1, r1, r0
 800c9a6:	f021 0103 	bic.w	r1, r1, #3
 800c9aa:	3803      	subs	r0, #3
 800c9ac:	4586      	cmp	lr, r0
 800c9ae:	bf38      	it	cc
 800c9b0:	2100      	movcc	r1, #0
 800c9b2:	4419      	add	r1, r3
 800c9b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c9b8:	b18b      	cbz	r3, 800c9de <__mdiff+0x10a>
 800c9ba:	6117      	str	r7, [r2, #16]
 800c9bc:	e7a4      	b.n	800c908 <__mdiff+0x34>
 800c9be:	f855 8b04 	ldr.w	r8, [r5], #4
 800c9c2:	fa1f f188 	uxth.w	r1, r8
 800c9c6:	4461      	add	r1, ip
 800c9c8:	140c      	asrs	r4, r1, #16
 800c9ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c9ce:	b289      	uxth	r1, r1
 800c9d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c9d4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c9d8:	f846 1b04 	str.w	r1, [r6], #4
 800c9dc:	e7de      	b.n	800c99c <__mdiff+0xc8>
 800c9de:	3f01      	subs	r7, #1
 800c9e0:	e7e8      	b.n	800c9b4 <__mdiff+0xe0>
 800c9e2:	bf00      	nop
 800c9e4:	0800db71 	.word	0x0800db71
 800c9e8:	0800dc60 	.word	0x0800dc60

0800c9ec <__ulp>:
 800c9ec:	4b11      	ldr	r3, [pc, #68]	; (800ca34 <__ulp+0x48>)
 800c9ee:	400b      	ands	r3, r1
 800c9f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	dd02      	ble.n	800c9fe <__ulp+0x12>
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	4770      	bx	lr
 800c9fe:	425b      	negs	r3, r3
 800ca00:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ca04:	f04f 0000 	mov.w	r0, #0
 800ca08:	f04f 0100 	mov.w	r1, #0
 800ca0c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca10:	da04      	bge.n	800ca1c <__ulp+0x30>
 800ca12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ca16:	fa43 f102 	asr.w	r1, r3, r2
 800ca1a:	4770      	bx	lr
 800ca1c:	f1a2 0314 	sub.w	r3, r2, #20
 800ca20:	2b1e      	cmp	r3, #30
 800ca22:	bfd6      	itet	le
 800ca24:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ca28:	2301      	movgt	r3, #1
 800ca2a:	fa22 f303 	lsrle.w	r3, r2, r3
 800ca2e:	4618      	mov	r0, r3
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	7ff00000 	.word	0x7ff00000

0800ca38 <__b2d>:
 800ca38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca3c:	6907      	ldr	r7, [r0, #16]
 800ca3e:	f100 0914 	add.w	r9, r0, #20
 800ca42:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ca46:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800ca4a:	f1a7 0804 	sub.w	r8, r7, #4
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f7ff fd4e 	bl	800c4f0 <__hi0bits>
 800ca54:	f1c0 0320 	rsb	r3, r0, #32
 800ca58:	280a      	cmp	r0, #10
 800ca5a:	600b      	str	r3, [r1, #0]
 800ca5c:	491f      	ldr	r1, [pc, #124]	; (800cadc <__b2d+0xa4>)
 800ca5e:	dc17      	bgt.n	800ca90 <__b2d+0x58>
 800ca60:	45c1      	cmp	r9, r8
 800ca62:	bf28      	it	cs
 800ca64:	2200      	movcs	r2, #0
 800ca66:	f1c0 0c0b 	rsb	ip, r0, #11
 800ca6a:	fa26 f30c 	lsr.w	r3, r6, ip
 800ca6e:	bf38      	it	cc
 800ca70:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ca74:	ea43 0501 	orr.w	r5, r3, r1
 800ca78:	f100 0315 	add.w	r3, r0, #21
 800ca7c:	fa06 f303 	lsl.w	r3, r6, r3
 800ca80:	fa22 f20c 	lsr.w	r2, r2, ip
 800ca84:	ea43 0402 	orr.w	r4, r3, r2
 800ca88:	4620      	mov	r0, r4
 800ca8a:	4629      	mov	r1, r5
 800ca8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca90:	45c1      	cmp	r9, r8
 800ca92:	bf2e      	itee	cs
 800ca94:	2200      	movcs	r2, #0
 800ca96:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ca9a:	f1a7 0808 	subcc.w	r8, r7, #8
 800ca9e:	f1b0 030b 	subs.w	r3, r0, #11
 800caa2:	d016      	beq.n	800cad2 <__b2d+0x9a>
 800caa4:	f1c3 0720 	rsb	r7, r3, #32
 800caa8:	fa22 f107 	lsr.w	r1, r2, r7
 800caac:	45c8      	cmp	r8, r9
 800caae:	fa06 f603 	lsl.w	r6, r6, r3
 800cab2:	ea46 0601 	orr.w	r6, r6, r1
 800cab6:	bf94      	ite	ls
 800cab8:	2100      	movls	r1, #0
 800caba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cabe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800cac2:	fa02 f003 	lsl.w	r0, r2, r3
 800cac6:	40f9      	lsrs	r1, r7
 800cac8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cacc:	ea40 0401 	orr.w	r4, r0, r1
 800cad0:	e7da      	b.n	800ca88 <__b2d+0x50>
 800cad2:	4614      	mov	r4, r2
 800cad4:	ea46 0501 	orr.w	r5, r6, r1
 800cad8:	e7d6      	b.n	800ca88 <__b2d+0x50>
 800cada:	bf00      	nop
 800cadc:	3ff00000 	.word	0x3ff00000

0800cae0 <__d2b>:
 800cae0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cae4:	2101      	movs	r1, #1
 800cae6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800caea:	4690      	mov	r8, r2
 800caec:	461d      	mov	r5, r3
 800caee:	f7ff fc0d 	bl	800c30c <_Balloc>
 800caf2:	4604      	mov	r4, r0
 800caf4:	b930      	cbnz	r0, 800cb04 <__d2b+0x24>
 800caf6:	4602      	mov	r2, r0
 800caf8:	f240 310a 	movw	r1, #778	; 0x30a
 800cafc:	4b24      	ldr	r3, [pc, #144]	; (800cb90 <__d2b+0xb0>)
 800cafe:	4825      	ldr	r0, [pc, #148]	; (800cb94 <__d2b+0xb4>)
 800cb00:	f7fd ffac 	bl	800aa5c <__assert_func>
 800cb04:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cb08:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cb0c:	bb2d      	cbnz	r5, 800cb5a <__d2b+0x7a>
 800cb0e:	9301      	str	r3, [sp, #4]
 800cb10:	f1b8 0300 	subs.w	r3, r8, #0
 800cb14:	d026      	beq.n	800cb64 <__d2b+0x84>
 800cb16:	4668      	mov	r0, sp
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	f7ff fd09 	bl	800c530 <__lo0bits>
 800cb1e:	9900      	ldr	r1, [sp, #0]
 800cb20:	b1f0      	cbz	r0, 800cb60 <__d2b+0x80>
 800cb22:	9a01      	ldr	r2, [sp, #4]
 800cb24:	f1c0 0320 	rsb	r3, r0, #32
 800cb28:	fa02 f303 	lsl.w	r3, r2, r3
 800cb2c:	430b      	orrs	r3, r1
 800cb2e:	40c2      	lsrs	r2, r0
 800cb30:	6163      	str	r3, [r4, #20]
 800cb32:	9201      	str	r2, [sp, #4]
 800cb34:	9b01      	ldr	r3, [sp, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	bf14      	ite	ne
 800cb3a:	2102      	movne	r1, #2
 800cb3c:	2101      	moveq	r1, #1
 800cb3e:	61a3      	str	r3, [r4, #24]
 800cb40:	6121      	str	r1, [r4, #16]
 800cb42:	b1c5      	cbz	r5, 800cb76 <__d2b+0x96>
 800cb44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb48:	4405      	add	r5, r0
 800cb4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb4e:	603d      	str	r5, [r7, #0]
 800cb50:	6030      	str	r0, [r6, #0]
 800cb52:	4620      	mov	r0, r4
 800cb54:	b002      	add	sp, #8
 800cb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb5e:	e7d6      	b.n	800cb0e <__d2b+0x2e>
 800cb60:	6161      	str	r1, [r4, #20]
 800cb62:	e7e7      	b.n	800cb34 <__d2b+0x54>
 800cb64:	a801      	add	r0, sp, #4
 800cb66:	f7ff fce3 	bl	800c530 <__lo0bits>
 800cb6a:	2101      	movs	r1, #1
 800cb6c:	9b01      	ldr	r3, [sp, #4]
 800cb6e:	6121      	str	r1, [r4, #16]
 800cb70:	6163      	str	r3, [r4, #20]
 800cb72:	3020      	adds	r0, #32
 800cb74:	e7e5      	b.n	800cb42 <__d2b+0x62>
 800cb76:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cb7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb7e:	6038      	str	r0, [r7, #0]
 800cb80:	6918      	ldr	r0, [r3, #16]
 800cb82:	f7ff fcb5 	bl	800c4f0 <__hi0bits>
 800cb86:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cb8a:	6031      	str	r1, [r6, #0]
 800cb8c:	e7e1      	b.n	800cb52 <__d2b+0x72>
 800cb8e:	bf00      	nop
 800cb90:	0800db71 	.word	0x0800db71
 800cb94:	0800dc60 	.word	0x0800dc60

0800cb98 <__ratio>:
 800cb98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9c:	4688      	mov	r8, r1
 800cb9e:	4669      	mov	r1, sp
 800cba0:	4681      	mov	r9, r0
 800cba2:	f7ff ff49 	bl	800ca38 <__b2d>
 800cba6:	460f      	mov	r7, r1
 800cba8:	4604      	mov	r4, r0
 800cbaa:	460d      	mov	r5, r1
 800cbac:	4640      	mov	r0, r8
 800cbae:	a901      	add	r1, sp, #4
 800cbb0:	f7ff ff42 	bl	800ca38 <__b2d>
 800cbb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbb8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cbbc:	468b      	mov	fp, r1
 800cbbe:	eba3 0c02 	sub.w	ip, r3, r2
 800cbc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cbc6:	1a9b      	subs	r3, r3, r2
 800cbc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	bfd5      	itete	le
 800cbd0:	460a      	movle	r2, r1
 800cbd2:	462a      	movgt	r2, r5
 800cbd4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cbd8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cbdc:	bfd8      	it	le
 800cbde:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cbe2:	465b      	mov	r3, fp
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	4639      	mov	r1, r7
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f7f3 fec9 	bl	8000980 <__aeabi_ddiv>
 800cbee:	b003      	add	sp, #12
 800cbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbf4 <__copybits>:
 800cbf4:	3901      	subs	r1, #1
 800cbf6:	b570      	push	{r4, r5, r6, lr}
 800cbf8:	1149      	asrs	r1, r1, #5
 800cbfa:	6914      	ldr	r4, [r2, #16]
 800cbfc:	3101      	adds	r1, #1
 800cbfe:	f102 0314 	add.w	r3, r2, #20
 800cc02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc0a:	1f05      	subs	r5, r0, #4
 800cc0c:	42a3      	cmp	r3, r4
 800cc0e:	d30c      	bcc.n	800cc2a <__copybits+0x36>
 800cc10:	1aa3      	subs	r3, r4, r2
 800cc12:	3b11      	subs	r3, #17
 800cc14:	f023 0303 	bic.w	r3, r3, #3
 800cc18:	3211      	adds	r2, #17
 800cc1a:	42a2      	cmp	r2, r4
 800cc1c:	bf88      	it	hi
 800cc1e:	2300      	movhi	r3, #0
 800cc20:	4418      	add	r0, r3
 800cc22:	2300      	movs	r3, #0
 800cc24:	4288      	cmp	r0, r1
 800cc26:	d305      	bcc.n	800cc34 <__copybits+0x40>
 800cc28:	bd70      	pop	{r4, r5, r6, pc}
 800cc2a:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc2e:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc32:	e7eb      	b.n	800cc0c <__copybits+0x18>
 800cc34:	f840 3b04 	str.w	r3, [r0], #4
 800cc38:	e7f4      	b.n	800cc24 <__copybits+0x30>

0800cc3a <__any_on>:
 800cc3a:	f100 0214 	add.w	r2, r0, #20
 800cc3e:	6900      	ldr	r0, [r0, #16]
 800cc40:	114b      	asrs	r3, r1, #5
 800cc42:	4298      	cmp	r0, r3
 800cc44:	b510      	push	{r4, lr}
 800cc46:	db11      	blt.n	800cc6c <__any_on+0x32>
 800cc48:	dd0a      	ble.n	800cc60 <__any_on+0x26>
 800cc4a:	f011 011f 	ands.w	r1, r1, #31
 800cc4e:	d007      	beq.n	800cc60 <__any_on+0x26>
 800cc50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc54:	fa24 f001 	lsr.w	r0, r4, r1
 800cc58:	fa00 f101 	lsl.w	r1, r0, r1
 800cc5c:	428c      	cmp	r4, r1
 800cc5e:	d10b      	bne.n	800cc78 <__any_on+0x3e>
 800cc60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d803      	bhi.n	800cc70 <__any_on+0x36>
 800cc68:	2000      	movs	r0, #0
 800cc6a:	bd10      	pop	{r4, pc}
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	e7f7      	b.n	800cc60 <__any_on+0x26>
 800cc70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc74:	2900      	cmp	r1, #0
 800cc76:	d0f5      	beq.n	800cc64 <__any_on+0x2a>
 800cc78:	2001      	movs	r0, #1
 800cc7a:	e7f6      	b.n	800cc6a <__any_on+0x30>

0800cc7c <_calloc_r>:
 800cc7c:	b570      	push	{r4, r5, r6, lr}
 800cc7e:	fba1 5402 	umull	r5, r4, r1, r2
 800cc82:	b934      	cbnz	r4, 800cc92 <_calloc_r+0x16>
 800cc84:	4629      	mov	r1, r5
 800cc86:	f000 f875 	bl	800cd74 <_malloc_r>
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	b928      	cbnz	r0, 800cc9a <_calloc_r+0x1e>
 800cc8e:	4630      	mov	r0, r6
 800cc90:	bd70      	pop	{r4, r5, r6, pc}
 800cc92:	220c      	movs	r2, #12
 800cc94:	2600      	movs	r6, #0
 800cc96:	6002      	str	r2, [r0, #0]
 800cc98:	e7f9      	b.n	800cc8e <_calloc_r+0x12>
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	f7fb ffeb 	bl	8008c78 <memset>
 800cca2:	e7f4      	b.n	800cc8e <_calloc_r+0x12>

0800cca4 <_free_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4605      	mov	r5, r0
 800cca8:	2900      	cmp	r1, #0
 800ccaa:	d040      	beq.n	800cd2e <_free_r+0x8a>
 800ccac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccb0:	1f0c      	subs	r4, r1, #4
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	bfb8      	it	lt
 800ccb6:	18e4      	addlt	r4, r4, r3
 800ccb8:	f000 fcbe 	bl	800d638 <__malloc_lock>
 800ccbc:	4a1c      	ldr	r2, [pc, #112]	; (800cd30 <_free_r+0x8c>)
 800ccbe:	6813      	ldr	r3, [r2, #0]
 800ccc0:	b933      	cbnz	r3, 800ccd0 <_free_r+0x2c>
 800ccc2:	6063      	str	r3, [r4, #4]
 800ccc4:	6014      	str	r4, [r2, #0]
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cccc:	f000 bcba 	b.w	800d644 <__malloc_unlock>
 800ccd0:	42a3      	cmp	r3, r4
 800ccd2:	d908      	bls.n	800cce6 <_free_r+0x42>
 800ccd4:	6820      	ldr	r0, [r4, #0]
 800ccd6:	1821      	adds	r1, r4, r0
 800ccd8:	428b      	cmp	r3, r1
 800ccda:	bf01      	itttt	eq
 800ccdc:	6819      	ldreq	r1, [r3, #0]
 800ccde:	685b      	ldreq	r3, [r3, #4]
 800cce0:	1809      	addeq	r1, r1, r0
 800cce2:	6021      	streq	r1, [r4, #0]
 800cce4:	e7ed      	b.n	800ccc2 <_free_r+0x1e>
 800cce6:	461a      	mov	r2, r3
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	b10b      	cbz	r3, 800ccf0 <_free_r+0x4c>
 800ccec:	42a3      	cmp	r3, r4
 800ccee:	d9fa      	bls.n	800cce6 <_free_r+0x42>
 800ccf0:	6811      	ldr	r1, [r2, #0]
 800ccf2:	1850      	adds	r0, r2, r1
 800ccf4:	42a0      	cmp	r0, r4
 800ccf6:	d10b      	bne.n	800cd10 <_free_r+0x6c>
 800ccf8:	6820      	ldr	r0, [r4, #0]
 800ccfa:	4401      	add	r1, r0
 800ccfc:	1850      	adds	r0, r2, r1
 800ccfe:	4283      	cmp	r3, r0
 800cd00:	6011      	str	r1, [r2, #0]
 800cd02:	d1e0      	bne.n	800ccc6 <_free_r+0x22>
 800cd04:	6818      	ldr	r0, [r3, #0]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	4401      	add	r1, r0
 800cd0a:	6011      	str	r1, [r2, #0]
 800cd0c:	6053      	str	r3, [r2, #4]
 800cd0e:	e7da      	b.n	800ccc6 <_free_r+0x22>
 800cd10:	d902      	bls.n	800cd18 <_free_r+0x74>
 800cd12:	230c      	movs	r3, #12
 800cd14:	602b      	str	r3, [r5, #0]
 800cd16:	e7d6      	b.n	800ccc6 <_free_r+0x22>
 800cd18:	6820      	ldr	r0, [r4, #0]
 800cd1a:	1821      	adds	r1, r4, r0
 800cd1c:	428b      	cmp	r3, r1
 800cd1e:	bf01      	itttt	eq
 800cd20:	6819      	ldreq	r1, [r3, #0]
 800cd22:	685b      	ldreq	r3, [r3, #4]
 800cd24:	1809      	addeq	r1, r1, r0
 800cd26:	6021      	streq	r1, [r4, #0]
 800cd28:	6063      	str	r3, [r4, #4]
 800cd2a:	6054      	str	r4, [r2, #4]
 800cd2c:	e7cb      	b.n	800ccc6 <_free_r+0x22>
 800cd2e:	bd38      	pop	{r3, r4, r5, pc}
 800cd30:	20000c74 	.word	0x20000c74

0800cd34 <sbrk_aligned>:
 800cd34:	b570      	push	{r4, r5, r6, lr}
 800cd36:	4e0e      	ldr	r6, [pc, #56]	; (800cd70 <sbrk_aligned+0x3c>)
 800cd38:	460c      	mov	r4, r1
 800cd3a:	6831      	ldr	r1, [r6, #0]
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	b911      	cbnz	r1, 800cd46 <sbrk_aligned+0x12>
 800cd40:	f000 fb8e 	bl	800d460 <_sbrk_r>
 800cd44:	6030      	str	r0, [r6, #0]
 800cd46:	4621      	mov	r1, r4
 800cd48:	4628      	mov	r0, r5
 800cd4a:	f000 fb89 	bl	800d460 <_sbrk_r>
 800cd4e:	1c43      	adds	r3, r0, #1
 800cd50:	d00a      	beq.n	800cd68 <sbrk_aligned+0x34>
 800cd52:	1cc4      	adds	r4, r0, #3
 800cd54:	f024 0403 	bic.w	r4, r4, #3
 800cd58:	42a0      	cmp	r0, r4
 800cd5a:	d007      	beq.n	800cd6c <sbrk_aligned+0x38>
 800cd5c:	1a21      	subs	r1, r4, r0
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f000 fb7e 	bl	800d460 <_sbrk_r>
 800cd64:	3001      	adds	r0, #1
 800cd66:	d101      	bne.n	800cd6c <sbrk_aligned+0x38>
 800cd68:	f04f 34ff 	mov.w	r4, #4294967295
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	bd70      	pop	{r4, r5, r6, pc}
 800cd70:	20000c78 	.word	0x20000c78

0800cd74 <_malloc_r>:
 800cd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd78:	1ccd      	adds	r5, r1, #3
 800cd7a:	f025 0503 	bic.w	r5, r5, #3
 800cd7e:	3508      	adds	r5, #8
 800cd80:	2d0c      	cmp	r5, #12
 800cd82:	bf38      	it	cc
 800cd84:	250c      	movcc	r5, #12
 800cd86:	2d00      	cmp	r5, #0
 800cd88:	4607      	mov	r7, r0
 800cd8a:	db01      	blt.n	800cd90 <_malloc_r+0x1c>
 800cd8c:	42a9      	cmp	r1, r5
 800cd8e:	d905      	bls.n	800cd9c <_malloc_r+0x28>
 800cd90:	230c      	movs	r3, #12
 800cd92:	2600      	movs	r6, #0
 800cd94:	603b      	str	r3, [r7, #0]
 800cd96:	4630      	mov	r0, r6
 800cd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd9c:	4e2e      	ldr	r6, [pc, #184]	; (800ce58 <_malloc_r+0xe4>)
 800cd9e:	f000 fc4b 	bl	800d638 <__malloc_lock>
 800cda2:	6833      	ldr	r3, [r6, #0]
 800cda4:	461c      	mov	r4, r3
 800cda6:	bb34      	cbnz	r4, 800cdf6 <_malloc_r+0x82>
 800cda8:	4629      	mov	r1, r5
 800cdaa:	4638      	mov	r0, r7
 800cdac:	f7ff ffc2 	bl	800cd34 <sbrk_aligned>
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	d14d      	bne.n	800ce52 <_malloc_r+0xde>
 800cdb6:	6834      	ldr	r4, [r6, #0]
 800cdb8:	4626      	mov	r6, r4
 800cdba:	2e00      	cmp	r6, #0
 800cdbc:	d140      	bne.n	800ce40 <_malloc_r+0xcc>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	eb04 0803 	add.w	r8, r4, r3
 800cdc8:	f000 fb4a 	bl	800d460 <_sbrk_r>
 800cdcc:	4580      	cmp	r8, r0
 800cdce:	d13a      	bne.n	800ce46 <_malloc_r+0xd2>
 800cdd0:	6821      	ldr	r1, [r4, #0]
 800cdd2:	3503      	adds	r5, #3
 800cdd4:	1a6d      	subs	r5, r5, r1
 800cdd6:	f025 0503 	bic.w	r5, r5, #3
 800cdda:	3508      	adds	r5, #8
 800cddc:	2d0c      	cmp	r5, #12
 800cdde:	bf38      	it	cc
 800cde0:	250c      	movcc	r5, #12
 800cde2:	4638      	mov	r0, r7
 800cde4:	4629      	mov	r1, r5
 800cde6:	f7ff ffa5 	bl	800cd34 <sbrk_aligned>
 800cdea:	3001      	adds	r0, #1
 800cdec:	d02b      	beq.n	800ce46 <_malloc_r+0xd2>
 800cdee:	6823      	ldr	r3, [r4, #0]
 800cdf0:	442b      	add	r3, r5
 800cdf2:	6023      	str	r3, [r4, #0]
 800cdf4:	e00e      	b.n	800ce14 <_malloc_r+0xa0>
 800cdf6:	6822      	ldr	r2, [r4, #0]
 800cdf8:	1b52      	subs	r2, r2, r5
 800cdfa:	d41e      	bmi.n	800ce3a <_malloc_r+0xc6>
 800cdfc:	2a0b      	cmp	r2, #11
 800cdfe:	d916      	bls.n	800ce2e <_malloc_r+0xba>
 800ce00:	1961      	adds	r1, r4, r5
 800ce02:	42a3      	cmp	r3, r4
 800ce04:	6025      	str	r5, [r4, #0]
 800ce06:	bf18      	it	ne
 800ce08:	6059      	strne	r1, [r3, #4]
 800ce0a:	6863      	ldr	r3, [r4, #4]
 800ce0c:	bf08      	it	eq
 800ce0e:	6031      	streq	r1, [r6, #0]
 800ce10:	5162      	str	r2, [r4, r5]
 800ce12:	604b      	str	r3, [r1, #4]
 800ce14:	4638      	mov	r0, r7
 800ce16:	f104 060b 	add.w	r6, r4, #11
 800ce1a:	f000 fc13 	bl	800d644 <__malloc_unlock>
 800ce1e:	f026 0607 	bic.w	r6, r6, #7
 800ce22:	1d23      	adds	r3, r4, #4
 800ce24:	1af2      	subs	r2, r6, r3
 800ce26:	d0b6      	beq.n	800cd96 <_malloc_r+0x22>
 800ce28:	1b9b      	subs	r3, r3, r6
 800ce2a:	50a3      	str	r3, [r4, r2]
 800ce2c:	e7b3      	b.n	800cd96 <_malloc_r+0x22>
 800ce2e:	6862      	ldr	r2, [r4, #4]
 800ce30:	42a3      	cmp	r3, r4
 800ce32:	bf0c      	ite	eq
 800ce34:	6032      	streq	r2, [r6, #0]
 800ce36:	605a      	strne	r2, [r3, #4]
 800ce38:	e7ec      	b.n	800ce14 <_malloc_r+0xa0>
 800ce3a:	4623      	mov	r3, r4
 800ce3c:	6864      	ldr	r4, [r4, #4]
 800ce3e:	e7b2      	b.n	800cda6 <_malloc_r+0x32>
 800ce40:	4634      	mov	r4, r6
 800ce42:	6876      	ldr	r6, [r6, #4]
 800ce44:	e7b9      	b.n	800cdba <_malloc_r+0x46>
 800ce46:	230c      	movs	r3, #12
 800ce48:	4638      	mov	r0, r7
 800ce4a:	603b      	str	r3, [r7, #0]
 800ce4c:	f000 fbfa 	bl	800d644 <__malloc_unlock>
 800ce50:	e7a1      	b.n	800cd96 <_malloc_r+0x22>
 800ce52:	6025      	str	r5, [r4, #0]
 800ce54:	e7de      	b.n	800ce14 <_malloc_r+0xa0>
 800ce56:	bf00      	nop
 800ce58:	20000c74 	.word	0x20000c74

0800ce5c <__ssputs_r>:
 800ce5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce60:	688e      	ldr	r6, [r1, #8]
 800ce62:	4682      	mov	sl, r0
 800ce64:	429e      	cmp	r6, r3
 800ce66:	460c      	mov	r4, r1
 800ce68:	4690      	mov	r8, r2
 800ce6a:	461f      	mov	r7, r3
 800ce6c:	d838      	bhi.n	800cee0 <__ssputs_r+0x84>
 800ce6e:	898a      	ldrh	r2, [r1, #12]
 800ce70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce74:	d032      	beq.n	800cedc <__ssputs_r+0x80>
 800ce76:	6825      	ldr	r5, [r4, #0]
 800ce78:	6909      	ldr	r1, [r1, #16]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	eba5 0901 	sub.w	r9, r5, r1
 800ce80:	6965      	ldr	r5, [r4, #20]
 800ce82:	444b      	add	r3, r9
 800ce84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce8c:	106d      	asrs	r5, r5, #1
 800ce8e:	429d      	cmp	r5, r3
 800ce90:	bf38      	it	cc
 800ce92:	461d      	movcc	r5, r3
 800ce94:	0553      	lsls	r3, r2, #21
 800ce96:	d531      	bpl.n	800cefc <__ssputs_r+0xa0>
 800ce98:	4629      	mov	r1, r5
 800ce9a:	f7ff ff6b 	bl	800cd74 <_malloc_r>
 800ce9e:	4606      	mov	r6, r0
 800cea0:	b950      	cbnz	r0, 800ceb8 <__ssputs_r+0x5c>
 800cea2:	230c      	movs	r3, #12
 800cea4:	f04f 30ff 	mov.w	r0, #4294967295
 800cea8:	f8ca 3000 	str.w	r3, [sl]
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb8:	464a      	mov	r2, r9
 800ceba:	6921      	ldr	r1, [r4, #16]
 800cebc:	f7fb fece 	bl	8008c5c <memcpy>
 800cec0:	89a3      	ldrh	r3, [r4, #12]
 800cec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceca:	81a3      	strh	r3, [r4, #12]
 800cecc:	6126      	str	r6, [r4, #16]
 800cece:	444e      	add	r6, r9
 800ced0:	6026      	str	r6, [r4, #0]
 800ced2:	463e      	mov	r6, r7
 800ced4:	6165      	str	r5, [r4, #20]
 800ced6:	eba5 0509 	sub.w	r5, r5, r9
 800ceda:	60a5      	str	r5, [r4, #8]
 800cedc:	42be      	cmp	r6, r7
 800cede:	d900      	bls.n	800cee2 <__ssputs_r+0x86>
 800cee0:	463e      	mov	r6, r7
 800cee2:	4632      	mov	r2, r6
 800cee4:	4641      	mov	r1, r8
 800cee6:	6820      	ldr	r0, [r4, #0]
 800cee8:	f000 fb8c 	bl	800d604 <memmove>
 800ceec:	68a3      	ldr	r3, [r4, #8]
 800ceee:	2000      	movs	r0, #0
 800cef0:	1b9b      	subs	r3, r3, r6
 800cef2:	60a3      	str	r3, [r4, #8]
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	4433      	add	r3, r6
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	e7db      	b.n	800ceb4 <__ssputs_r+0x58>
 800cefc:	462a      	mov	r2, r5
 800cefe:	f000 fba7 	bl	800d650 <_realloc_r>
 800cf02:	4606      	mov	r6, r0
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d1e1      	bne.n	800cecc <__ssputs_r+0x70>
 800cf08:	4650      	mov	r0, sl
 800cf0a:	6921      	ldr	r1, [r4, #16]
 800cf0c:	f7ff feca 	bl	800cca4 <_free_r>
 800cf10:	e7c7      	b.n	800cea2 <__ssputs_r+0x46>
	...

0800cf14 <_svfiprintf_r>:
 800cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	4698      	mov	r8, r3
 800cf1a:	898b      	ldrh	r3, [r1, #12]
 800cf1c:	4607      	mov	r7, r0
 800cf1e:	061b      	lsls	r3, r3, #24
 800cf20:	460d      	mov	r5, r1
 800cf22:	4614      	mov	r4, r2
 800cf24:	b09d      	sub	sp, #116	; 0x74
 800cf26:	d50e      	bpl.n	800cf46 <_svfiprintf_r+0x32>
 800cf28:	690b      	ldr	r3, [r1, #16]
 800cf2a:	b963      	cbnz	r3, 800cf46 <_svfiprintf_r+0x32>
 800cf2c:	2140      	movs	r1, #64	; 0x40
 800cf2e:	f7ff ff21 	bl	800cd74 <_malloc_r>
 800cf32:	6028      	str	r0, [r5, #0]
 800cf34:	6128      	str	r0, [r5, #16]
 800cf36:	b920      	cbnz	r0, 800cf42 <_svfiprintf_r+0x2e>
 800cf38:	230c      	movs	r3, #12
 800cf3a:	603b      	str	r3, [r7, #0]
 800cf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf40:	e0d1      	b.n	800d0e6 <_svfiprintf_r+0x1d2>
 800cf42:	2340      	movs	r3, #64	; 0x40
 800cf44:	616b      	str	r3, [r5, #20]
 800cf46:	2300      	movs	r3, #0
 800cf48:	9309      	str	r3, [sp, #36]	; 0x24
 800cf4a:	2320      	movs	r3, #32
 800cf4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf50:	2330      	movs	r3, #48	; 0x30
 800cf52:	f04f 0901 	mov.w	r9, #1
 800cf56:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d100 <_svfiprintf_r+0x1ec>
 800cf5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf62:	4623      	mov	r3, r4
 800cf64:	469a      	mov	sl, r3
 800cf66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf6a:	b10a      	cbz	r2, 800cf70 <_svfiprintf_r+0x5c>
 800cf6c:	2a25      	cmp	r2, #37	; 0x25
 800cf6e:	d1f9      	bne.n	800cf64 <_svfiprintf_r+0x50>
 800cf70:	ebba 0b04 	subs.w	fp, sl, r4
 800cf74:	d00b      	beq.n	800cf8e <_svfiprintf_r+0x7a>
 800cf76:	465b      	mov	r3, fp
 800cf78:	4622      	mov	r2, r4
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	f7ff ff6d 	bl	800ce5c <__ssputs_r>
 800cf82:	3001      	adds	r0, #1
 800cf84:	f000 80aa 	beq.w	800d0dc <_svfiprintf_r+0x1c8>
 800cf88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf8a:	445a      	add	r2, fp
 800cf8c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf8e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f000 80a2 	beq.w	800d0dc <_svfiprintf_r+0x1c8>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfa2:	f10a 0a01 	add.w	sl, sl, #1
 800cfa6:	9304      	str	r3, [sp, #16]
 800cfa8:	9307      	str	r3, [sp, #28]
 800cfaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfae:	931a      	str	r3, [sp, #104]	; 0x68
 800cfb0:	4654      	mov	r4, sl
 800cfb2:	2205      	movs	r2, #5
 800cfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb8:	4851      	ldr	r0, [pc, #324]	; (800d100 <_svfiprintf_r+0x1ec>)
 800cfba:	f7ff f999 	bl	800c2f0 <memchr>
 800cfbe:	9a04      	ldr	r2, [sp, #16]
 800cfc0:	b9d8      	cbnz	r0, 800cffa <_svfiprintf_r+0xe6>
 800cfc2:	06d0      	lsls	r0, r2, #27
 800cfc4:	bf44      	itt	mi
 800cfc6:	2320      	movmi	r3, #32
 800cfc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfcc:	0711      	lsls	r1, r2, #28
 800cfce:	bf44      	itt	mi
 800cfd0:	232b      	movmi	r3, #43	; 0x2b
 800cfd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfd6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfda:	2b2a      	cmp	r3, #42	; 0x2a
 800cfdc:	d015      	beq.n	800d00a <_svfiprintf_r+0xf6>
 800cfde:	4654      	mov	r4, sl
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	f04f 0c0a 	mov.w	ip, #10
 800cfe6:	9a07      	ldr	r2, [sp, #28]
 800cfe8:	4621      	mov	r1, r4
 800cfea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfee:	3b30      	subs	r3, #48	; 0x30
 800cff0:	2b09      	cmp	r3, #9
 800cff2:	d94e      	bls.n	800d092 <_svfiprintf_r+0x17e>
 800cff4:	b1b0      	cbz	r0, 800d024 <_svfiprintf_r+0x110>
 800cff6:	9207      	str	r2, [sp, #28]
 800cff8:	e014      	b.n	800d024 <_svfiprintf_r+0x110>
 800cffa:	eba0 0308 	sub.w	r3, r0, r8
 800cffe:	fa09 f303 	lsl.w	r3, r9, r3
 800d002:	4313      	orrs	r3, r2
 800d004:	46a2      	mov	sl, r4
 800d006:	9304      	str	r3, [sp, #16]
 800d008:	e7d2      	b.n	800cfb0 <_svfiprintf_r+0x9c>
 800d00a:	9b03      	ldr	r3, [sp, #12]
 800d00c:	1d19      	adds	r1, r3, #4
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	9103      	str	r1, [sp, #12]
 800d012:	2b00      	cmp	r3, #0
 800d014:	bfbb      	ittet	lt
 800d016:	425b      	neglt	r3, r3
 800d018:	f042 0202 	orrlt.w	r2, r2, #2
 800d01c:	9307      	strge	r3, [sp, #28]
 800d01e:	9307      	strlt	r3, [sp, #28]
 800d020:	bfb8      	it	lt
 800d022:	9204      	strlt	r2, [sp, #16]
 800d024:	7823      	ldrb	r3, [r4, #0]
 800d026:	2b2e      	cmp	r3, #46	; 0x2e
 800d028:	d10c      	bne.n	800d044 <_svfiprintf_r+0x130>
 800d02a:	7863      	ldrb	r3, [r4, #1]
 800d02c:	2b2a      	cmp	r3, #42	; 0x2a
 800d02e:	d135      	bne.n	800d09c <_svfiprintf_r+0x188>
 800d030:	9b03      	ldr	r3, [sp, #12]
 800d032:	3402      	adds	r4, #2
 800d034:	1d1a      	adds	r2, r3, #4
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	9203      	str	r2, [sp, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	bfb8      	it	lt
 800d03e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d042:	9305      	str	r3, [sp, #20]
 800d044:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d104 <_svfiprintf_r+0x1f0>
 800d048:	2203      	movs	r2, #3
 800d04a:	4650      	mov	r0, sl
 800d04c:	7821      	ldrb	r1, [r4, #0]
 800d04e:	f7ff f94f 	bl	800c2f0 <memchr>
 800d052:	b140      	cbz	r0, 800d066 <_svfiprintf_r+0x152>
 800d054:	2340      	movs	r3, #64	; 0x40
 800d056:	eba0 000a 	sub.w	r0, r0, sl
 800d05a:	fa03 f000 	lsl.w	r0, r3, r0
 800d05e:	9b04      	ldr	r3, [sp, #16]
 800d060:	3401      	adds	r4, #1
 800d062:	4303      	orrs	r3, r0
 800d064:	9304      	str	r3, [sp, #16]
 800d066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d06a:	2206      	movs	r2, #6
 800d06c:	4826      	ldr	r0, [pc, #152]	; (800d108 <_svfiprintf_r+0x1f4>)
 800d06e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d072:	f7ff f93d 	bl	800c2f0 <memchr>
 800d076:	2800      	cmp	r0, #0
 800d078:	d038      	beq.n	800d0ec <_svfiprintf_r+0x1d8>
 800d07a:	4b24      	ldr	r3, [pc, #144]	; (800d10c <_svfiprintf_r+0x1f8>)
 800d07c:	bb1b      	cbnz	r3, 800d0c6 <_svfiprintf_r+0x1b2>
 800d07e:	9b03      	ldr	r3, [sp, #12]
 800d080:	3307      	adds	r3, #7
 800d082:	f023 0307 	bic.w	r3, r3, #7
 800d086:	3308      	adds	r3, #8
 800d088:	9303      	str	r3, [sp, #12]
 800d08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08c:	4433      	add	r3, r6
 800d08e:	9309      	str	r3, [sp, #36]	; 0x24
 800d090:	e767      	b.n	800cf62 <_svfiprintf_r+0x4e>
 800d092:	460c      	mov	r4, r1
 800d094:	2001      	movs	r0, #1
 800d096:	fb0c 3202 	mla	r2, ip, r2, r3
 800d09a:	e7a5      	b.n	800cfe8 <_svfiprintf_r+0xd4>
 800d09c:	2300      	movs	r3, #0
 800d09e:	f04f 0c0a 	mov.w	ip, #10
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	3401      	adds	r4, #1
 800d0a6:	9305      	str	r3, [sp, #20]
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0ae:	3a30      	subs	r2, #48	; 0x30
 800d0b0:	2a09      	cmp	r2, #9
 800d0b2:	d903      	bls.n	800d0bc <_svfiprintf_r+0x1a8>
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d0c5      	beq.n	800d044 <_svfiprintf_r+0x130>
 800d0b8:	9105      	str	r1, [sp, #20]
 800d0ba:	e7c3      	b.n	800d044 <_svfiprintf_r+0x130>
 800d0bc:	4604      	mov	r4, r0
 800d0be:	2301      	movs	r3, #1
 800d0c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0c4:	e7f0      	b.n	800d0a8 <_svfiprintf_r+0x194>
 800d0c6:	ab03      	add	r3, sp, #12
 800d0c8:	9300      	str	r3, [sp, #0]
 800d0ca:	462a      	mov	r2, r5
 800d0cc:	4638      	mov	r0, r7
 800d0ce:	4b10      	ldr	r3, [pc, #64]	; (800d110 <_svfiprintf_r+0x1fc>)
 800d0d0:	a904      	add	r1, sp, #16
 800d0d2:	f7fb fe77 	bl	8008dc4 <_printf_float>
 800d0d6:	1c42      	adds	r2, r0, #1
 800d0d8:	4606      	mov	r6, r0
 800d0da:	d1d6      	bne.n	800d08a <_svfiprintf_r+0x176>
 800d0dc:	89ab      	ldrh	r3, [r5, #12]
 800d0de:	065b      	lsls	r3, r3, #25
 800d0e0:	f53f af2c 	bmi.w	800cf3c <_svfiprintf_r+0x28>
 800d0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0e6:	b01d      	add	sp, #116	; 0x74
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	ab03      	add	r3, sp, #12
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	462a      	mov	r2, r5
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	4b06      	ldr	r3, [pc, #24]	; (800d110 <_svfiprintf_r+0x1fc>)
 800d0f6:	a904      	add	r1, sp, #16
 800d0f8:	f7fc f900 	bl	80092fc <_printf_i>
 800d0fc:	e7eb      	b.n	800d0d6 <_svfiprintf_r+0x1c2>
 800d0fe:	bf00      	nop
 800d100:	0800ddbc 	.word	0x0800ddbc
 800d104:	0800ddc2 	.word	0x0800ddc2
 800d108:	0800ddc6 	.word	0x0800ddc6
 800d10c:	08008dc5 	.word	0x08008dc5
 800d110:	0800ce5d 	.word	0x0800ce5d

0800d114 <__sfputc_r>:
 800d114:	6893      	ldr	r3, [r2, #8]
 800d116:	b410      	push	{r4}
 800d118:	3b01      	subs	r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	6093      	str	r3, [r2, #8]
 800d11e:	da07      	bge.n	800d130 <__sfputc_r+0x1c>
 800d120:	6994      	ldr	r4, [r2, #24]
 800d122:	42a3      	cmp	r3, r4
 800d124:	db01      	blt.n	800d12a <__sfputc_r+0x16>
 800d126:	290a      	cmp	r1, #10
 800d128:	d102      	bne.n	800d130 <__sfputc_r+0x1c>
 800d12a:	bc10      	pop	{r4}
 800d12c:	f7fd bbd6 	b.w	800a8dc <__swbuf_r>
 800d130:	6813      	ldr	r3, [r2, #0]
 800d132:	1c58      	adds	r0, r3, #1
 800d134:	6010      	str	r0, [r2, #0]
 800d136:	7019      	strb	r1, [r3, #0]
 800d138:	4608      	mov	r0, r1
 800d13a:	bc10      	pop	{r4}
 800d13c:	4770      	bx	lr

0800d13e <__sfputs_r>:
 800d13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d140:	4606      	mov	r6, r0
 800d142:	460f      	mov	r7, r1
 800d144:	4614      	mov	r4, r2
 800d146:	18d5      	adds	r5, r2, r3
 800d148:	42ac      	cmp	r4, r5
 800d14a:	d101      	bne.n	800d150 <__sfputs_r+0x12>
 800d14c:	2000      	movs	r0, #0
 800d14e:	e007      	b.n	800d160 <__sfputs_r+0x22>
 800d150:	463a      	mov	r2, r7
 800d152:	4630      	mov	r0, r6
 800d154:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d158:	f7ff ffdc 	bl	800d114 <__sfputc_r>
 800d15c:	1c43      	adds	r3, r0, #1
 800d15e:	d1f3      	bne.n	800d148 <__sfputs_r+0xa>
 800d160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d164 <_vfiprintf_r>:
 800d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d168:	460d      	mov	r5, r1
 800d16a:	4614      	mov	r4, r2
 800d16c:	4698      	mov	r8, r3
 800d16e:	4606      	mov	r6, r0
 800d170:	b09d      	sub	sp, #116	; 0x74
 800d172:	b118      	cbz	r0, 800d17c <_vfiprintf_r+0x18>
 800d174:	6983      	ldr	r3, [r0, #24]
 800d176:	b90b      	cbnz	r3, 800d17c <_vfiprintf_r+0x18>
 800d178:	f7fe fc1e 	bl	800b9b8 <__sinit>
 800d17c:	4b89      	ldr	r3, [pc, #548]	; (800d3a4 <_vfiprintf_r+0x240>)
 800d17e:	429d      	cmp	r5, r3
 800d180:	d11b      	bne.n	800d1ba <_vfiprintf_r+0x56>
 800d182:	6875      	ldr	r5, [r6, #4]
 800d184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d186:	07d9      	lsls	r1, r3, #31
 800d188:	d405      	bmi.n	800d196 <_vfiprintf_r+0x32>
 800d18a:	89ab      	ldrh	r3, [r5, #12]
 800d18c:	059a      	lsls	r2, r3, #22
 800d18e:	d402      	bmi.n	800d196 <_vfiprintf_r+0x32>
 800d190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d192:	f7ff f82c 	bl	800c1ee <__retarget_lock_acquire_recursive>
 800d196:	89ab      	ldrh	r3, [r5, #12]
 800d198:	071b      	lsls	r3, r3, #28
 800d19a:	d501      	bpl.n	800d1a0 <_vfiprintf_r+0x3c>
 800d19c:	692b      	ldr	r3, [r5, #16]
 800d19e:	b9eb      	cbnz	r3, 800d1dc <_vfiprintf_r+0x78>
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f7fd fbec 	bl	800a980 <__swsetup_r>
 800d1a8:	b1c0      	cbz	r0, 800d1dc <_vfiprintf_r+0x78>
 800d1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1ac:	07dc      	lsls	r4, r3, #31
 800d1ae:	d50e      	bpl.n	800d1ce <_vfiprintf_r+0x6a>
 800d1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b4:	b01d      	add	sp, #116	; 0x74
 800d1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ba:	4b7b      	ldr	r3, [pc, #492]	; (800d3a8 <_vfiprintf_r+0x244>)
 800d1bc:	429d      	cmp	r5, r3
 800d1be:	d101      	bne.n	800d1c4 <_vfiprintf_r+0x60>
 800d1c0:	68b5      	ldr	r5, [r6, #8]
 800d1c2:	e7df      	b.n	800d184 <_vfiprintf_r+0x20>
 800d1c4:	4b79      	ldr	r3, [pc, #484]	; (800d3ac <_vfiprintf_r+0x248>)
 800d1c6:	429d      	cmp	r5, r3
 800d1c8:	bf08      	it	eq
 800d1ca:	68f5      	ldreq	r5, [r6, #12]
 800d1cc:	e7da      	b.n	800d184 <_vfiprintf_r+0x20>
 800d1ce:	89ab      	ldrh	r3, [r5, #12]
 800d1d0:	0598      	lsls	r0, r3, #22
 800d1d2:	d4ed      	bmi.n	800d1b0 <_vfiprintf_r+0x4c>
 800d1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1d6:	f7ff f80b 	bl	800c1f0 <__retarget_lock_release_recursive>
 800d1da:	e7e9      	b.n	800d1b0 <_vfiprintf_r+0x4c>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	9309      	str	r3, [sp, #36]	; 0x24
 800d1e0:	2320      	movs	r3, #32
 800d1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1e6:	2330      	movs	r3, #48	; 0x30
 800d1e8:	f04f 0901 	mov.w	r9, #1
 800d1ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d3b0 <_vfiprintf_r+0x24c>
 800d1f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1f8:	4623      	mov	r3, r4
 800d1fa:	469a      	mov	sl, r3
 800d1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d200:	b10a      	cbz	r2, 800d206 <_vfiprintf_r+0xa2>
 800d202:	2a25      	cmp	r2, #37	; 0x25
 800d204:	d1f9      	bne.n	800d1fa <_vfiprintf_r+0x96>
 800d206:	ebba 0b04 	subs.w	fp, sl, r4
 800d20a:	d00b      	beq.n	800d224 <_vfiprintf_r+0xc0>
 800d20c:	465b      	mov	r3, fp
 800d20e:	4622      	mov	r2, r4
 800d210:	4629      	mov	r1, r5
 800d212:	4630      	mov	r0, r6
 800d214:	f7ff ff93 	bl	800d13e <__sfputs_r>
 800d218:	3001      	adds	r0, #1
 800d21a:	f000 80aa 	beq.w	800d372 <_vfiprintf_r+0x20e>
 800d21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d220:	445a      	add	r2, fp
 800d222:	9209      	str	r2, [sp, #36]	; 0x24
 800d224:	f89a 3000 	ldrb.w	r3, [sl]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 80a2 	beq.w	800d372 <_vfiprintf_r+0x20e>
 800d22e:	2300      	movs	r3, #0
 800d230:	f04f 32ff 	mov.w	r2, #4294967295
 800d234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d238:	f10a 0a01 	add.w	sl, sl, #1
 800d23c:	9304      	str	r3, [sp, #16]
 800d23e:	9307      	str	r3, [sp, #28]
 800d240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d244:	931a      	str	r3, [sp, #104]	; 0x68
 800d246:	4654      	mov	r4, sl
 800d248:	2205      	movs	r2, #5
 800d24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d24e:	4858      	ldr	r0, [pc, #352]	; (800d3b0 <_vfiprintf_r+0x24c>)
 800d250:	f7ff f84e 	bl	800c2f0 <memchr>
 800d254:	9a04      	ldr	r2, [sp, #16]
 800d256:	b9d8      	cbnz	r0, 800d290 <_vfiprintf_r+0x12c>
 800d258:	06d1      	lsls	r1, r2, #27
 800d25a:	bf44      	itt	mi
 800d25c:	2320      	movmi	r3, #32
 800d25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d262:	0713      	lsls	r3, r2, #28
 800d264:	bf44      	itt	mi
 800d266:	232b      	movmi	r3, #43	; 0x2b
 800d268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d26c:	f89a 3000 	ldrb.w	r3, [sl]
 800d270:	2b2a      	cmp	r3, #42	; 0x2a
 800d272:	d015      	beq.n	800d2a0 <_vfiprintf_r+0x13c>
 800d274:	4654      	mov	r4, sl
 800d276:	2000      	movs	r0, #0
 800d278:	f04f 0c0a 	mov.w	ip, #10
 800d27c:	9a07      	ldr	r2, [sp, #28]
 800d27e:	4621      	mov	r1, r4
 800d280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d284:	3b30      	subs	r3, #48	; 0x30
 800d286:	2b09      	cmp	r3, #9
 800d288:	d94e      	bls.n	800d328 <_vfiprintf_r+0x1c4>
 800d28a:	b1b0      	cbz	r0, 800d2ba <_vfiprintf_r+0x156>
 800d28c:	9207      	str	r2, [sp, #28]
 800d28e:	e014      	b.n	800d2ba <_vfiprintf_r+0x156>
 800d290:	eba0 0308 	sub.w	r3, r0, r8
 800d294:	fa09 f303 	lsl.w	r3, r9, r3
 800d298:	4313      	orrs	r3, r2
 800d29a:	46a2      	mov	sl, r4
 800d29c:	9304      	str	r3, [sp, #16]
 800d29e:	e7d2      	b.n	800d246 <_vfiprintf_r+0xe2>
 800d2a0:	9b03      	ldr	r3, [sp, #12]
 800d2a2:	1d19      	adds	r1, r3, #4
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	9103      	str	r1, [sp, #12]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	bfbb      	ittet	lt
 800d2ac:	425b      	neglt	r3, r3
 800d2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d2b2:	9307      	strge	r3, [sp, #28]
 800d2b4:	9307      	strlt	r3, [sp, #28]
 800d2b6:	bfb8      	it	lt
 800d2b8:	9204      	strlt	r2, [sp, #16]
 800d2ba:	7823      	ldrb	r3, [r4, #0]
 800d2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d2be:	d10c      	bne.n	800d2da <_vfiprintf_r+0x176>
 800d2c0:	7863      	ldrb	r3, [r4, #1]
 800d2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d2c4:	d135      	bne.n	800d332 <_vfiprintf_r+0x1ce>
 800d2c6:	9b03      	ldr	r3, [sp, #12]
 800d2c8:	3402      	adds	r4, #2
 800d2ca:	1d1a      	adds	r2, r3, #4
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	9203      	str	r2, [sp, #12]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	bfb8      	it	lt
 800d2d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2d8:	9305      	str	r3, [sp, #20]
 800d2da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d3b4 <_vfiprintf_r+0x250>
 800d2de:	2203      	movs	r2, #3
 800d2e0:	4650      	mov	r0, sl
 800d2e2:	7821      	ldrb	r1, [r4, #0]
 800d2e4:	f7ff f804 	bl	800c2f0 <memchr>
 800d2e8:	b140      	cbz	r0, 800d2fc <_vfiprintf_r+0x198>
 800d2ea:	2340      	movs	r3, #64	; 0x40
 800d2ec:	eba0 000a 	sub.w	r0, r0, sl
 800d2f0:	fa03 f000 	lsl.w	r0, r3, r0
 800d2f4:	9b04      	ldr	r3, [sp, #16]
 800d2f6:	3401      	adds	r4, #1
 800d2f8:	4303      	orrs	r3, r0
 800d2fa:	9304      	str	r3, [sp, #16]
 800d2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d300:	2206      	movs	r2, #6
 800d302:	482d      	ldr	r0, [pc, #180]	; (800d3b8 <_vfiprintf_r+0x254>)
 800d304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d308:	f7fe fff2 	bl	800c2f0 <memchr>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d03f      	beq.n	800d390 <_vfiprintf_r+0x22c>
 800d310:	4b2a      	ldr	r3, [pc, #168]	; (800d3bc <_vfiprintf_r+0x258>)
 800d312:	bb1b      	cbnz	r3, 800d35c <_vfiprintf_r+0x1f8>
 800d314:	9b03      	ldr	r3, [sp, #12]
 800d316:	3307      	adds	r3, #7
 800d318:	f023 0307 	bic.w	r3, r3, #7
 800d31c:	3308      	adds	r3, #8
 800d31e:	9303      	str	r3, [sp, #12]
 800d320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d322:	443b      	add	r3, r7
 800d324:	9309      	str	r3, [sp, #36]	; 0x24
 800d326:	e767      	b.n	800d1f8 <_vfiprintf_r+0x94>
 800d328:	460c      	mov	r4, r1
 800d32a:	2001      	movs	r0, #1
 800d32c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d330:	e7a5      	b.n	800d27e <_vfiprintf_r+0x11a>
 800d332:	2300      	movs	r3, #0
 800d334:	f04f 0c0a 	mov.w	ip, #10
 800d338:	4619      	mov	r1, r3
 800d33a:	3401      	adds	r4, #1
 800d33c:	9305      	str	r3, [sp, #20]
 800d33e:	4620      	mov	r0, r4
 800d340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d344:	3a30      	subs	r2, #48	; 0x30
 800d346:	2a09      	cmp	r2, #9
 800d348:	d903      	bls.n	800d352 <_vfiprintf_r+0x1ee>
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d0c5      	beq.n	800d2da <_vfiprintf_r+0x176>
 800d34e:	9105      	str	r1, [sp, #20]
 800d350:	e7c3      	b.n	800d2da <_vfiprintf_r+0x176>
 800d352:	4604      	mov	r4, r0
 800d354:	2301      	movs	r3, #1
 800d356:	fb0c 2101 	mla	r1, ip, r1, r2
 800d35a:	e7f0      	b.n	800d33e <_vfiprintf_r+0x1da>
 800d35c:	ab03      	add	r3, sp, #12
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	462a      	mov	r2, r5
 800d362:	4630      	mov	r0, r6
 800d364:	4b16      	ldr	r3, [pc, #88]	; (800d3c0 <_vfiprintf_r+0x25c>)
 800d366:	a904      	add	r1, sp, #16
 800d368:	f7fb fd2c 	bl	8008dc4 <_printf_float>
 800d36c:	4607      	mov	r7, r0
 800d36e:	1c78      	adds	r0, r7, #1
 800d370:	d1d6      	bne.n	800d320 <_vfiprintf_r+0x1bc>
 800d372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d374:	07d9      	lsls	r1, r3, #31
 800d376:	d405      	bmi.n	800d384 <_vfiprintf_r+0x220>
 800d378:	89ab      	ldrh	r3, [r5, #12]
 800d37a:	059a      	lsls	r2, r3, #22
 800d37c:	d402      	bmi.n	800d384 <_vfiprintf_r+0x220>
 800d37e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d380:	f7fe ff36 	bl	800c1f0 <__retarget_lock_release_recursive>
 800d384:	89ab      	ldrh	r3, [r5, #12]
 800d386:	065b      	lsls	r3, r3, #25
 800d388:	f53f af12 	bmi.w	800d1b0 <_vfiprintf_r+0x4c>
 800d38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d38e:	e711      	b.n	800d1b4 <_vfiprintf_r+0x50>
 800d390:	ab03      	add	r3, sp, #12
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	462a      	mov	r2, r5
 800d396:	4630      	mov	r0, r6
 800d398:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <_vfiprintf_r+0x25c>)
 800d39a:	a904      	add	r1, sp, #16
 800d39c:	f7fb ffae 	bl	80092fc <_printf_i>
 800d3a0:	e7e4      	b.n	800d36c <_vfiprintf_r+0x208>
 800d3a2:	bf00      	nop
 800d3a4:	0800dba4 	.word	0x0800dba4
 800d3a8:	0800dbc4 	.word	0x0800dbc4
 800d3ac:	0800db84 	.word	0x0800db84
 800d3b0:	0800ddbc 	.word	0x0800ddbc
 800d3b4:	0800ddc2 	.word	0x0800ddc2
 800d3b8:	0800ddc6 	.word	0x0800ddc6
 800d3bc:	08008dc5 	.word	0x08008dc5
 800d3c0:	0800d13f 	.word	0x0800d13f

0800d3c4 <_putc_r>:
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	460d      	mov	r5, r1
 800d3c8:	4614      	mov	r4, r2
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	b118      	cbz	r0, 800d3d6 <_putc_r+0x12>
 800d3ce:	6983      	ldr	r3, [r0, #24]
 800d3d0:	b90b      	cbnz	r3, 800d3d6 <_putc_r+0x12>
 800d3d2:	f7fe faf1 	bl	800b9b8 <__sinit>
 800d3d6:	4b1c      	ldr	r3, [pc, #112]	; (800d448 <_putc_r+0x84>)
 800d3d8:	429c      	cmp	r4, r3
 800d3da:	d124      	bne.n	800d426 <_putc_r+0x62>
 800d3dc:	6874      	ldr	r4, [r6, #4]
 800d3de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3e0:	07d8      	lsls	r0, r3, #31
 800d3e2:	d405      	bmi.n	800d3f0 <_putc_r+0x2c>
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	0599      	lsls	r1, r3, #22
 800d3e8:	d402      	bmi.n	800d3f0 <_putc_r+0x2c>
 800d3ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3ec:	f7fe feff 	bl	800c1ee <__retarget_lock_acquire_recursive>
 800d3f0:	68a3      	ldr	r3, [r4, #8]
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	60a3      	str	r3, [r4, #8]
 800d3f8:	da05      	bge.n	800d406 <_putc_r+0x42>
 800d3fa:	69a2      	ldr	r2, [r4, #24]
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	db1c      	blt.n	800d43a <_putc_r+0x76>
 800d400:	b2eb      	uxtb	r3, r5
 800d402:	2b0a      	cmp	r3, #10
 800d404:	d019      	beq.n	800d43a <_putc_r+0x76>
 800d406:	6823      	ldr	r3, [r4, #0]
 800d408:	1c5a      	adds	r2, r3, #1
 800d40a:	6022      	str	r2, [r4, #0]
 800d40c:	701d      	strb	r5, [r3, #0]
 800d40e:	b2ed      	uxtb	r5, r5
 800d410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d412:	07da      	lsls	r2, r3, #31
 800d414:	d405      	bmi.n	800d422 <_putc_r+0x5e>
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	059b      	lsls	r3, r3, #22
 800d41a:	d402      	bmi.n	800d422 <_putc_r+0x5e>
 800d41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d41e:	f7fe fee7 	bl	800c1f0 <__retarget_lock_release_recursive>
 800d422:	4628      	mov	r0, r5
 800d424:	bd70      	pop	{r4, r5, r6, pc}
 800d426:	4b09      	ldr	r3, [pc, #36]	; (800d44c <_putc_r+0x88>)
 800d428:	429c      	cmp	r4, r3
 800d42a:	d101      	bne.n	800d430 <_putc_r+0x6c>
 800d42c:	68b4      	ldr	r4, [r6, #8]
 800d42e:	e7d6      	b.n	800d3de <_putc_r+0x1a>
 800d430:	4b07      	ldr	r3, [pc, #28]	; (800d450 <_putc_r+0x8c>)
 800d432:	429c      	cmp	r4, r3
 800d434:	bf08      	it	eq
 800d436:	68f4      	ldreq	r4, [r6, #12]
 800d438:	e7d1      	b.n	800d3de <_putc_r+0x1a>
 800d43a:	4629      	mov	r1, r5
 800d43c:	4622      	mov	r2, r4
 800d43e:	4630      	mov	r0, r6
 800d440:	f7fd fa4c 	bl	800a8dc <__swbuf_r>
 800d444:	4605      	mov	r5, r0
 800d446:	e7e3      	b.n	800d410 <_putc_r+0x4c>
 800d448:	0800dba4 	.word	0x0800dba4
 800d44c:	0800dbc4 	.word	0x0800dbc4
 800d450:	0800db84 	.word	0x0800db84

0800d454 <nan>:
 800d454:	2000      	movs	r0, #0
 800d456:	4901      	ldr	r1, [pc, #4]	; (800d45c <nan+0x8>)
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	7ff80000 	.word	0x7ff80000

0800d460 <_sbrk_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	2300      	movs	r3, #0
 800d464:	4d05      	ldr	r5, [pc, #20]	; (800d47c <_sbrk_r+0x1c>)
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	602b      	str	r3, [r5, #0]
 800d46c:	f7f6 f918 	bl	80036a0 <_sbrk>
 800d470:	1c43      	adds	r3, r0, #1
 800d472:	d102      	bne.n	800d47a <_sbrk_r+0x1a>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	b103      	cbz	r3, 800d47a <_sbrk_r+0x1a>
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
 800d47c:	20000c7c 	.word	0x20000c7c

0800d480 <__sread>:
 800d480:	b510      	push	{r4, lr}
 800d482:	460c      	mov	r4, r1
 800d484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d488:	f000 f912 	bl	800d6b0 <_read_r>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	bfab      	itete	ge
 800d490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d492:	89a3      	ldrhlt	r3, [r4, #12]
 800d494:	181b      	addge	r3, r3, r0
 800d496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d49a:	bfac      	ite	ge
 800d49c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d49e:	81a3      	strhlt	r3, [r4, #12]
 800d4a0:	bd10      	pop	{r4, pc}

0800d4a2 <__swrite>:
 800d4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a6:	461f      	mov	r7, r3
 800d4a8:	898b      	ldrh	r3, [r1, #12]
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	05db      	lsls	r3, r3, #23
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	4616      	mov	r6, r2
 800d4b2:	d505      	bpl.n	800d4c0 <__swrite+0x1e>
 800d4b4:	2302      	movs	r3, #2
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4bc:	f000 f890 	bl	800d5e0 <_lseek_r>
 800d4c0:	89a3      	ldrh	r3, [r4, #12]
 800d4c2:	4632      	mov	r2, r6
 800d4c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4c8:	81a3      	strh	r3, [r4, #12]
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	463b      	mov	r3, r7
 800d4ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d6:	f000 b837 	b.w	800d548 <_write_r>

0800d4da <__sseek>:
 800d4da:	b510      	push	{r4, lr}
 800d4dc:	460c      	mov	r4, r1
 800d4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e2:	f000 f87d 	bl	800d5e0 <_lseek_r>
 800d4e6:	1c43      	adds	r3, r0, #1
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	bf15      	itete	ne
 800d4ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4f6:	81a3      	strheq	r3, [r4, #12]
 800d4f8:	bf18      	it	ne
 800d4fa:	81a3      	strhne	r3, [r4, #12]
 800d4fc:	bd10      	pop	{r4, pc}

0800d4fe <__sclose>:
 800d4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d502:	f000 b83b 	b.w	800d57c <_close_r>

0800d506 <strncmp>:
 800d506:	4603      	mov	r3, r0
 800d508:	b510      	push	{r4, lr}
 800d50a:	b172      	cbz	r2, 800d52a <strncmp+0x24>
 800d50c:	3901      	subs	r1, #1
 800d50e:	1884      	adds	r4, r0, r2
 800d510:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d514:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d518:	4290      	cmp	r0, r2
 800d51a:	d101      	bne.n	800d520 <strncmp+0x1a>
 800d51c:	42a3      	cmp	r3, r4
 800d51e:	d101      	bne.n	800d524 <strncmp+0x1e>
 800d520:	1a80      	subs	r0, r0, r2
 800d522:	bd10      	pop	{r4, pc}
 800d524:	2800      	cmp	r0, #0
 800d526:	d1f3      	bne.n	800d510 <strncmp+0xa>
 800d528:	e7fa      	b.n	800d520 <strncmp+0x1a>
 800d52a:	4610      	mov	r0, r2
 800d52c:	e7f9      	b.n	800d522 <strncmp+0x1c>

0800d52e <__ascii_wctomb>:
 800d52e:	4603      	mov	r3, r0
 800d530:	4608      	mov	r0, r1
 800d532:	b141      	cbz	r1, 800d546 <__ascii_wctomb+0x18>
 800d534:	2aff      	cmp	r2, #255	; 0xff
 800d536:	d904      	bls.n	800d542 <__ascii_wctomb+0x14>
 800d538:	228a      	movs	r2, #138	; 0x8a
 800d53a:	f04f 30ff 	mov.w	r0, #4294967295
 800d53e:	601a      	str	r2, [r3, #0]
 800d540:	4770      	bx	lr
 800d542:	2001      	movs	r0, #1
 800d544:	700a      	strb	r2, [r1, #0]
 800d546:	4770      	bx	lr

0800d548 <_write_r>:
 800d548:	b538      	push	{r3, r4, r5, lr}
 800d54a:	4604      	mov	r4, r0
 800d54c:	4608      	mov	r0, r1
 800d54e:	4611      	mov	r1, r2
 800d550:	2200      	movs	r2, #0
 800d552:	4d05      	ldr	r5, [pc, #20]	; (800d568 <_write_r+0x20>)
 800d554:	602a      	str	r2, [r5, #0]
 800d556:	461a      	mov	r2, r3
 800d558:	f7f6 f856 	bl	8003608 <_write>
 800d55c:	1c43      	adds	r3, r0, #1
 800d55e:	d102      	bne.n	800d566 <_write_r+0x1e>
 800d560:	682b      	ldr	r3, [r5, #0]
 800d562:	b103      	cbz	r3, 800d566 <_write_r+0x1e>
 800d564:	6023      	str	r3, [r4, #0]
 800d566:	bd38      	pop	{r3, r4, r5, pc}
 800d568:	20000c7c 	.word	0x20000c7c

0800d56c <abort>:
 800d56c:	2006      	movs	r0, #6
 800d56e:	b508      	push	{r3, lr}
 800d570:	f000 f8d8 	bl	800d724 <raise>
 800d574:	2001      	movs	r0, #1
 800d576:	f7f6 f820 	bl	80035ba <_exit>
	...

0800d57c <_close_r>:
 800d57c:	b538      	push	{r3, r4, r5, lr}
 800d57e:	2300      	movs	r3, #0
 800d580:	4d05      	ldr	r5, [pc, #20]	; (800d598 <_close_r+0x1c>)
 800d582:	4604      	mov	r4, r0
 800d584:	4608      	mov	r0, r1
 800d586:	602b      	str	r3, [r5, #0]
 800d588:	f7f6 f85a 	bl	8003640 <_close>
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d102      	bne.n	800d596 <_close_r+0x1a>
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	b103      	cbz	r3, 800d596 <_close_r+0x1a>
 800d594:	6023      	str	r3, [r4, #0]
 800d596:	bd38      	pop	{r3, r4, r5, pc}
 800d598:	20000c7c 	.word	0x20000c7c

0800d59c <_fstat_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	2300      	movs	r3, #0
 800d5a0:	4d06      	ldr	r5, [pc, #24]	; (800d5bc <_fstat_r+0x20>)
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	4611      	mov	r1, r2
 800d5a8:	602b      	str	r3, [r5, #0]
 800d5aa:	f7f6 f854 	bl	8003656 <_fstat>
 800d5ae:	1c43      	adds	r3, r0, #1
 800d5b0:	d102      	bne.n	800d5b8 <_fstat_r+0x1c>
 800d5b2:	682b      	ldr	r3, [r5, #0]
 800d5b4:	b103      	cbz	r3, 800d5b8 <_fstat_r+0x1c>
 800d5b6:	6023      	str	r3, [r4, #0]
 800d5b8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20000c7c 	.word	0x20000c7c

0800d5c0 <_isatty_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4d05      	ldr	r5, [pc, #20]	; (800d5dc <_isatty_r+0x1c>)
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	602b      	str	r3, [r5, #0]
 800d5cc:	f7f6 f852 	bl	8003674 <_isatty>
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	d102      	bne.n	800d5da <_isatty_r+0x1a>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	b103      	cbz	r3, 800d5da <_isatty_r+0x1a>
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	20000c7c 	.word	0x20000c7c

0800d5e0 <_lseek_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	4608      	mov	r0, r1
 800d5e6:	4611      	mov	r1, r2
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	4d05      	ldr	r5, [pc, #20]	; (800d600 <_lseek_r+0x20>)
 800d5ec:	602a      	str	r2, [r5, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	f7f6 f84a 	bl	8003688 <_lseek>
 800d5f4:	1c43      	adds	r3, r0, #1
 800d5f6:	d102      	bne.n	800d5fe <_lseek_r+0x1e>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b103      	cbz	r3, 800d5fe <_lseek_r+0x1e>
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	20000c7c 	.word	0x20000c7c

0800d604 <memmove>:
 800d604:	4288      	cmp	r0, r1
 800d606:	b510      	push	{r4, lr}
 800d608:	eb01 0402 	add.w	r4, r1, r2
 800d60c:	d902      	bls.n	800d614 <memmove+0x10>
 800d60e:	4284      	cmp	r4, r0
 800d610:	4623      	mov	r3, r4
 800d612:	d807      	bhi.n	800d624 <memmove+0x20>
 800d614:	1e43      	subs	r3, r0, #1
 800d616:	42a1      	cmp	r1, r4
 800d618:	d008      	beq.n	800d62c <memmove+0x28>
 800d61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d622:	e7f8      	b.n	800d616 <memmove+0x12>
 800d624:	4601      	mov	r1, r0
 800d626:	4402      	add	r2, r0
 800d628:	428a      	cmp	r2, r1
 800d62a:	d100      	bne.n	800d62e <memmove+0x2a>
 800d62c:	bd10      	pop	{r4, pc}
 800d62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d636:	e7f7      	b.n	800d628 <memmove+0x24>

0800d638 <__malloc_lock>:
 800d638:	4801      	ldr	r0, [pc, #4]	; (800d640 <__malloc_lock+0x8>)
 800d63a:	f7fe bdd8 	b.w	800c1ee <__retarget_lock_acquire_recursive>
 800d63e:	bf00      	nop
 800d640:	20000c70 	.word	0x20000c70

0800d644 <__malloc_unlock>:
 800d644:	4801      	ldr	r0, [pc, #4]	; (800d64c <__malloc_unlock+0x8>)
 800d646:	f7fe bdd3 	b.w	800c1f0 <__retarget_lock_release_recursive>
 800d64a:	bf00      	nop
 800d64c:	20000c70 	.word	0x20000c70

0800d650 <_realloc_r>:
 800d650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d654:	4680      	mov	r8, r0
 800d656:	4614      	mov	r4, r2
 800d658:	460e      	mov	r6, r1
 800d65a:	b921      	cbnz	r1, 800d666 <_realloc_r+0x16>
 800d65c:	4611      	mov	r1, r2
 800d65e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d662:	f7ff bb87 	b.w	800cd74 <_malloc_r>
 800d666:	b92a      	cbnz	r2, 800d674 <_realloc_r+0x24>
 800d668:	f7ff fb1c 	bl	800cca4 <_free_r>
 800d66c:	4625      	mov	r5, r4
 800d66e:	4628      	mov	r0, r5
 800d670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d674:	f000 f872 	bl	800d75c <_malloc_usable_size_r>
 800d678:	4284      	cmp	r4, r0
 800d67a:	4607      	mov	r7, r0
 800d67c:	d802      	bhi.n	800d684 <_realloc_r+0x34>
 800d67e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d682:	d812      	bhi.n	800d6aa <_realloc_r+0x5a>
 800d684:	4621      	mov	r1, r4
 800d686:	4640      	mov	r0, r8
 800d688:	f7ff fb74 	bl	800cd74 <_malloc_r>
 800d68c:	4605      	mov	r5, r0
 800d68e:	2800      	cmp	r0, #0
 800d690:	d0ed      	beq.n	800d66e <_realloc_r+0x1e>
 800d692:	42bc      	cmp	r4, r7
 800d694:	4622      	mov	r2, r4
 800d696:	4631      	mov	r1, r6
 800d698:	bf28      	it	cs
 800d69a:	463a      	movcs	r2, r7
 800d69c:	f7fb fade 	bl	8008c5c <memcpy>
 800d6a0:	4631      	mov	r1, r6
 800d6a2:	4640      	mov	r0, r8
 800d6a4:	f7ff fafe 	bl	800cca4 <_free_r>
 800d6a8:	e7e1      	b.n	800d66e <_realloc_r+0x1e>
 800d6aa:	4635      	mov	r5, r6
 800d6ac:	e7df      	b.n	800d66e <_realloc_r+0x1e>
	...

0800d6b0 <_read_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	4608      	mov	r0, r1
 800d6b6:	4611      	mov	r1, r2
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	4d05      	ldr	r5, [pc, #20]	; (800d6d0 <_read_r+0x20>)
 800d6bc:	602a      	str	r2, [r5, #0]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	f7f5 ff85 	bl	80035ce <_read>
 800d6c4:	1c43      	adds	r3, r0, #1
 800d6c6:	d102      	bne.n	800d6ce <_read_r+0x1e>
 800d6c8:	682b      	ldr	r3, [r5, #0]
 800d6ca:	b103      	cbz	r3, 800d6ce <_read_r+0x1e>
 800d6cc:	6023      	str	r3, [r4, #0]
 800d6ce:	bd38      	pop	{r3, r4, r5, pc}
 800d6d0:	20000c7c 	.word	0x20000c7c

0800d6d4 <_raise_r>:
 800d6d4:	291f      	cmp	r1, #31
 800d6d6:	b538      	push	{r3, r4, r5, lr}
 800d6d8:	4604      	mov	r4, r0
 800d6da:	460d      	mov	r5, r1
 800d6dc:	d904      	bls.n	800d6e8 <_raise_r+0x14>
 800d6de:	2316      	movs	r3, #22
 800d6e0:	6003      	str	r3, [r0, #0]
 800d6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e6:	bd38      	pop	{r3, r4, r5, pc}
 800d6e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6ea:	b112      	cbz	r2, 800d6f2 <_raise_r+0x1e>
 800d6ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6f0:	b94b      	cbnz	r3, 800d706 <_raise_r+0x32>
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	f000 f830 	bl	800d758 <_getpid_r>
 800d6f8:	462a      	mov	r2, r5
 800d6fa:	4601      	mov	r1, r0
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d702:	f000 b817 	b.w	800d734 <_kill_r>
 800d706:	2b01      	cmp	r3, #1
 800d708:	d00a      	beq.n	800d720 <_raise_r+0x4c>
 800d70a:	1c59      	adds	r1, r3, #1
 800d70c:	d103      	bne.n	800d716 <_raise_r+0x42>
 800d70e:	2316      	movs	r3, #22
 800d710:	6003      	str	r3, [r0, #0]
 800d712:	2001      	movs	r0, #1
 800d714:	e7e7      	b.n	800d6e6 <_raise_r+0x12>
 800d716:	2400      	movs	r4, #0
 800d718:	4628      	mov	r0, r5
 800d71a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d71e:	4798      	blx	r3
 800d720:	2000      	movs	r0, #0
 800d722:	e7e0      	b.n	800d6e6 <_raise_r+0x12>

0800d724 <raise>:
 800d724:	4b02      	ldr	r3, [pc, #8]	; (800d730 <raise+0xc>)
 800d726:	4601      	mov	r1, r0
 800d728:	6818      	ldr	r0, [r3, #0]
 800d72a:	f7ff bfd3 	b.w	800d6d4 <_raise_r>
 800d72e:	bf00      	nop
 800d730:	20000610 	.word	0x20000610

0800d734 <_kill_r>:
 800d734:	b538      	push	{r3, r4, r5, lr}
 800d736:	2300      	movs	r3, #0
 800d738:	4d06      	ldr	r5, [pc, #24]	; (800d754 <_kill_r+0x20>)
 800d73a:	4604      	mov	r4, r0
 800d73c:	4608      	mov	r0, r1
 800d73e:	4611      	mov	r1, r2
 800d740:	602b      	str	r3, [r5, #0]
 800d742:	f7f5 ff2a 	bl	800359a <_kill>
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	d102      	bne.n	800d750 <_kill_r+0x1c>
 800d74a:	682b      	ldr	r3, [r5, #0]
 800d74c:	b103      	cbz	r3, 800d750 <_kill_r+0x1c>
 800d74e:	6023      	str	r3, [r4, #0]
 800d750:	bd38      	pop	{r3, r4, r5, pc}
 800d752:	bf00      	nop
 800d754:	20000c7c 	.word	0x20000c7c

0800d758 <_getpid_r>:
 800d758:	f7f5 bf18 	b.w	800358c <_getpid>

0800d75c <_malloc_usable_size_r>:
 800d75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d760:	1f18      	subs	r0, r3, #4
 800d762:	2b00      	cmp	r3, #0
 800d764:	bfbc      	itt	lt
 800d766:	580b      	ldrlt	r3, [r1, r0]
 800d768:	18c0      	addlt	r0, r0, r3
 800d76a:	4770      	bx	lr

0800d76c <_init>:
 800d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76e:	bf00      	nop
 800d770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d772:	bc08      	pop	{r3}
 800d774:	469e      	mov	lr, r3
 800d776:	4770      	bx	lr

0800d778 <_fini>:
 800d778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d77a:	bf00      	nop
 800d77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d77e:	bc08      	pop	{r3}
 800d780:	469e      	mov	lr, r3
 800d782:	4770      	bx	lr
