
RoboBeer_OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ffc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b0  0800a3b0  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b8  0800a3b8  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043f0  2000015c  0800a51c  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000454c  0800a51c  0002454c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2a2  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004498  00000000  00000000  0003f42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  000438c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  000453e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002328c  00000000  00000000  00046d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020372  00000000  00000000  00069fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d51e0  00000000  00000000  0008a32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f50e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000799c  00000000  00000000  0015f560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000015c 	.word	0x2000015c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a1c4 	.word	0x0800a1c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000160 	.word	0x20000160
 800021c:	0800a1c4 	.word	0x0800a1c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_FREERTOS_Init+0x2c>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	682b      	ldr	r3, [r5, #0]
 80005d6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f006 fdb0 	bl	8007142 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <MX_FREERTOS_Init+0x30>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bdb0      	pop	{r4, r5, r7, pc}
 80005f0:	0800a1e8 	.word	0x0800a1e8
 80005f4:	20000178 	.word	0x20000178

080005f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f006 fdc5 	bl	8007190 <osDelay>
 8000606:	e7fb      	b.n	8000600 <StartDefaultTask+0x8>

08000608 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 fd09 	bl	8001028 <initSensor>
 8000616:	4603      	mov	r3, r0

} /* tofInit() */
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(uint8_t ucAddr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af02      	add	r7, sp, #8
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp[2];

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 800062a:	1dfa      	adds	r2, r7, #7
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	2152      	movs	r1, #82	; 0x52
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <readReg16+0x48>)
 8000638:	f002 faf2 	bl	8002c20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, ucTemp, 2, 1000);
 800063c:	f107 020c 	add.w	r2, r7, #12
 8000640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2302      	movs	r3, #2
 8000648:	2153      	movs	r1, #83	; 0x53
 800064a:	4807      	ldr	r0, [pc, #28]	; (8000668 <readReg16+0x48>)
 800064c:	f002 fbdc 	bl	8002e08 <HAL_I2C_Master_Receive>

	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 8000650:	7b3b      	ldrb	r3, [r7, #12]
 8000652:	b29b      	uxth	r3, r3
 8000654:	021b      	lsls	r3, r3, #8
 8000656:	b29a      	uxth	r2, r3
 8000658:	7b7b      	ldrb	r3, [r7, #13]
 800065a:	b29b      	uxth	r3, r3
 800065c:	4413      	add	r3, r2
 800065e:	b29b      	uxth	r3, r3
} /* readReg16() */
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000184 	.word	0x20000184

0800066c <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(uint8_t ucAddr)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp;

	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8000676:	1dfa      	adds	r2, r7, #7
 8000678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	2152      	movs	r1, #82	; 0x52
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <readReg+0x3c>)
 8000684:	f002 facc 	bl	8002c20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8000688:	f107 020f 	add.w	r2, r7, #15
 800068c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2153      	movs	r1, #83	; 0x53
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <readReg+0x3c>)
 8000698:	f002 fbb6 	bl	8002e08 <HAL_I2C_Master_Receive>

	return ucTemp;
 800069c:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000184 	.word	0x20000184

080006ac <readMulti>:

static void readMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 80006bc:	1dfa      	adds	r2, r7, #7
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	2152      	movs	r1, #82	; 0x52
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <readMulti+0x3c>)
 80006ca:	f002 faa9 	bl	8002c20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, pBuf, iCount, 1000);
 80006ce:	88bb      	ldrh	r3, [r7, #4]
 80006d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d4:	9200      	str	r2, [sp, #0]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	2153      	movs	r1, #83	; 0x53
 80006da:	4803      	ldr	r0, [pc, #12]	; (80006e8 <readMulti+0x3c>)
 80006dc:	f002 fb94 	bl	8002e08 <HAL_I2C_Master_Receive>
} /* readMulti() */
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000184 	.word	0x20000184

080006ec <writeMulti>:

static void writeMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 80006ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006f0:	b087      	sub	sp, #28
 80006f2:	af02      	add	r7, sp, #8
 80006f4:	4603      	mov	r3, r0
 80006f6:	6039      	str	r1, [r7, #0]
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	4613      	mov	r3, r2
 80006fc:	80bb      	strh	r3, [r7, #4]
 80006fe:	466b      	mov	r3, sp
 8000700:	461e      	mov	r6, r3
	uint8_t ucTemp[iCount+1];
 8000702:	88bb      	ldrh	r3, [r7, #4]
 8000704:	1c59      	adds	r1, r3, #1
 8000706:	1e4b      	subs	r3, r1, #1
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	460a      	mov	r2, r1
 800070c:	2300      	movs	r3, #0
 800070e:	4690      	mov	r8, r2
 8000710:	4699      	mov	r9, r3
 8000712:	f04f 0200 	mov.w	r2, #0
 8000716:	f04f 0300 	mov.w	r3, #0
 800071a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800071e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000726:	460a      	mov	r2, r1
 8000728:	2300      	movs	r3, #0
 800072a:	4614      	mov	r4, r2
 800072c:	461d      	mov	r5, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	00eb      	lsls	r3, r5, #3
 8000738:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800073c:	00e2      	lsls	r2, r4, #3
 800073e:	460b      	mov	r3, r1
 8000740:	3307      	adds	r3, #7
 8000742:	08db      	lsrs	r3, r3, #3
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	ebad 0d03 	sub.w	sp, sp, r3
 800074a:	ab02      	add	r3, sp, #8
 800074c:	3300      	adds	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]

	ucTemp[0] = ucAddr;
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	701a      	strb	r2, [r3, #0]
	memcpy(&ucTemp[1], pBuf, iCount);
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	3301      	adds	r3, #1
 800075a:	88ba      	ldrh	r2, [r7, #4]
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f008 fd16 	bl	8009190 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, iCount+1, 1000);
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	3301      	adds	r3, #1
 8000768:	b29b      	uxth	r3, r3
 800076a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800076e:	9200      	str	r2, [sp, #0]
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	2152      	movs	r1, #82	; 0x52
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <writeMulti+0x9c>)
 8000776:	f002 fa53 	bl	8002c20 <HAL_I2C_Master_Transmit>
 800077a:	46b5      	mov	sp, r6
} /* writeMulti() */
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000786:	bf00      	nop
 8000788:	20000184 	.word	0x20000184

0800078c <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(uint8_t ucAddr, uint16_t usValue)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af02      	add	r7, sp, #8
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp[4];

	ucTemp[0] = ucAddr;
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (uint8_t)(usValue >> 8); // MSB first
 80007a0:	88bb      	ldrh	r3, [r7, #4]
 80007a2:	0a1b      	lsrs	r3, r3, #8
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (uint8_t)usValue;
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 3, 1000);
 80007b0:	f107 020c 	add.w	r2, r7, #12
 80007b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2303      	movs	r3, #3
 80007bc:	2152      	movs	r1, #82	; 0x52
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <writeReg16+0x40>)
 80007c0:	f002 fa2e 	bl	8002c20 <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000184 	.word	0x20000184

080007d0 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(uint8_t ucAddr, uint8_t ucValue)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	4603      	mov	r3, r0
 80007d8:	460a      	mov	r2, r1
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	4613      	mov	r3, r2
 80007de:	71bb      	strb	r3, [r7, #6]
	uint8_t ucTemp[2];

	ucTemp[0] = ucAddr;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 2, 1000);
 80007e8:	f107 020c 	add.w	r2, r7, #12
 80007ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2302      	movs	r3, #2
 80007f4:	2152      	movs	r1, #82	; 0x52
 80007f6:	4803      	ldr	r0, [pc, #12]	; (8000804 <writeReg+0x34>)
 80007f8:	f002 fa12 	bl	8002c20 <HAL_I2C_Master_Transmit>
} /* writeReg() */
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000184 	.word	0x20000184

08000808 <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(uint8_t *ucList)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af02      	add	r7, sp, #8
 800080e:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = *ucList++; // count is the first element in the list
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	73fb      	strb	r3, [r7, #15]


	while (ucCount)
 800081a:	e00e      	b.n	800083a <writeRegList+0x32>
	{
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucList, 2, 1000);
 800081c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2302      	movs	r3, #2
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	2152      	movs	r1, #82	; 0x52
 8000828:	4808      	ldr	r0, [pc, #32]	; (800084c <writeRegList+0x44>)
 800082a:	f002 f9f9 	bl	8002c20 <HAL_I2C_Master_Transmit>
		ucList += 2;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3302      	adds	r3, #2
 8000832:	607b      	str	r3, [r7, #4]
		ucCount--;
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	3b01      	subs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1ed      	bne.n	800081c <writeRegList+0x14>
	}
} /* writeRegList() */
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000184 	.word	0x20000184

08000850 <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(uint8_t *pCount, uint8_t *pTypeIsAperture)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
int iTimeout;
uint8_t ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 800085a:	482d      	ldr	r0, [pc, #180]	; (8000910 <getSpadInfo+0xc0>)
 800085c:	f7ff ffd4 	bl	8000808 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 8000860:	2083      	movs	r0, #131	; 0x83
 8000862:	f7ff ff03 	bl	800066c <readReg>
 8000866:	4603      	mov	r3, r0
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4619      	mov	r1, r3
 8000870:	2083      	movs	r0, #131	; 0x83
 8000872:	f7ff ffad 	bl	80007d0 <writeReg>
  writeRegList(ucSPAD1);
 8000876:	4827      	ldr	r0, [pc, #156]	; (8000914 <getSpadInfo+0xc4>)
 8000878:	f7ff ffc6 	bl	8000808 <writeRegList>
  iTimeout = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 8000880:	e00b      	b.n	800089a <getSpadInfo+0x4a>
  {
    if (readReg(0x83) != 0x00) break;
 8000882:	2083      	movs	r0, #131	; 0x83
 8000884:	f7ff fef2 	bl	800066c <readReg>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d109      	bne.n	80008a2 <getSpadInfo+0x52>
    iTimeout++;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3301      	adds	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 8000894:	2005      	movs	r0, #5
 8000896:	f001 fc97 	bl	80021c8 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2b31      	cmp	r3, #49	; 0x31
 800089e:	ddf0      	ble.n	8000882 <getSpadInfo+0x32>
 80008a0:	e000      	b.n	80008a4 <getSpadInfo+0x54>
    if (readReg(0x83) != 0x00) break;
 80008a2:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b32      	cmp	r3, #50	; 0x32
 80008a8:	d101      	bne.n	80008ae <getSpadInfo+0x5e>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e02b      	b.n	8000906 <getSpadInfo+0xb6>
  }
  writeReg(0x83,0x01);
 80008ae:	2101      	movs	r1, #1
 80008b0:	2083      	movs	r0, #131	; 0x83
 80008b2:	f7ff ff8d 	bl	80007d0 <writeReg>
  ucTemp = readReg(0x92);
 80008b6:	2092      	movs	r0, #146	; 0x92
 80008b8:	f7ff fed8 	bl	800066c <readReg>
 80008bc:	4603      	mov	r3, r0
 80008be:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 80008cc:	7afb      	ldrb	r3, [r7, #11]
 80008ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 80008d8:	2100      	movs	r1, #0
 80008da:	2081      	movs	r0, #129	; 0x81
 80008dc:	f7ff ff78 	bl	80007d0 <writeReg>
  writeReg(0xff,0x06);
 80008e0:	2106      	movs	r1, #6
 80008e2:	20ff      	movs	r0, #255	; 0xff
 80008e4:	f7ff ff74 	bl	80007d0 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 80008e8:	2083      	movs	r0, #131	; 0x83
 80008ea:	f7ff febf 	bl	800066c <readReg>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f023 0304 	bic.w	r3, r3, #4
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	2083      	movs	r0, #131	; 0x83
 80008fa:	f7ff ff69 	bl	80007d0 <writeReg>
  writeRegList(ucSPAD2);
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <getSpadInfo+0xc8>)
 8000900:	f7ff ff82 	bl	8000808 <writeRegList>

  return 1;
 8000904:	2301      	movs	r3, #1
} /* getSpadInfo() */
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000014 	.word	0x20000014
 8000914:	20000020 	.word	0x20000020
 8000918:	2000002c 	.word	0x2000002c

0800091c <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800092a:	88fa      	ldrh	r2, [r7, #6]
 800092c:	0a12      	lsrs	r2, r2, #8
 800092e:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8000930:	4093      	lsls	r3, r2
 8000932:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000934:	3301      	adds	r3, #1
 8000936:	b29b      	uxth	r3, r3
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	460a      	mov	r2, r1
 800094e:	80fb      	strh	r3, [r7, #6]
 8000950:	4613      	mov	r3, r2
 8000952:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8000954:	797b      	ldrb	r3, [r7, #5]
 8000956:	4a0d      	ldr	r2, [pc, #52]	; (800098c <timeoutMclksToMicroseconds+0x48>)
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <timeoutMclksToMicroseconds+0x4c>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	099b      	lsrs	r3, r3, #6
 8000968:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	fb03 f202 	mul.w	r2, r3, r2
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	4a05      	ldr	r2, [pc, #20]	; (8000990 <timeoutMclksToMicroseconds+0x4c>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	099b      	lsrs	r3, r3, #6
}
 8000980:	4618      	mov	r0, r3
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	003a2f00 	.word	0x003a2f00
 8000990:	10624dd3 	.word	0x10624dd3

08000994 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <timeoutMicrosecondsToMclks+0x44>)
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80009ac:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <timeoutMicrosecondsToMclks+0x48>)
 80009ae:	fba2 2303 	umull	r2, r3, r2, r3
 80009b2:	099b      	lsrs	r3, r3, #6
 80009b4:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009bc:	fb03 f202 	mul.w	r2, r3, r2
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	085b      	lsrs	r3, r3, #1
 80009c4:	441a      	add	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	003a2f00 	.word	0x003a2f00
 80009dc:	10624dd3 	.word	0x10624dd3

080009e0 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d018      	beq.n	8000a2a <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 80009fe:	e005      	b.n	8000a0c <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	085b      	lsrs	r3, r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8000a06:	897b      	ldrh	r3, [r7, #10]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1f4      	bne.n	8000a00 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8000a16:	897b      	ldrh	r3, [r7, #10]
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	e000      	b.n	8000a2c <encodeTimeout+0x4c>
  }
  else { return 0; }
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8000a44:	2050      	movs	r0, #80	; 0x50
 8000a46:	f7ff fe11 	bl	800066c <readReg>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8000a5a:	2046      	movs	r0, #70	; 0x46
 8000a5c:	f7ff fe06 	bl	800066c <readReg>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	3301      	adds	r3, #1
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4619      	mov	r1, r3
 8000a78:	4610      	mov	r0, r2
 8000a7a:	f7ff ff63 	bl	8000944 <timeoutMclksToMicroseconds>
 8000a7e:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8000a84:	2051      	movs	r0, #81	; 0x51
 8000a86:	f7ff fdcb 	bl	8000620 <readReg16>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff45 	bl	800091c <decodeTimeout>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	f7ff ff4c 	bl	8000944 <timeoutMclksToMicroseconds>
 8000aac:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8000ab2:	2070      	movs	r0, #112	; 0x70
 8000ab4:	f7ff fdda 	bl	800066c <readReg>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	3301      	adds	r3, #1
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8000ac8:	2071      	movs	r0, #113	; 0x71
 8000aca:	f7ff fda9 	bl	8000620 <readReg16>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff23 	bl	800091c <decodeTimeout>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d007      	beq.n	8000af8 <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	891a      	ldrh	r2, [r3, #8]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	88db      	ldrh	r3, [r3, #6]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	4610      	mov	r0, r2
 8000b06:	f7ff ff1d 	bl	8000944 <timeoutMclksToMicroseconds>
 8000b0a:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	460a      	mov	r2, r1
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff fd99 	bl	800066c <readReg>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8000b40:	f107 020c 	add.w	r2, r7, #12
 8000b44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff74 	bl	8000a38 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d15c      	bne.n	8000c10 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	3b0c      	subs	r3, #12
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d824      	bhi.n	8000ba8 <setVcselPulsePeriod+0x90>
 8000b5e:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <setVcselPulsePeriod+0x4c>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000b81 	.word	0x08000b81
 8000b68:	08000ba9 	.word	0x08000ba9
 8000b6c:	08000b8b 	.word	0x08000b8b
 8000b70:	08000ba9 	.word	0x08000ba9
 8000b74:	08000b95 	.word	0x08000b95
 8000b78:	08000ba9 	.word	0x08000ba9
 8000b7c:	08000b9f 	.word	0x08000b9f
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8000b80:	2118      	movs	r1, #24
 8000b82:	2057      	movs	r0, #87	; 0x57
 8000b84:	f7ff fe24 	bl	80007d0 <writeReg>
        break;
 8000b88:	e010      	b.n	8000bac <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8000b8a:	2130      	movs	r1, #48	; 0x30
 8000b8c:	2057      	movs	r0, #87	; 0x57
 8000b8e:	f7ff fe1f 	bl	80007d0 <writeReg>
        break;
 8000b92:	e00b      	b.n	8000bac <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	2057      	movs	r0, #87	; 0x57
 8000b98:	f7ff fe1a 	bl	80007d0 <writeReg>
        break;
 8000b9c:	e006      	b.n	8000bac <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8000b9e:	2150      	movs	r1, #80	; 0x50
 8000ba0:	2057      	movs	r0, #87	; 0x57
 8000ba2:	f7ff fe15 	bl	80007d0 <writeReg>
        break;
 8000ba6:	e001      	b.n	8000bac <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e0fe      	b.n	8000daa <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8000bac:	2108      	movs	r1, #8
 8000bae:	2056      	movs	r0, #86	; 0x56
 8000bb0:	f7ff fe0e 	bl	80007d0 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8000bb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2050      	movs	r0, #80	; 0x50
 8000bbc:	f7ff fe08 	bl	80007d0 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	79ba      	ldrb	r2, [r7, #6]
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fee4 	bl	8000994 <timeoutMicrosecondsToMclks>
 8000bcc:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8000bce:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8000bd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff04 	bl	80009e0 <encodeTimeout>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2051      	movs	r0, #81	; 0x51
 8000bde:	f7ff fdd5 	bl	800078c <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	79ba      	ldrb	r2, [r7, #6]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fed3 	bl	8000994 <timeoutMicrosecondsToMclks>
 8000bee:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8000bf0:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8000bf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf8:	d804      	bhi.n	8000c04 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8000bfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bfc:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	e000      	b.n	8000c06 <setVcselPulsePeriod+0xee>
 8000c04:	23ff      	movs	r3, #255	; 0xff
 8000c06:	4619      	mov	r1, r3
 8000c08:	2046      	movs	r0, #70	; 0x46
 8000c0a:	f7ff fde1 	bl	80007d0 <writeReg>
 8000c0e:	e0b3      	b.n	8000d78 <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	f040 80ae 	bne.w	8000d74 <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	3b08      	subs	r3, #8
 8000c1c:	2b06      	cmp	r3, #6
 8000c1e:	f200 8085 	bhi.w	8000d2c <setVcselPulsePeriod+0x214>
 8000c22:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <setVcselPulsePeriod+0x110>)
 8000c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c28:	08000c45 	.word	0x08000c45
 8000c2c:	08000d2d 	.word	0x08000d2d
 8000c30:	08000c7f 	.word	0x08000c7f
 8000c34:	08000d2d 	.word	0x08000d2d
 8000c38:	08000cb9 	.word	0x08000cb9
 8000c3c:	08000d2d 	.word	0x08000d2d
 8000c40:	08000cf3 	.word	0x08000cf3
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8000c44:	2110      	movs	r1, #16
 8000c46:	2048      	movs	r0, #72	; 0x48
 8000c48:	f7ff fdc2 	bl	80007d0 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8000c4c:	2108      	movs	r1, #8
 8000c4e:	2047      	movs	r0, #71	; 0x47
 8000c50:	f7ff fdbe 	bl	80007d0 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8000c54:	2102      	movs	r1, #2
 8000c56:	2032      	movs	r0, #50	; 0x32
 8000c58:	f7ff fdba 	bl	80007d0 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8000c5c:	210c      	movs	r1, #12
 8000c5e:	2030      	movs	r0, #48	; 0x30
 8000c60:	f7ff fdb6 	bl	80007d0 <writeReg>
        writeReg(0xFF, 0x01);
 8000c64:	2101      	movs	r1, #1
 8000c66:	20ff      	movs	r0, #255	; 0xff
 8000c68:	f7ff fdb2 	bl	80007d0 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8000c6c:	2130      	movs	r1, #48	; 0x30
 8000c6e:	2030      	movs	r0, #48	; 0x30
 8000c70:	f7ff fdae 	bl	80007d0 <writeReg>
        writeReg(0xFF, 0x00);
 8000c74:	2100      	movs	r1, #0
 8000c76:	20ff      	movs	r0, #255	; 0xff
 8000c78:	f7ff fdaa 	bl	80007d0 <writeReg>
        break;
 8000c7c:	e058      	b.n	8000d30 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8000c7e:	2128      	movs	r1, #40	; 0x28
 8000c80:	2048      	movs	r0, #72	; 0x48
 8000c82:	f7ff fda5 	bl	80007d0 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8000c86:	2108      	movs	r1, #8
 8000c88:	2047      	movs	r0, #71	; 0x47
 8000c8a:	f7ff fda1 	bl	80007d0 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8000c8e:	2103      	movs	r1, #3
 8000c90:	2032      	movs	r0, #50	; 0x32
 8000c92:	f7ff fd9d 	bl	80007d0 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8000c96:	2109      	movs	r1, #9
 8000c98:	2030      	movs	r0, #48	; 0x30
 8000c9a:	f7ff fd99 	bl	80007d0 <writeReg>
        writeReg(0xFF, 0x01);
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	20ff      	movs	r0, #255	; 0xff
 8000ca2:	f7ff fd95 	bl	80007d0 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	2030      	movs	r0, #48	; 0x30
 8000caa:	f7ff fd91 	bl	80007d0 <writeReg>
        writeReg(0xFF, 0x00);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	20ff      	movs	r0, #255	; 0xff
 8000cb2:	f7ff fd8d 	bl	80007d0 <writeReg>
        break;
 8000cb6:	e03b      	b.n	8000d30 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8000cb8:	2138      	movs	r1, #56	; 0x38
 8000cba:	2048      	movs	r0, #72	; 0x48
 8000cbc:	f7ff fd88 	bl	80007d0 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	2047      	movs	r0, #71	; 0x47
 8000cc4:	f7ff fd84 	bl	80007d0 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8000cc8:	2103      	movs	r1, #3
 8000cca:	2032      	movs	r0, #50	; 0x32
 8000ccc:	f7ff fd80 	bl	80007d0 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	2030      	movs	r0, #48	; 0x30
 8000cd4:	f7ff fd7c 	bl	80007d0 <writeReg>
        writeReg(0xFF, 0x01);
 8000cd8:	2101      	movs	r1, #1
 8000cda:	20ff      	movs	r0, #255	; 0xff
 8000cdc:	f7ff fd78 	bl	80007d0 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	2030      	movs	r0, #48	; 0x30
 8000ce4:	f7ff fd74 	bl	80007d0 <writeReg>
        writeReg(0xFF, 0x00);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	20ff      	movs	r0, #255	; 0xff
 8000cec:	f7ff fd70 	bl	80007d0 <writeReg>
        break;
 8000cf0:	e01e      	b.n	8000d30 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8000cf2:	2148      	movs	r1, #72	; 0x48
 8000cf4:	2048      	movs	r0, #72	; 0x48
 8000cf6:	f7ff fd6b 	bl	80007d0 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	2047      	movs	r0, #71	; 0x47
 8000cfe:	f7ff fd67 	bl	80007d0 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8000d02:	2103      	movs	r1, #3
 8000d04:	2032      	movs	r0, #50	; 0x32
 8000d06:	f7ff fd63 	bl	80007d0 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8000d0a:	2107      	movs	r1, #7
 8000d0c:	2030      	movs	r0, #48	; 0x30
 8000d0e:	f7ff fd5f 	bl	80007d0 <writeReg>
        writeReg(0xFF, 0x01);
 8000d12:	2101      	movs	r1, #1
 8000d14:	20ff      	movs	r0, #255	; 0xff
 8000d16:	f7ff fd5b 	bl	80007d0 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	2030      	movs	r0, #48	; 0x30
 8000d1e:	f7ff fd57 	bl	80007d0 <writeReg>
        writeReg(0xFF, 0x00);
 8000d22:	2100      	movs	r1, #0
 8000d24:	20ff      	movs	r0, #255	; 0xff
 8000d26:	f7ff fd53 	bl	80007d0 <writeReg>
        break;
 8000d2a:	e001      	b.n	8000d30 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e03c      	b.n	8000daa <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8000d30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000d34:	4619      	mov	r1, r3
 8000d36:	2070      	movs	r0, #112	; 0x70
 8000d38:	f7ff fd4a 	bl	80007d0 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	79ba      	ldrb	r2, [r7, #6]
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fe26 	bl	8000994 <timeoutMicrosecondsToMclks>
 8000d48:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8000d4a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8000d4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8000d58:	8a7a      	ldrh	r2, [r7, #18]
 8000d5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d5c:	4413      	add	r3, r2
 8000d5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8000d60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fe3c 	bl	80009e0 <encodeTimeout>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2071      	movs	r0, #113	; 0x71
 8000d6e:	f7ff fd0d 	bl	800078c <writeReg16>
 8000d72:	e001      	b.n	8000d78 <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	e018      	b.n	8000daa <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <setVcselPulsePeriod+0x29c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f81b 	bl	8000db8 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff fc72 	bl	800066c <readReg>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8000d8e:	2102      	movs	r1, #2
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fd1d 	bl	80007d0 <writeReg>
  performSingleRefCalibration(0x0);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f916 	bl	8000fc8 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8000d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000da0:	4619      	mov	r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fd14 	bl	80007d0 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 8000da8:	2301      	movs	r3, #1
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3730      	adds	r7, #48	; 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000180 	.word	0x20000180

08000db8 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8000dc0:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8000dc4:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 8000dc6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000dca:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 8000dcc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8000dd0:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 8000dd2:	f240 234e 	movw	r3, #590	; 0x24e
 8000dd6:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 8000dd8:	f240 23b2 	movw	r3, #690	; 0x2b2
 8000ddc:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 8000dde:	f44f 7325 	mov.w	r3, #660	; 0x294
 8000de2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 8000de4:	f240 2326 	movw	r3, #550	; 0x226
 8000de8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 8000dea:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d201      	bcs.n	8000dfc <setMeasurementTimingBudget+0x44>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e074      	b.n	8000ee6 <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 8000dfc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000dfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e00:	4413      	add	r3, r2
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fc31 	bl	800066c <readReg>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 8000e10:	f107 0208 	add.w	r2, r7, #8
 8000e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fe0c 	bl	8000a38 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8000e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000e30:	4413      	add	r3, r2
 8000e32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e34:	4413      	add	r3, r2
 8000e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8000e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d007      	beq.n	8000e54 <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000e48:	4413      	add	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e4e:	4413      	add	r3, r2
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e52:	e00b      	b.n	8000e6c <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8000e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000e64:	4413      	add	r3, r2
 8000e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e68:	4413      	add	r3, r2
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8000e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e7c:	4413      	add	r3, r2
 8000e7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e80:	4413      	add	r3, r2
 8000e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8000e84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da2b      	bge.n	8000ee4 <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 8000e8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e90:	4413      	add	r3, r2
 8000e92:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8000e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d901      	bls.n	8000ea0 <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	e022      	b.n	8000ee6 <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8000ea8:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4619      	mov	r1, r3
 8000eae:	6a38      	ldr	r0, [r7, #32]
 8000eb0:	f7ff fd70 	bl	8000994 <timeoutMicrosecondsToMclks>
 8000eb4:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 8000eb6:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8000eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8000ec4:	89fa      	ldrh	r2, [r7, #14]
 8000ec6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ec8:	4413      	add	r3, r2
 8000eca:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8000ecc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fd86 	bl	80009e0 <encodeTimeout>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2071      	movs	r0, #113	; 0x71
 8000eda:	f7ff fc57 	bl	800078c <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <setMeasurementTimingBudget+0x138>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6013      	str	r3, [r2, #0]
  }
  return 1;
 8000ee4:	2301      	movs	r3, #1
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3740      	adds	r7, #64	; 0x40
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000180 	.word	0x20000180

08000ef4 <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8000efa:	f240 7376 	movw	r3, #1910	; 0x776
 8000efe:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 8000f00:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f04:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 8000f06:	f44f 7325 	mov.w	r3, #660	; 0x294
 8000f0a:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8000f0c:	f240 234e 	movw	r3, #590	; 0x24e
 8000f10:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 8000f12:	f240 23b2 	movw	r3, #690	; 0x2b2
 8000f16:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 8000f18:	f44f 7325 	mov.w	r3, #660	; 0x294
 8000f1c:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8000f1e:	f240 2326 	movw	r3, #550	; 0x226
 8000f22:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8000f24:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000f26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f28:	4413      	add	r3, r2
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f7ff fb9d 	bl	800066c <readReg>
 8000f32:	4603      	mov	r3, r0
 8000f34:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 8000f36:	1d3a      	adds	r2, r7, #4
 8000f38:	7f7b      	ldrb	r3, [r7, #29]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fd7b 	bl	8000a38 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8000f42:	7f7b      	ldrb	r3, [r7, #29]
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f50:	4413      	add	r3, r2
 8000f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f54:	4413      	add	r3, r2
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8000f58:	7f7b      	ldrb	r3, [r7, #29]
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d007      	beq.n	8000f72 <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f66:	4413      	add	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f6c:	4413      	add	r3, r2
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f70:	e00a      	b.n	8000f88 <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8000f72:	7f7b      	ldrb	r3, [r7, #29]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f80:	4413      	add	r3, r2
 8000f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f84:	4413      	add	r3, r2
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8000f88:	7f7b      	ldrb	r3, [r7, #29]
 8000f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d005      	beq.n	8000f9e <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	8c3b      	ldrh	r3, [r7, #32]
 8000f96:	4413      	add	r3, r2
 8000f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f9a:	4413      	add	r3, r2
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8000f9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	da05      	bge.n	8000fb2 <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	8bfb      	ldrh	r3, [r7, #30]
 8000faa:	4413      	add	r3, r2
 8000fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fae:	4413      	add	r3, r2
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <getMeasurementTimingBudget+0xd0>)
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	6013      	str	r3, [r2, #0]
  return budget_us;
 8000fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3730      	adds	r7, #48	; 0x30
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000180 	.word	0x20000180

08000fc8 <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff fbf7 	bl	80007d0 <writeReg>

  iTimeout = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8000fe6:	e00a      	b.n	8000ffe <performSingleRefCalibration+0x36>
  {
    iTimeout++;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 8000fee:	2005      	movs	r0, #5
 8000ff0:	f001 f8ea 	bl	80021c8 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b64      	cmp	r3, #100	; 0x64
 8000ff8:	dd01      	ble.n	8000ffe <performSingleRefCalibration+0x36>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e010      	b.n	8001020 <performSingleRefCalibration+0x58>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8000ffe:	2013      	movs	r0, #19
 8001000:	f7ff fb34 	bl	800066c <readReg>
 8001004:	4603      	mov	r3, r0
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0ec      	beq.n	8000fe8 <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800100e:	2101      	movs	r1, #1
 8001010:	200b      	movs	r0, #11
 8001012:	f7ff fbdd 	bl	80007d0 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8001016:	2100      	movs	r1, #0
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff fbd9 	bl	80007d0 <writeReg>

  return 1;
 800101e:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 8001030:	2300      	movs	r3, #0
 8001032:	75bb      	strb	r3, [r7, #22]
 8001034:	2300      	movs	r3, #0
 8001036:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8001038:	2089      	movs	r0, #137	; 0x89
 800103a:	f7ff fb17 	bl	800066c <readReg>
 800103e:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4619      	mov	r1, r3
 8001048:	2089      	movs	r0, #137	; 0x89
 800104a:	f7ff fbc1 	bl	80007d0 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 800104e:	486a      	ldr	r0, [pc, #424]	; (80011f8 <initSensor+0x1d0>)
 8001050:	f7ff fbda 	bl	8000808 <writeRegList>
  stop_variable = readReg(0x91);
 8001054:	2091      	movs	r0, #145	; 0x91
 8001056:	f7ff fb09 	bl	800066c <readReg>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b67      	ldr	r3, [pc, #412]	; (80011fc <initSensor+0x1d4>)
 8001060:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 8001062:	4867      	ldr	r0, [pc, #412]	; (8001200 <initSensor+0x1d8>)
 8001064:	f7ff fbd0 	bl	8000808 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 8001068:	2060      	movs	r0, #96	; 0x60
 800106a:	f7ff faff 	bl	800066c <readReg>
 800106e:	4603      	mov	r3, r0
 8001070:	f043 0312 	orr.w	r3, r3, #18
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	2060      	movs	r0, #96	; 0x60
 800107a:	f7ff fba9 	bl	80007d0 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 800107e:	2120      	movs	r1, #32
 8001080:	2044      	movs	r0, #68	; 0x44
 8001082:	f7ff fb83 	bl	800078c <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001086:	21ff      	movs	r1, #255	; 0xff
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fba1 	bl	80007d0 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 800108e:	f107 0215 	add.w	r2, r7, #21
 8001092:	f107 0316 	add.w	r3, r7, #22
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fbd9 	bl	8000850 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2206      	movs	r2, #6
 80010a4:	4619      	mov	r1, r3
 80010a6:	20b0      	movs	r0, #176	; 0xb0
 80010a8:	f7ff fb00 	bl	80006ac <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 80010ac:	4855      	ldr	r0, [pc, #340]	; (8001204 <initSensor+0x1dc>)
 80010ae:	f7ff fbab 	bl	8000808 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <initSensor+0x94>
 80010b8:	230c      	movs	r3, #12
 80010ba:	e000      	b.n	80010be <initSensor+0x96>
 80010bc:	2300      	movs	r3, #0
 80010be:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	e037      	b.n	800113a <initSensor+0x112>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	db03      	blt.n	80010da <initSensor+0xb2>
 80010d2:	7dbb      	ldrb	r3, [r7, #22]
 80010d4:	7ffa      	ldrb	r2, [r7, #31]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d119      	bne.n	800110e <initSensor+0xe6>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	10db      	asrs	r3, r3, #3
 80010de:	3320      	adds	r3, #32
 80010e0:	443b      	add	r3, r7
 80010e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80010e6:	b25a      	sxtb	r2, r3
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	4013      	ands	r3, r2
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	10db      	asrs	r3, r3, #3
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	3320      	adds	r3, #32
 8001106:	443b      	add	r3, r7
 8001108:	f803 2c14 	strb.w	r2, [r3, #-20]
 800110c:	e012      	b.n	8001134 <initSensor+0x10c>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	10db      	asrs	r3, r3, #3
 8001112:	3320      	adds	r3, #32
 8001114:	443b      	add	r3, r7
 8001116:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800111a:	461a      	mov	r2, r3
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	fa42 f303 	asr.w	r3, r2, r3
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <initSensor+0x10c>
    {
      ucSPADsEnabled++;
 800112e:	7ffb      	ldrb	r3, [r7, #31]
 8001130:	3301      	adds	r3, #1
 8001132:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	3301      	adds	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b2f      	cmp	r3, #47	; 0x2f
 800113e:	ddc4      	ble.n	80010ca <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2206      	movs	r2, #6
 8001146:	4619      	mov	r1, r3
 8001148:	20b0      	movs	r0, #176	; 0xb0
 800114a:	f7ff facf 	bl	80006ec <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0],
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 800114e:	482e      	ldr	r0, [pc, #184]	; (8001208 <initSensor+0x1e0>)
 8001150:	f7ff fb5a 	bl	8000808 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <initSensor+0x14a>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 800115a:	210d      	movs	r1, #13
 800115c:	2044      	movs	r0, #68	; 0x44
 800115e:	f7ff fb15 	bl	800078c <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 8001162:	2112      	movs	r1, #18
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fcd7 	bl	8000b18 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 800116a:	210e      	movs	r1, #14
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fcd3 	bl	8000b18 <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001172:	2104      	movs	r1, #4
 8001174:	200a      	movs	r0, #10
 8001176:	f7ff fb2b 	bl	80007d0 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800117a:	2084      	movs	r0, #132	; 0x84
 800117c:	f7ff fa76 	bl	800066c <readReg>
 8001180:	4603      	mov	r3, r0
 8001182:	f023 0310 	bic.w	r3, r3, #16
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4619      	mov	r1, r3
 800118a:	2084      	movs	r0, #132	; 0x84
 800118c:	f7ff fb20 	bl	80007d0 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001190:	2101      	movs	r1, #1
 8001192:	200b      	movs	r0, #11
 8001194:	f7ff fb1c 	bl	80007d0 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 8001198:	f7ff feac 	bl	8000ef4 <getMeasurementTimingBudget>
 800119c:	4603      	mov	r3, r0
 800119e:	4a1b      	ldr	r2, [pc, #108]	; (800120c <initSensor+0x1e4>)
 80011a0:	6013      	str	r3, [r2, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 80011a2:	21e8      	movs	r1, #232	; 0xe8
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff fb13 	bl	80007d0 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <initSensor+0x1e4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fe02 	bl	8000db8 <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80011b4:	2101      	movs	r1, #1
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff fb0a 	bl	80007d0 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 80011bc:	2040      	movs	r0, #64	; 0x40
 80011be:	f7ff ff03 	bl	8000fc8 <performSingleRefCalibration>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <initSensor+0x1a4>
 80011c8:	2300      	movs	r3, #0
 80011ca:	e010      	b.n	80011ee <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80011cc:	2102      	movs	r1, #2
 80011ce:	2001      	movs	r0, #1
 80011d0:	f7ff fafe 	bl	80007d0 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff fef7 	bl	8000fc8 <performSingleRefCalibration>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <initSensor+0x1bc>
 80011e0:	2300      	movs	r3, #0
 80011e2:	e004      	b.n	80011ee <initSensor+0x1c6>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 80011e4:	21e8      	movs	r1, #232	; 0xe8
 80011e6:	2001      	movs	r0, #1
 80011e8:	f7ff faf2 	bl	80007d0 <writeReg>
  return 1;
 80011ec:	2301      	movs	r3, #1
} /* initSensor() */
 80011ee:	4618      	mov	r0, r3
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000
 80011fc:	2000017c 	.word	0x2000017c
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000038 	.word	0x20000038
 8001208:	20000044 	.word	0x20000044
 800120c:	20000180 	.word	0x20000180

08001210 <tofGetModel>:
  return readRangeContinuousMillimeters();

} /* tofReadDistance() */

int tofGetModel(int *model, int *revision)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af02      	add	r7, sp, #8
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	uint8_t ucTemp, ucAddr;

	if (model)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d019      	beq.n	8001254 <tofGetModel+0x44>
	{
		ucAddr = REG_IDENTIFICATION_MODEL_ID;
 8001220:	23c0      	movs	r3, #192	; 0xc0
 8001222:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001224:	f107 020e 	add.w	r2, r7, #14
 8001228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	2152      	movs	r1, #82	; 0x52
 8001232:	4819      	ldr	r0, [pc, #100]	; (8001298 <tofGetModel+0x88>)
 8001234:	f001 fcf4 	bl	8002c20 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8001238:	f107 020f 	add.w	r2, r7, #15
 800123c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	2153      	movs	r1, #83	; 0x53
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <tofGetModel+0x88>)
 8001248:	f001 fdde 	bl	8002e08 <HAL_I2C_Master_Receive>
		*model = ucTemp;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	461a      	mov	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]
	}
	if (revision)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d019      	beq.n	800128e <tofGetModel+0x7e>
	{
		ucAddr = REG_IDENTIFICATION_REVISION_ID;
 800125a:	23c2      	movs	r3, #194	; 0xc2
 800125c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 800125e:	f107 020e 	add.w	r2, r7, #14
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	2152      	movs	r1, #82	; 0x52
 800126c:	480a      	ldr	r0, [pc, #40]	; (8001298 <tofGetModel+0x88>)
 800126e:	f001 fcd7 	bl	8002c20 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8001272:	f107 020f 	add.w	r2, r7, #15
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	2153      	movs	r1, #83	; 0x53
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <tofGetModel+0x88>)
 8001282:	f001 fdc1 	bl	8002e08 <HAL_I2C_Master_Receive>
		*revision = ucTemp;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	461a      	mov	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	601a      	str	r2, [r3, #0]
	}
	return 1;
 800128e:	2301      	movs	r3, #1

} /* tofGetModel() */
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000184 	.word	0x20000184

0800129c <initTof>:
 * @brief Use to initialize the ToF sensor
 *
 * @return
 */
int initTof()
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
	int model = 0, revision = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(ToF_Enable_XSHUT_GPIO_Port, ToF_Enable_XSHUT_Pin, SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2120      	movs	r1, #32
 80012ae:	4821      	ldr	r0, [pc, #132]	; (8001334 <initTof+0x98>)
 80012b0:	f001 fbe0 	bl	8002a74 <HAL_GPIO_WritePin>
	while(I2C2->CR2==2)
 80012b4:	e00d      	b.n	80012d2 <initTof+0x36>
		{
		  while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 80012b6:	bf00      	nop
 80012b8:	481f      	ldr	r0, [pc, #124]	; (8001338 <initTof+0x9c>)
 80012ba:	f001 fc82 	bl	8002bc2 <HAL_I2C_DeInit>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f9      	bne.n	80012b8 <initTof+0x1c>
		  while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 80012c4:	bf00      	nop
 80012c6:	481c      	ldr	r0, [pc, #112]	; (8001338 <initTof+0x9c>)
 80012c8:	f001 fbec 	bl	8002aa4 <HAL_I2C_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <initTof+0x2a>
	while(I2C2->CR2==2)
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <initTof+0xa0>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d0ed      	beq.n	80012b6 <initTof+0x1a>
		}

	tofInit(1); // set long range mode (up to 2m)
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff f994 	bl	8000608 <tofInit>
	tofGetModel(&model, &revision);
 80012e0:	463a      	mov	r2, r7
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff92 	bl	8001210 <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 80012ec:	e016      	b.n	800131c <initTof+0x80>
	{
	while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 80012ee:	bf00      	nop
 80012f0:	4811      	ldr	r0, [pc, #68]	; (8001338 <initTof+0x9c>)
 80012f2:	f001 fc66 	bl	8002bc2 <HAL_I2C_DeInit>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f9      	bne.n	80012f0 <initTof+0x54>
	while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 80012fc:	bf00      	nop
 80012fe:	480e      	ldr	r0, [pc, #56]	; (8001338 <initTof+0x9c>)
 8001300:	f001 fbd0 	bl	8002aa4 <HAL_I2C_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <initTof+0x62>
	tofInit(1); // set long range mode (up to 2m)
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff f97c 	bl	8000608 <tofInit>
	tofGetModel(&model, &revision);
 8001310:	463a      	mov	r2, r7
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff7a 	bl	8001210 <tofGetModel>
	while(model != 238 || revision != 16) //initialise le ToF
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2bee      	cmp	r3, #238	; 0xee
 8001320:	d1e5      	bne.n	80012ee <initTof+0x52>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b10      	cmp	r3, #16
 8001326:	d1e2      	bne.n	80012ee <initTof+0x52>
	}
	return 1;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	48000800 	.word	0x48000800
 8001338:	20000184 	.word	0x20000184
 800133c:	40005800 	.word	0x40005800

08001340 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b35      	ldr	r3, [pc, #212]	; (800142c <MX_GPIO_Init+0xec>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a34      	ldr	r2, [pc, #208]	; (800142c <MX_GPIO_Init+0xec>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b32      	ldr	r3, [pc, #200]	; (800142c <MX_GPIO_Init+0xec>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <MX_GPIO_Init+0xec>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a2e      	ldr	r2, [pc, #184]	; (800142c <MX_GPIO_Init+0xec>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <MX_GPIO_Init+0xec>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <MX_GPIO_Init+0xec>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a28      	ldr	r2, [pc, #160]	; (800142c <MX_GPIO_Init+0xec>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <MX_GPIO_Init+0xec>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_GPIO_Init+0xec>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a22      	ldr	r2, [pc, #136]	; (800142c <MX_GPIO_Init+0xec>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_GPIO_Init+0xec>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2120      	movs	r1, #32
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013be:	f001 fb59 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ToF_Enable_XSHUT_GPIO_Port, ToF_Enable_XSHUT_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2120      	movs	r1, #32
 80013c6:	481a      	ldr	r0, [pc, #104]	; (8001430 <MX_GPIO_Init+0xf0>)
 80013c8:	f001 fb54 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4813      	ldr	r0, [pc, #76]	; (8001430 <MX_GPIO_Init+0xf0>)
 80013e4:	f001 f8e2 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013e8:	2320      	movs	r3, #32
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f001 f8d3 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ToF_Enable_XSHUT_Pin;
 8001406:	2320      	movs	r3, #32
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ToF_Enable_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_GPIO_Init+0xf0>)
 800141e:	f001 f8c5 	bl	80025ac <HAL_GPIO_Init>

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	; 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	48000800 	.word	0x48000800

08001434 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_I2C2_Init+0x74>)
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <MX_I2C2_Init+0x78>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <MX_I2C2_Init+0x7c>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_I2C2_Init+0x74>)
 800144c:	2201      	movs	r2, #1
 800144e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_I2C2_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_I2C2_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800146e:	480e      	ldr	r0, [pc, #56]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001470:	f001 fb18 	bl	8002aa4 <HAL_I2C_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800147a:	f000 f9b0 	bl	80017de <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800147e:	2100      	movs	r1, #0
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001482:	f002 f82f 	bl	80034e4 <HAL_I2CEx_ConfigAnalogFilter>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800148c:	f000 f9a7 	bl	80017de <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001490:	2100      	movs	r1, #0
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_I2C2_Init+0x74>)
 8001494:	f002 f871 	bl	800357a <HAL_I2CEx_ConfigDigitalFilter>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800149e:	f000 f99e 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000184 	.word	0x20000184
 80014ac:	40005800 	.word	0x40005800
 80014b0:	30a0a7fb 	.word	0x30a0a7fb

080014b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b09c      	sub	sp, #112	; 0x70
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	2244      	movs	r2, #68	; 0x44
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f007 fe69 	bl	80091ac <memset>
  if(i2cHandle->Instance==I2C2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a2d      	ldr	r2, [pc, #180]	; (8001594 <HAL_I2C_MspInit+0xe0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d153      	bne.n	800158c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fe77 	bl	80041e4 <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014fc:	f000 f96f 	bl	80017de <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_I2C_MspInit+0xe4>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a24      	ldr	r2, [pc, #144]	; (8001598 <HAL_I2C_MspInit+0xe4>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_I2C_MspInit+0xe4>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_I2C_MspInit+0xe4>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	4a1e      	ldr	r2, [pc, #120]	; (8001598 <HAL_I2C_MspInit+0xe4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <HAL_I2C_MspInit+0xe4>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TOF_I2C2_SCL_Pin;
 8001530:	2310      	movs	r3, #16
 8001532:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001534:	2312      	movs	r3, #18
 8001536:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001540:	2304      	movs	r3, #4
 8001542:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(TOF_I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001548:	4619      	mov	r1, r3
 800154a:	4814      	ldr	r0, [pc, #80]	; (800159c <HAL_I2C_MspInit+0xe8>)
 800154c:	f001 f82e 	bl	80025ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TOF_I2C2_SDA_Pin;
 8001550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001554:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001556:	2312      	movs	r3, #18
 8001558:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001562:	2304      	movs	r3, #4
 8001564:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(TOF_I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f001 f81c 	bl	80025ac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_I2C_MspInit+0xe4>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_I2C_MspInit+0xe4>)
 800157a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800157e:	6593      	str	r3, [r2, #88]	; 0x58
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_I2C_MspInit+0xe4>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800158c:	bf00      	nop
 800158e:	3770      	adds	r7, #112	; 0x70
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40005800 	.word	0x40005800
 8001598:	40021000 	.word	0x40021000
 800159c:	48000800 	.word	0x48000800

080015a0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_I2C_MspDeInit+0x3c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d10f      	bne.n	80015d2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_I2C_MspDeInit+0x40>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_I2C_MspDeInit+0x40>)
 80015b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(TOF_I2C2_SCL_GPIO_Port, TOF_I2C2_SCL_Pin);
 80015be:	2110      	movs	r1, #16
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <HAL_I2C_MspDeInit+0x44>)
 80015c2:	f001 f975 	bl	80028b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(TOF_I2C2_SDA_GPIO_Port, TOF_I2C2_SDA_Pin);
 80015c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f001 f96f 	bl	80028b0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40005800 	.word	0x40005800
 80015e0:	40021000 	.word	0x40021000
 80015e4:	48000800 	.word	0x48000800

080015e8 <__io_putchar>:
	if (htim->Instance == htim3.Instance) {
		it_tim3=1;
	}
}

int __io_putchar(int ch) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, MAX_S_Time);
 80015f0:	1d39      	adds	r1, r7, #4
 80015f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80015f6:	2201      	movs	r2, #1
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <__io_putchar+0x20>)
 80015fa:	f004 fa97 	bl	8005b2c <HAL_UART_Transmit>
	return ch;
 80015fe:	687b      	ldr	r3, [r7, #4]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200002c4 	.word	0x200002c4

0800160c <RaspRead>:
	it_tim3=0;
}



void RaspRead (void * pvParameters) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b0b6      	sub	sp, #216	; 0xd8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	uint8_t MSG_Buffer[200] = {'\0'};
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	22c4      	movs	r2, #196	; 0xc4
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f007 fdc3 	bl	80091ac <memset>
	int duree = (int) pvParameters;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	while (1) {
		xSemaphoreTake(semaphoreRASP,RASP_UART_TO);
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <RaspRead+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001634:	4618      	mov	r0, r3
 8001636:	f006 f82f 	bl	8007698 <xQueueSemaphoreTake>
		HAL_UART_Receive(&huart3, MSG_Buffer, sizeof(MSG_Buffer),RASP_UART_TO);
 800163a:	f107 010c 	add.w	r1, r7, #12
 800163e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001642:	22c8      	movs	r2, #200	; 0xc8
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <RaspRead+0x68>)
 8001646:	f004 fb07 	bl	8005c58 <HAL_UART_Receive>
		printf("%s\r\n", MSG_Buffer);
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	4619      	mov	r1, r3
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <RaspRead+0x6c>)
 8001652:	f007 fdb3 	bl	80091bc <iprintf>
		xSemaphoreGive(semaphoreRASP);
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <RaspRead+0x64>)
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	f005 ff1c 	bl	800749c <xQueueGenericSend>
		vTaskDelay(duree);
 8001664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001668:	4618      	mov	r0, r3
 800166a:	f006 fb55 	bl	8007d18 <vTaskDelay>
		xSemaphoreTake(semaphoreRASP,RASP_UART_TO);
 800166e:	e7dd      	b.n	800162c <RaspRead+0x20>
 8001670:	200001d8 	.word	0x200001d8
 8001674:	20000354 	.word	0x20000354
 8001678:	0800a280 	.word	0x0800a280

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001682:	f000 fd30 	bl	80020e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001686:	f000 f85f 	bl	8001748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168a:	f7ff fe59 	bl	8001340 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800168e:	f000 fbc3 	bl	8001e18 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 8001692:	f7ff fecf 	bl	8001434 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001696:	f000 fabd 	bl	8001c14 <MX_TIM3_Init>
  MX_TIM2_Init();
 800169a:	f000 fa6d 	bl	8001b78 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800169e:	f000 fc05 	bl	8001eac <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80016a2:	f000 f9b9 	bl	8001a18 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016a6:	2100      	movs	r1, #0
 80016a8:	481d      	ldr	r0, [pc, #116]	; (8001720 <main+0xa4>)
 80016aa:	f003 f843 	bl	8004734 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80016ae:	213c      	movs	r1, #60	; 0x3c
 80016b0:	481c      	ldr	r0, [pc, #112]	; (8001724 <main+0xa8>)
 80016b2:	f003 f9e5 	bl	8004a80 <HAL_TIM_Encoder_Start>
  initTof();
 80016b6:	f7ff fdf1 	bl	800129c <initTof>
	printf("ERROR ControlServo NOT created \r\n");
	while(1){}
  }
 */

  semaphoreRASP = xSemaphoreCreateBinary();
 80016ba:	2203      	movs	r2, #3
 80016bc:	2100      	movs	r1, #0
 80016be:	2001      	movs	r0, #1
 80016c0:	f005 fe96 	bl	80073f0 <xQueueGenericCreate>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a18      	ldr	r2, [pc, #96]	; (8001728 <main+0xac>)
 80016c8:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(semaphoreRASP);
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <main+0xac>)
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	2300      	movs	r3, #0
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	f005 fee2 	bl	800749c <xQueueGenericSend>

  printf("3 \r\n");
 80016d8:	4814      	ldr	r0, [pc, #80]	; (800172c <main+0xb0>)
 80016da:	f007 fdf5 	bl	80092c8 <puts>
  xReturned_RASP = xTaskCreate(
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <main+0xb4>)
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	2303      	movs	r3, #3
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2332      	movs	r3, #50	; 0x32
 80016e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016ec:	4911      	ldr	r1, [pc, #68]	; (8001734 <main+0xb8>)
 80016ee:	4812      	ldr	r0, [pc, #72]	; (8001738 <main+0xbc>)
 80016f0:	f006 f9e0 	bl	8007ab4 <xTaskCreate>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a11      	ldr	r2, [pc, #68]	; (800173c <main+0xc0>)
 80016f8:	6013      	str	r3, [r2, #0]
		  STACK_SIZE, 					// Stack size in words, not bytes.
		  (void *) DELAY_3, 			// Parameter passed into the task.
		  PRIORITY_RASP,				// Priority at which the task is created.
		  &xHandle_RASP ); 				// Used to pass out the created task's handle.

  if (xReturned_RASP == pdPASS ){
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <main+0xc0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d109      	bne.n	8001716 <main+0x9a>
	  printf("Task RaspRead created \r\n");
 8001702:	480f      	ldr	r0, [pc, #60]	; (8001740 <main+0xc4>)
 8001704:	f007 fde0 	bl	80092c8 <puts>
		while(1){}
  }



  vTaskStartScheduler();
 8001708:	f006 fb3a 	bl	8007d80 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800170c:	f7fe ff5a 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001710:	f005 fd10 	bl	8007134 <osKernelStart>
 8001714:	e003      	b.n	800171e <main+0xa2>
		printf("ERROR RaspRead not created \r\n");
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <main+0xc8>)
 8001718:	f007 fdd6 	bl	80092c8 <puts>
		while(1){}
 800171c:	e7fe      	b.n	800171c <main+0xa0>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800171e:	e7fe      	b.n	800171e <main+0xa2>
 8001720:	200001e0 	.word	0x200001e0
 8001724:	20000278 	.word	0x20000278
 8001728:	200001d8 	.word	0x200001d8
 800172c:	0800a288 	.word	0x0800a288
 8001730:	200001d4 	.word	0x200001d4
 8001734:	0800a28c 	.word	0x0800a28c
 8001738:	0800160d 	.word	0x0800160d
 800173c:	200001d0 	.word	0x200001d0
 8001740:	0800a298 	.word	0x0800a298
 8001744:	0800a2b0 	.word	0x0800a2b0

08001748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	; 0x50
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	f107 0318 	add.w	r3, r7, #24
 8001752:	2238      	movs	r2, #56	; 0x38
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f007 fd28 	bl	80091ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800176a:	2000      	movs	r0, #0
 800176c:	f001 ff52 	bl	8003614 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177a:	2340      	movs	r3, #64	; 0x40
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177e:	2302      	movs	r3, #2
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001782:	2302      	movs	r3, #2
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001786:	2304      	movs	r3, #4
 8001788:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800178a:	2355      	movs	r3, #85	; 0x55
 800178c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178e:	2302      	movs	r3, #2
 8001790:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001792:	2302      	movs	r3, #2
 8001794:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001796:	2302      	movs	r3, #2
 8001798:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179a:	f107 0318 	add.w	r3, r7, #24
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 ffec 	bl	800377c <HAL_RCC_OscConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017aa:	f000 f818 	bl	80017de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ae:	230f      	movs	r3, #15
 80017b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b2:	2303      	movs	r3, #3
 80017b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2104      	movs	r1, #4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 faf0 	bl	8003dac <HAL_RCC_ClockConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80017d2:	f000 f804 	bl	80017de <Error_Handler>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3750      	adds	r7, #80	; 0x50
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e2:	b672      	cpsid	i
}
 80017e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <Error_Handler+0x8>

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_MspInit+0x50>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_MspInit+0x50>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6613      	str	r3, [r2, #96]	; 0x60
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x50>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x50>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_MspInit+0x50>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6593      	str	r3, [r2, #88]	; 0x58
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x50>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	210f      	movs	r1, #15
 8001822:	f06f 0001 	mvn.w	r0, #1
 8001826:	f000 fdcc 	bl	80023c2 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800182a:	f001 ff97 	bl	800375c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186c:	f000 fc8e 	bl	800218c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001870:	f006 fe4c 	bl	800850c <xTaskGetSchedulerState>
 8001874:	4603      	mov	r3, r0
 8001876:	2b01      	cmp	r3, #1
 8001878:	d001      	beq.n	800187e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800187a:	f007 fa25 	bl	8008cc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <USART3_IRQHandler+0x10>)
 800188a:	f004 fab9 	bl	8005e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000354 	.word	0x20000354

08001898 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <LPUART1_IRQHandler+0x10>)
 800189e:	f004 faaf 	bl	8005e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002c4 	.word	0x200002c4

080018ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e00a      	b.n	80018d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	4601      	mov	r1, r0
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf0      	blt.n	80018be <_read+0x12>
  }

  return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e009      	b.n	800190c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fe71 	bl	80015e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf1      	blt.n	80018f8 <_write+0x12>
  }
  return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_close>:

int _close(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001946:	605a      	str	r2, [r3, #4]
  return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_isatty>:

int _isatty(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f007 fbc0 	bl	800913c <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20008000 	.word	0x20008000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	200001dc 	.word	0x200001dc
 80019f0:	20004550 	.word	0x20004550

080019f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b09c      	sub	sp, #112	; 0x70
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2234      	movs	r2, #52	; 0x34
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f007 fbaa 	bl	80091ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a58:	4b45      	ldr	r3, [pc, #276]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001a5a:	4a46      	ldr	r2, [pc, #280]	; (8001b74 <MX_TIM1_Init+0x15c>)
 8001a5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8001a5e:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001a60:	22a9      	movs	r2, #169	; 0xa9
 8001a62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001a6a:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001a6c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a78:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a84:	483a      	ldr	r0, [pc, #232]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001a86:	f002 fd9d 	bl	80045c4 <HAL_TIM_Base_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a90:	f7ff fea5 	bl	80017de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4833      	ldr	r0, [pc, #204]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001aa2:	f003 f98f 	bl	8004dc4 <HAL_TIM_ConfigClockSource>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001aac:	f7ff fe97 	bl	80017de <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ab0:	482f      	ldr	r0, [pc, #188]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001ab2:	f002 fdde 	bl	8004672 <HAL_TIM_PWM_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001abc:	f7ff fe8f 	bl	80017de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001acc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4827      	ldr	r0, [pc, #156]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001ad4:	f003 feb8 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ade:	f7ff fe7e 	bl	80017de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae2:	2360      	movs	r3, #96	; 0x60
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aea:	2300      	movs	r3, #0
 8001aec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aee:	2300      	movs	r3, #0
 8001af0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b02:	2200      	movs	r2, #0
 8001b04:	4619      	mov	r1, r3
 8001b06:	481a      	ldr	r0, [pc, #104]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001b08:	f003 f848 	bl	8004b9c <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001b12:	f7ff fe64 	bl	80017de <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4807      	ldr	r0, [pc, #28]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001b54:	f003 fefa 	bl	800594c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001b5e:	f7ff fe3e 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b62:	4803      	ldr	r0, [pc, #12]	; (8001b70 <MX_TIM1_Init+0x158>)
 8001b64:	f000 f920 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 8001b68:	bf00      	nop
 8001b6a:	3770      	adds	r7, #112	; 0x70
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200001e0 	.word	0x200001e0
 8001b74:	40012c00 	.word	0x40012c00

08001b78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <MX_TIM2_Init+0x98>)
 8001b98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <MX_TIM2_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_TIM2_Init+0x98>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <MX_TIM2_Init+0x98>)
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_TIM2_Init+0x98>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_TIM2_Init+0x98>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bbe:	4814      	ldr	r0, [pc, #80]	; (8001c10 <MX_TIM2_Init+0x98>)
 8001bc0:	f002 fd00 	bl	80045c4 <HAL_TIM_Base_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bca:	f7ff fe08 	bl	80017de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480d      	ldr	r0, [pc, #52]	; (8001c10 <MX_TIM2_Init+0x98>)
 8001bdc:	f003 f8f2 	bl	8004dc4 <HAL_TIM_ConfigClockSource>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001be6:	f7ff fdfa 	bl	80017de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <MX_TIM2_Init+0x98>)
 8001bf8:	f003 fe26 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c02:	f7ff fdec 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000022c 	.word	0x2000022c

08001c14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08c      	sub	sp, #48	; 0x30
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f007 fac2 	bl	80091ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_TIM3_Init+0xa4>)
 8001c34:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <MX_TIM3_Init+0xa8>)
 8001c36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <MX_TIM3_Init+0xa4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_TIM3_Init+0xa4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_TIM3_Init+0xa4>)
 8001c46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_TIM3_Init+0xa4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_TIM3_Init+0xa4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c60:	2301      	movs	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c70:	2301      	movs	r3, #1
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4619      	mov	r1, r3
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <MX_TIM3_Init+0xa4>)
 8001c84:	f002 fe56 	bl	8004934 <HAL_TIM_Encoder_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c8e:	f7ff fda6 	bl	80017de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <MX_TIM3_Init+0xa4>)
 8001ca0:	f003 fdd2 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001caa:	f7ff fd98 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3730      	adds	r7, #48	; 0x30
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000278 	.word	0x20000278
 8001cbc:	40000400 	.word	0x40000400

08001cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <HAL_TIM_Base_MspInit+0x5c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10c      	bne.n	8001cec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_TIM_Base_MspInit+0x60>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <HAL_TIM_Base_MspInit+0x60>)
 8001cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_TIM_Base_MspInit+0x60>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cea:	e010      	b.n	8001d0e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf4:	d10b      	bne.n	8001d0e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_TIM_Base_MspInit+0x60>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_TIM_Base_MspInit+0x60>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_TIM_Base_MspInit+0x60>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40012c00 	.word	0x40012c00
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d128      	bne.n	8001d98 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ENCODER_A1_TIM3_Pin|ENCODER_A2_TIM3_Pin;
 8001d76:	2350      	movs	r3, #80	; 0x50
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d86:	2302      	movs	r3, #2
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f000 fc0a 	bl	80025ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40021000 	.word	0x40021000

08001da8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <HAL_TIM_MspPostInit+0x64>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d11b      	bne.n	8001e02 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_TIM_MspPostInit+0x68>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <HAL_TIM_MspPostInit+0x68>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_TIM_MspPostInit+0x68>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_TIM1_CH1_Pin;
 8001de2:	2301      	movs	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_PWM_TIM1_CH1_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <HAL_TIM_MspPostInit+0x6c>)
 8001dfe:	f000 fbd5 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40012c00 	.word	0x40012c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48000800 	.word	0x48000800

08001e18 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e1e:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <MX_LPUART1_UART_Init+0x90>)
 8001e20:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e28:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001e5a:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e5c:	f003 fe16 	bl	8005a8c <HAL_UART_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e66:	f7ff fcba 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e6e:	f005 f87e 	bl	8006f6e <HAL_UARTEx_SetTxFifoThreshold>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001e78:	f7ff fcb1 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e80:	f005 f8b3 	bl	8006fea <HAL_UARTEx_SetRxFifoThreshold>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001e8a:	f7ff fca8 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_LPUART1_UART_Init+0x8c>)
 8001e90:	f005 f834 	bl	8006efc <HAL_UARTEx_DisableFifoMode>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001e9a:	f7ff fca0 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200002c4 	.word	0x200002c4
 8001ea8:	40008000 	.word	0x40008000

08001eac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <MX_USART3_UART_Init+0x94>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ef4:	4811      	ldr	r0, [pc, #68]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ef6:	f003 fdc9 	bl	8005a8c <HAL_UART_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f00:	f7ff fc6d 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	480d      	ldr	r0, [pc, #52]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001f08:	f005 f831 	bl	8006f6e <HAL_UARTEx_SetTxFifoThreshold>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f12:	f7ff fc64 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001f1a:	f005 f866 	bl	8006fea <HAL_UARTEx_SetRxFifoThreshold>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f24:	f7ff fc5b 	bl	80017de <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001f2a:	f004 ffe7 	bl	8006efc <HAL_UARTEx_DisableFifoMode>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f7ff fc53 	bl	80017de <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000354 	.word	0x20000354
 8001f40:	40004800 	.word	0x40004800

08001f44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b09c      	sub	sp, #112	; 0x70
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	2244      	movs	r2, #68	; 0x44
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f007 f921 	bl	80091ac <memset>
  if(uartHandle->Instance==LPUART1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a45      	ldr	r2, [pc, #276]	; (8002084 <HAL_UART_MspInit+0x140>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d13f      	bne.n	8001ff4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f74:	2320      	movs	r3, #32
 8001f76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f7c:	f107 0318 	add.w	r3, r7, #24
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 f92f 	bl	80041e4 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f8c:	f7ff fc27 	bl	80017de <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f90:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_UART_MspInit+0x144>)
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	4a3c      	ldr	r2, [pc, #240]	; (8002088 <HAL_UART_MspInit+0x144>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f9c:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <HAL_UART_MspInit+0x144>)
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_UART_MspInit+0x144>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	4a36      	ldr	r2, [pc, #216]	; (8002088 <HAL_UART_MspInit+0x144>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb4:	4b34      	ldr	r3, [pc, #208]	; (8002088 <HAL_UART_MspInit+0x144>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fde:	f000 fae5 	bl	80025ac <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 8, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2108      	movs	r1, #8
 8001fe6:	205b      	movs	r0, #91	; 0x5b
 8001fe8:	f000 f9eb 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001fec:	205b      	movs	r0, #91	; 0x5b
 8001fee:	f000 fa02 	bl	80023f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ff2:	e043      	b.n	800207c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <HAL_UART_MspInit+0x148>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d13e      	bne.n	800207c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ffe:	2304      	movs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002006:	f107 0318 	add.w	r3, r7, #24
 800200a:	4618      	mov	r0, r3
 800200c:	f002 f8ea 	bl	80041e4 <HAL_RCCEx_PeriphCLKConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002016:	f7ff fbe2 	bl	80017de <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_UART_MspInit+0x144>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_UART_MspInit+0x144>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_UART_MspInit+0x144>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_UART_MspInit+0x144>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_UART_MspInit+0x144>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_UART_MspInit+0x144>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RASP_USART3_TX_Pin|RASP_USART3_RX_Pin;
 800204a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800204e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800205c:	2307      	movs	r3, #7
 800205e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002064:	4619      	mov	r1, r3
 8002066:	480a      	ldr	r0, [pc, #40]	; (8002090 <HAL_UART_MspInit+0x14c>)
 8002068:	f000 faa0 	bl	80025ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2108      	movs	r1, #8
 8002070:	2027      	movs	r0, #39	; 0x27
 8002072:	f000 f9a6 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002076:	2027      	movs	r0, #39	; 0x27
 8002078:	f000 f9bd 	bl	80023f6 <HAL_NVIC_EnableIRQ>
}
 800207c:	bf00      	nop
 800207e:	3770      	adds	r7, #112	; 0x70
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40008000 	.word	0x40008000
 8002088:	40021000 	.word	0x40021000
 800208c:	40004800 	.word	0x40004800
 8002090:	48000400 	.word	0x48000400

08002094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002094:	480d      	ldr	r0, [pc, #52]	; (80020cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002096:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800209a:	490e      	ldr	r1, [pc, #56]	; (80020d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <LoopForever+0xe>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020b0:	4c0b      	ldr	r4, [pc, #44]	; (80020e0 <LoopForever+0x16>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020be:	f7ff fc99 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c2:	f007 f841 	bl	8009148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020c6:	f7ff fad9 	bl	800167c <main>

080020ca <LoopForever>:

LoopForever:
    b LoopForever
 80020ca:	e7fe      	b.n	80020ca <LoopForever>
  ldr   r0, =_estack
 80020cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d4:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80020d8:	0800a3c0 	.word	0x0800a3c0
  ldr r2, =_sbss
 80020dc:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80020e0:	2000454c 	.word	0x2000454c

080020e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC1_2_IRQHandler>

080020e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 f95b 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f6:	200f      	movs	r0, #15
 80020f8:	f000 f80e 	bl	8002118 <HAL_InitTick>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	71fb      	strb	r3, [r7, #7]
 8002106:	e001      	b.n	800210c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002108:	f7ff fb6e 	bl	80017e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800210c:	79fb      	ldrb	r3, [r7, #7]

}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_InitTick+0x68>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d022      	beq.n	8002172 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_InitTick+0x6c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_InitTick+0x68>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002138:	fbb1 f3f3 	udiv	r3, r1, r3
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f966 	bl	8002412 <HAL_SYSTICK_Config>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10f      	bne.n	800216c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	d809      	bhi.n	8002166 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002152:	2200      	movs	r2, #0
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	f04f 30ff 	mov.w	r0, #4294967295
 800215a:	f000 f932 	bl	80023c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_InitTick+0x70>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e007      	b.n	8002176 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	e004      	b.n	8002176 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e001      	b.n	8002176 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200000f0 	.word	0x200000f0
 8002184:	200000e8 	.word	0x200000e8
 8002188:	200000ec 	.word	0x200000ec

0800218c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_IncTick+0x1c>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_IncTick+0x20>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4413      	add	r3, r2
 800219a:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <HAL_IncTick+0x1c>)
 800219c:	6013      	str	r3, [r2, #0]
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	200003e4 	.word	0x200003e4
 80021ac:	200000f0 	.word	0x200000f0

080021b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	200003e4 	.word	0x200003e4

080021c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff ffee 	bl	80021b0 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d004      	beq.n	80021ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_Delay+0x40>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ec:	bf00      	nop
 80021ee:	f7ff ffdf 	bl	80021b0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d8f7      	bhi.n	80021ee <HAL_Delay+0x26>
  {
  }
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200000f0 	.word	0x200000f0

0800220c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <__NVIC_GetPriorityGrouping+0x18>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0307 	and.w	r3, r3, #7
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db0b      	blt.n	800229a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <__NVIC_EnableIRQ+0x38>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f7ff ff8e 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff29 	bl	800220c <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff40 	bl	8002254 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff90 	bl	8002300 <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5f 	bl	80022ac <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff33 	bl	8002270 <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa4 	bl	8002368 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d005      	beq.n	800244e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2204      	movs	r2, #4
 8002446:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e037      	b.n	80024be <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 020e 	bic.w	r2, r2, #14
 800245c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800246c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f003 021f 	and.w	r2, r3, #31
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800249a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00c      	beq.n	80024be <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024b2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024bc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d00d      	beq.n	8002510 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2204      	movs	r2, #4
 80024f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e047      	b.n	80025a0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 020e 	bic.w	r2, r2, #14
 800251e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800253e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	2101      	movs	r1, #1
 800254e:	fa01 f202 	lsl.w	r2, r1, r2
 8002552:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800255c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00c      	beq.n	8002580 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002574:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800257e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
    }
  }
  return status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025ba:	e15a      	b.n	8002872 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2101      	movs	r1, #1
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 814c 	beq.w	800286c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d005      	beq.n	80025ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d130      	bne.n	800264e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002622:	2201      	movs	r2, #1
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 0201 	and.w	r2, r3, #1
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b03      	cmp	r3, #3
 8002658:	d017      	beq.n	800268a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d123      	bne.n	80026de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	08da      	lsrs	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3208      	adds	r2, #8
 800269e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	220f      	movs	r2, #15
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	08da      	lsrs	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3208      	adds	r2, #8
 80026d8:	6939      	ldr	r1, [r7, #16]
 80026da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0203 	and.w	r2, r3, #3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80a6 	beq.w	800286c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002720:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <HAL_GPIO_Init+0x2e4>)
 8002722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002724:	4a5a      	ldr	r2, [pc, #360]	; (8002890 <HAL_GPIO_Init+0x2e4>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6613      	str	r3, [r2, #96]	; 0x60
 800272c:	4b58      	ldr	r3, [pc, #352]	; (8002890 <HAL_GPIO_Init+0x2e4>)
 800272e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002738:	4a56      	ldr	r2, [pc, #344]	; (8002894 <HAL_GPIO_Init+0x2e8>)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002762:	d01f      	beq.n	80027a4 <HAL_GPIO_Init+0x1f8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <HAL_GPIO_Init+0x2ec>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d019      	beq.n	80027a0 <HAL_GPIO_Init+0x1f4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a4b      	ldr	r2, [pc, #300]	; (800289c <HAL_GPIO_Init+0x2f0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_GPIO_Init+0x1f0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a4a      	ldr	r2, [pc, #296]	; (80028a0 <HAL_GPIO_Init+0x2f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00d      	beq.n	8002798 <HAL_GPIO_Init+0x1ec>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a49      	ldr	r2, [pc, #292]	; (80028a4 <HAL_GPIO_Init+0x2f8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d007      	beq.n	8002794 <HAL_GPIO_Init+0x1e8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a48      	ldr	r2, [pc, #288]	; (80028a8 <HAL_GPIO_Init+0x2fc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_GPIO_Init+0x1e4>
 800278c:	2305      	movs	r3, #5
 800278e:	e00a      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 8002790:	2306      	movs	r3, #6
 8002792:	e008      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 8002794:	2304      	movs	r3, #4
 8002796:	e006      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 8002798:	2303      	movs	r3, #3
 800279a:	e004      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 800279c:	2302      	movs	r3, #2
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 80027a4:	2300      	movs	r3, #0
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	f002 0203 	and.w	r2, r2, #3
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	4093      	lsls	r3, r2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b6:	4937      	ldr	r1, [pc, #220]	; (8002894 <HAL_GPIO_Init+0x2e8>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_GPIO_Init+0x300>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027e8:	4a30      	ldr	r2, [pc, #192]	; (80028ac <HAL_GPIO_Init+0x300>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ee:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_GPIO_Init+0x300>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002812:	4a26      	ldr	r2, [pc, #152]	; (80028ac <HAL_GPIO_Init+0x300>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002818:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_GPIO_Init+0x300>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_GPIO_Init+0x300>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_GPIO_Init+0x300>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002866:	4a11      	ldr	r2, [pc, #68]	; (80028ac <HAL_GPIO_Init+0x300>)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f ae9d 	bne.w	80025bc <HAL_GPIO_Init+0x10>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000
 8002894:	40010000 	.word	0x40010000
 8002898:	48000400 	.word	0x48000400
 800289c:	48000800 	.word	0x48000800
 80028a0:	48000c00 	.word	0x48000c00
 80028a4:	48001000 	.word	0x48001000
 80028a8:	48001400 	.word	0x48001400
 80028ac:	40010400 	.word	0x40010400

080028b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80028be:	e0bd      	b.n	8002a3c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80028c0:	2201      	movs	r2, #1
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80b0 	beq.w	8002a36 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80028d6:	4a60      	ldr	r2, [pc, #384]	; (8002a58 <HAL_GPIO_DeInit+0x1a8>)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4013      	ands	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028fe:	d01f      	beq.n	8002940 <HAL_GPIO_DeInit+0x90>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a56      	ldr	r2, [pc, #344]	; (8002a5c <HAL_GPIO_DeInit+0x1ac>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d019      	beq.n	800293c <HAL_GPIO_DeInit+0x8c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a55      	ldr	r2, [pc, #340]	; (8002a60 <HAL_GPIO_DeInit+0x1b0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_GPIO_DeInit+0x88>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a54      	ldr	r2, [pc, #336]	; (8002a64 <HAL_GPIO_DeInit+0x1b4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00d      	beq.n	8002934 <HAL_GPIO_DeInit+0x84>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a53      	ldr	r2, [pc, #332]	; (8002a68 <HAL_GPIO_DeInit+0x1b8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_DeInit+0x80>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a52      	ldr	r2, [pc, #328]	; (8002a6c <HAL_GPIO_DeInit+0x1bc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_GPIO_DeInit+0x7c>
 8002928:	2305      	movs	r3, #5
 800292a:	e00a      	b.n	8002942 <HAL_GPIO_DeInit+0x92>
 800292c:	2306      	movs	r3, #6
 800292e:	e008      	b.n	8002942 <HAL_GPIO_DeInit+0x92>
 8002930:	2304      	movs	r3, #4
 8002932:	e006      	b.n	8002942 <HAL_GPIO_DeInit+0x92>
 8002934:	2303      	movs	r3, #3
 8002936:	e004      	b.n	8002942 <HAL_GPIO_DeInit+0x92>
 8002938:	2302      	movs	r3, #2
 800293a:	e002      	b.n	8002942 <HAL_GPIO_DeInit+0x92>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_GPIO_DeInit+0x92>
 8002940:	2300      	movs	r3, #0
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	f002 0203 	and.w	r2, r2, #3
 8002948:	0092      	lsls	r2, r2, #2
 800294a:	4093      	lsls	r3, r2
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	429a      	cmp	r2, r3
 8002950:	d132      	bne.n	80029b8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_GPIO_DeInit+0x1c0>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	4945      	ldr	r1, [pc, #276]	; (8002a70 <HAL_GPIO_DeInit+0x1c0>)
 800295c:	4013      	ands	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002960:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <HAL_GPIO_DeInit+0x1c0>)
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	43db      	mvns	r3, r3
 8002968:	4941      	ldr	r1, [pc, #260]	; (8002a70 <HAL_GPIO_DeInit+0x1c0>)
 800296a:	4013      	ands	r3, r2
 800296c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800296e:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <HAL_GPIO_DeInit+0x1c0>)
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	493e      	ldr	r1, [pc, #248]	; (8002a70 <HAL_GPIO_DeInit+0x1c0>)
 8002978:	4013      	ands	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800297c:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <HAL_GPIO_DeInit+0x1c0>)
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	493a      	ldr	r1, [pc, #232]	; (8002a70 <HAL_GPIO_DeInit+0x1c0>)
 8002986:	4013      	ands	r3, r2
 8002988:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800299a:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <HAL_GPIO_DeInit+0x1a8>)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3302      	adds	r3, #2
 80029a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43da      	mvns	r2, r3
 80029aa:	482b      	ldr	r0, [pc, #172]	; (8002a58 <HAL_GPIO_DeInit+0x1a8>)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	400a      	ands	r2, r1
 80029b2:	3302      	adds	r3, #2
 80029b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	2103      	movs	r1, #3
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	08da      	lsrs	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3208      	adds	r2, #8
 80029d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	220f      	movs	r2, #15
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	08d2      	lsrs	r2, r2, #3
 80029ec:	4019      	ands	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3208      	adds	r2, #8
 80029f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2103      	movs	r1, #3
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	2101      	movs	r1, #1
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2103      	movs	r1, #3
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	401a      	ands	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f47f af3b 	bne.w	80028c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	48000400 	.word	0x48000400
 8002a60:	48000800 	.word	0x48000800
 8002a64:	48000c00 	.word	0x48000c00
 8002a68:	48001000 	.word	0x48001000
 8002a6c:	48001400 	.word	0x48001400
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
 8002a80:	4613      	mov	r3, r2
 8002a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a84:	787b      	ldrb	r3, [r7, #1]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a90:	e002      	b.n	8002a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e081      	b.n	8002bba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fcf2 	bl	80014b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	; 0x24
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002af4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d107      	bne.n	8002b1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	e006      	b.n	8002b2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d104      	bne.n	8002b3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69d9      	ldr	r1, [r3, #28]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1a      	ldr	r2, [r3, #32]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e021      	b.n	8002c18 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2224      	movs	r2, #36	; 0x24
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7fe fcd7 	bl	80015a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	817b      	strh	r3, [r7, #10]
 8002c30:	4613      	mov	r3, r2
 8002c32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	f040 80da 	bne.w	8002df6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_I2C_Master_Transmit+0x30>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0d3      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c58:	f7ff faaa 	bl	80021b0 <HAL_GetTick>
 8002c5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2319      	movs	r3, #25
 8002c64:	2201      	movs	r2, #1
 8002c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f9e6 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0be      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2221      	movs	r2, #33	; 0x21
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2210      	movs	r2, #16
 8002c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	893a      	ldrh	r2, [r7, #8]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2bff      	cmp	r3, #255	; 0xff
 8002caa:	d90e      	bls.n	8002cca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	22ff      	movs	r2, #255	; 0xff
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	8979      	ldrh	r1, [r7, #10]
 8002cba:	4b51      	ldr	r3, [pc, #324]	; (8002e00 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fbdc 	bl	8003480 <I2C_TransferConfig>
 8002cc8:	e06c      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	8979      	ldrh	r1, [r7, #10]
 8002cdc:	4b48      	ldr	r3, [pc, #288]	; (8002e00 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fbcb 	bl	8003480 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002cea:	e05b      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	6a39      	ldr	r1, [r7, #32]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f9e3 	bl	80030bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e07b      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d034      	beq.n	8002da4 <HAL_I2C_Master_Transmit+0x184>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d130      	bne.n	8002da4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f975 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e04d      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2bff      	cmp	r3, #255	; 0xff
 8002d64:	d90e      	bls.n	8002d84 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	22ff      	movs	r2, #255	; 0xff
 8002d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	8979      	ldrh	r1, [r7, #10]
 8002d74:	2300      	movs	r3, #0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fb7f 	bl	8003480 <I2C_TransferConfig>
 8002d82:	e00f      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	8979      	ldrh	r1, [r7, #10]
 8002d96:	2300      	movs	r3, #0
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fb6e 	bl	8003480 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d19e      	bne.n	8002cec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f9c2 	bl	800313c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e01a      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_I2C_Master_Transmit+0x1e4>)
 8002dd6:	400b      	ands	r3, r1
 8002dd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	80002000 	.word	0x80002000
 8002e04:	fe00e800 	.word	0xfe00e800

08002e08 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	460b      	mov	r3, r1
 8002e16:	817b      	strh	r3, [r7, #10]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	f040 80db 	bne.w	8002fe0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_I2C_Master_Receive+0x30>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e0d4      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e40:	f7ff f9b6 	bl	80021b0 <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2319      	movs	r3, #25
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f8f2 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0bf      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2222      	movs	r2, #34	; 0x22
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	893a      	ldrh	r2, [r7, #8]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2bff      	cmp	r3, #255	; 0xff
 8002e92:	d90e      	bls.n	8002eb2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	4b52      	ldr	r3, [pc, #328]	; (8002fec <HAL_I2C_Master_Receive+0x1e4>)
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fae8 	bl	8003480 <I2C_TransferConfig>
 8002eb0:	e06d      	b.n	8002f8e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8979      	ldrh	r1, [r7, #10]
 8002ec4:	4b49      	ldr	r3, [pc, #292]	; (8002fec <HAL_I2C_Master_Receive+0x1e4>)
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fad7 	bl	8003480 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ed2:	e05c      	b.n	8002f8e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	6a39      	ldr	r1, [r7, #32]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f96b 	bl	80031b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e07c      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d034      	beq.n	8002f8e <HAL_I2C_Master_Receive+0x186>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d130      	bne.n	8002f8e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f880 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e04d      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2bff      	cmp	r3, #255	; 0xff
 8002f4e:	d90e      	bls.n	8002f6e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	22ff      	movs	r2, #255	; 0xff
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	8979      	ldrh	r1, [r7, #10]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fa8a 	bl	8003480 <I2C_TransferConfig>
 8002f6c:	e00f      	b.n	8002f8e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	8979      	ldrh	r1, [r7, #10]
 8002f80:	2300      	movs	r3, #0
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fa79 	bl	8003480 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d19d      	bne.n	8002ed4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	6a39      	ldr	r1, [r7, #32]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f8cd 	bl	800313c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e01a      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_I2C_Master_Receive+0x1e8>)
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	80002400 	.word	0x80002400
 8002ff0:	fe00e800 	.word	0xfe00e800

08002ff4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d103      	bne.n	8003012 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2200      	movs	r2, #0
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d007      	beq.n	8003030 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	619a      	str	r2, [r3, #24]
  }
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800304c:	e022      	b.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d01e      	beq.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003056:	f7ff f8ab 	bl	80021b0 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d113      	bne.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e00f      	b.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d0cd      	beq.n	800304e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030c8:	e02c      	b.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f8ea 	bl	80032a8 <I2C_IsErrorOccurred>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e02a      	b.n	8003134 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d01e      	beq.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7ff f863 	bl	80021b0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d113      	bne.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e007      	b.n	8003134 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d1cb      	bne.n	80030ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003148:	e028      	b.n	800319c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f8aa 	bl	80032a8 <I2C_IsErrorOccurred>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e026      	b.n	80031ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7ff f827 	bl	80021b0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d113      	bne.n	800319c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e007      	b.n	80031ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d1cf      	bne.n	800314a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031c0:	e064      	b.n	800328c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f86e 	bl	80032a8 <I2C_IsErrorOccurred>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e062      	b.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d138      	bne.n	8003256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d105      	bne.n	80031fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e04e      	b.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b10      	cmp	r3, #16
 800320a:	d107      	bne.n	800321c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2210      	movs	r2, #16
 8003212:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2204      	movs	r2, #4
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
 800321a:	e002      	b.n	8003222 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2220      	movs	r2, #32
 8003228:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003236:	400b      	ands	r3, r1
 8003238:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e022      	b.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003256:	f7fe ffab 	bl	80021b0 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	429a      	cmp	r2, r3
 8003264:	d302      	bcc.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	f043 0220 	orr.w	r2, r3, #32
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e007      	b.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d193      	bne.n	80031c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	fe00e800 	.word	0xfe00e800

080032a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d075      	beq.n	80033c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2210      	movs	r2, #16
 80032da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032dc:	e056      	b.n	800338c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d052      	beq.n	800338c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032e6:	f7fe ff63 	bl	80021b0 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <I2C_IsErrorOccurred+0x54>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d147      	bne.n	800338c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003306:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800330e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331e:	d12e      	bne.n	800337e <I2C_IsErrorOccurred+0xd6>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003326:	d02a      	beq.n	800337e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	2b20      	cmp	r3, #32
 800332c:	d027      	beq.n	800337e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800333c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800333e:	f7fe ff37 	bl	80021b0 <HAL_GetTick>
 8003342:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003344:	e01b      	b.n	800337e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003346:	f7fe ff33 	bl	80021b0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b19      	cmp	r3, #25
 8003352:	d914      	bls.n	800337e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b20      	cmp	r3, #32
 800338a:	d1dc      	bne.n	8003346 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b20      	cmp	r3, #32
 8003398:	d003      	beq.n	80033a2 <I2C_IsErrorOccurred+0xfa>
 800339a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d09d      	beq.n	80032de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2220      	movs	r2, #32
 80033b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	f043 0308 	orr.w	r3, r3, #8
 80033fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003404:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003426:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800342e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01c      	beq.n	8003470 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff fddc 	bl	8002ff4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <I2C_IsErrorOccurred+0x1d4>)
 8003448:	400b      	ands	r3, r1
 800344a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	431a      	orrs	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003474:	4618      	mov	r0, r3
 8003476:	3728      	adds	r7, #40	; 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	fe00e800 	.word	0xfe00e800

08003480 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	4613      	mov	r3, r2
 8003490:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003498:	7a7b      	ldrb	r3, [r7, #9]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034a0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034ae:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	0d5b      	lsrs	r3, r3, #21
 80034ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <I2C_TransferConfig+0x60>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	43db      	mvns	r3, r3
 80034c4:	ea02 0103 	and.w	r1, r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	03ff63ff 	.word	0x03ff63ff

080034e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d138      	bne.n	800356c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003504:	2302      	movs	r3, #2
 8003506:	e032      	b.n	800356e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	; 0x24
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003536:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b20      	cmp	r3, #32
 800358e:	d139      	bne.n	8003604 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800359a:	2302      	movs	r3, #2
 800359c:	e033      	b.n	8003606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2224      	movs	r2, #36	; 0x24
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d141      	bne.n	80036a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003622:	4b4b      	ldr	r3, [pc, #300]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800362a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362e:	d131      	bne.n	8003694 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003630:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003636:	4a46      	ldr	r2, [pc, #280]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800363c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003640:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003648:	4a41      	ldr	r2, [pc, #260]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800364e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003650:	4b40      	ldr	r3, [pc, #256]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2232      	movs	r2, #50	; 0x32
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	4a3f      	ldr	r2, [pc, #252]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	0c9b      	lsrs	r3, r3, #18
 8003662:	3301      	adds	r3, #1
 8003664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003666:	e002      	b.n	800366e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3b01      	subs	r3, #1
 800366c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367a:	d102      	bne.n	8003682 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f2      	bne.n	8003668 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003682:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d158      	bne.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e057      	b.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369a:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036a4:	e04d      	b.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ac:	d141      	bne.n	8003732 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ae:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d131      	bne.n	8003720 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036bc:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036cc:	4b20      	ldr	r3, [pc, #128]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036d4:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036dc:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2232      	movs	r2, #50	; 0x32
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	0c9b      	lsrs	r3, r3, #18
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f2:	e002      	b.n	80036fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036fa:	4b15      	ldr	r3, [pc, #84]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003706:	d102      	bne.n	800370e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f2      	bne.n	80036f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371a:	d112      	bne.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e011      	b.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003730:	e007      	b.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373a:	4a05      	ldr	r2, [pc, #20]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003740:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	40007000 	.word	0x40007000
 8003754:	200000e8 	.word	0x200000e8
 8003758:	431bde83 	.word	0x431bde83

0800375c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800376a:	6093      	str	r3, [r2, #8]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40007000 	.word	0x40007000

0800377c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e306      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d075      	beq.n	8003886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379a:	4b97      	ldr	r3, [pc, #604]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a4:	4b94      	ldr	r3, [pc, #592]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_OscConfig+0x3e>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_OscConfig+0x44>
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d10b      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	4b8d      	ldr	r3, [pc, #564]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05b      	beq.n	8003884 <HAL_RCC_OscConfig+0x108>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d157      	bne.n	8003884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e2e1      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x74>
 80037e2:	4b85      	ldr	r3, [pc, #532]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a84      	ldr	r2, [pc, #528]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e01d      	b.n	800382c <HAL_RCC_OscConfig+0xb0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x98>
 80037fa:	4b7f      	ldr	r3, [pc, #508]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7e      	ldr	r2, [pc, #504]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b7c      	ldr	r3, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a7b      	ldr	r2, [pc, #492]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0xb0>
 8003814:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a77      	ldr	r2, [pc, #476]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b75      	ldr	r3, [pc, #468]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a74      	ldr	r2, [pc, #464]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe fcbc 	bl	80021b0 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fe fcb8 	bl	80021b0 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e2a6      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384e:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0xc0>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fca8 	bl	80021b0 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7fe fca4 	bl	80021b0 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e292      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003876:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0xe8>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d075      	beq.n	800397e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003892:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389c:	4b56      	ldr	r3, [pc, #344]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d102      	bne.n	80038b2 <HAL_RCC_OscConfig+0x136>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_OscConfig+0x13c>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d11f      	bne.n	80038f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b8:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_OscConfig+0x154>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e265      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	4946      	ldr	r1, [pc, #280]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038e4:	4b45      	ldr	r3, [pc, #276]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fc15 	bl	8002118 <HAL_InitTick>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d043      	beq.n	800397c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e251      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d023      	beq.n	8003948 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003900:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a3c      	ldr	r2, [pc, #240]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe fc50 	bl	80021b0 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003914:	f7fe fc4c 	bl	80021b0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e23a      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	061b      	lsls	r3, r3, #24
 8003940:	492d      	ldr	r1, [pc, #180]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
 8003946:	e01a      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800394e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe fc2c 	bl	80021b0 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395c:	f7fe fc28 	bl	80021b0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e216      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x1e0>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d041      	beq.n	8003a0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01c      	beq.n	80039cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003998:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7fe fc05 	bl	80021b0 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039aa:	f7fe fc01 	bl	80021b0 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e1ef      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ef      	beq.n	80039aa <HAL_RCC_OscConfig+0x22e>
 80039ca:	e020      	b.n	8003a0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fe fbe8 	bl	80021b0 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e2:	e00d      	b.n	8003a00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fe fbe4 	bl	80021b0 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d906      	bls.n	8003a00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e1d2      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	200000ec 	.word	0x200000ec
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a00:	4b8c      	ldr	r3, [pc, #560]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ea      	bne.n	80039e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a6 	beq.w	8003b68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a20:	4b84      	ldr	r3, [pc, #528]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2b4>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x2b6>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	4b7f      	ldr	r3, [pc, #508]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4a7e      	ldr	r2, [pc, #504]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
 8003a42:	4b7c      	ldr	r3, [pc, #496]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a52:	4b79      	ldr	r3, [pc, #484]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d118      	bne.n	8003a90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5e:	4b76      	ldr	r3, [pc, #472]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a75      	ldr	r2, [pc, #468]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6a:	f7fe fba1 	bl	80021b0 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a72:	f7fe fb9d 	bl	80021b0 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e18b      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a84:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d108      	bne.n	8003aaa <HAL_RCC_OscConfig+0x32e>
 8003a98:	4b66      	ldr	r3, [pc, #408]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa8:	e024      	b.n	8003af4 <HAL_RCC_OscConfig+0x378>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d110      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x358>
 8003ab2:	4b60      	ldr	r3, [pc, #384]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	4a5e      	ldr	r2, [pc, #376]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aba:	f043 0304 	orr.w	r3, r3, #4
 8003abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac2:	4b5c      	ldr	r3, [pc, #368]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	4a5a      	ldr	r2, [pc, #360]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad2:	e00f      	b.n	8003af4 <HAL_RCC_OscConfig+0x378>
 8003ad4:	4b57      	ldr	r3, [pc, #348]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	4a56      	ldr	r2, [pc, #344]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae4:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	4a52      	ldr	r2, [pc, #328]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d016      	beq.n	8003b2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fe fb58 	bl	80021b0 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fe fb54 	bl	80021b0 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e140      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ed      	beq.n	8003b04 <HAL_RCC_OscConfig+0x388>
 8003b28:	e015      	b.n	8003b56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fe fb41 	bl	80021b0 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fe fb3d 	bl	80021b0 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e129      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ed      	bne.n	8003b32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b56:	7ffb      	ldrb	r3, [r7, #31]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	4a34      	ldr	r2, [pc, #208]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d03c      	beq.n	8003bee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01c      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b7c:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b82:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fe fb10 	bl	80021b0 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b94:	f7fe fb0c 	bl	80021b0 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0fa      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ef      	beq.n	8003b94 <HAL_RCC_OscConfig+0x418>
 8003bb4:	e01b      	b.n	8003bee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7fe faf3 	bl	80021b0 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bce:	f7fe faef 	bl	80021b0 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0dd      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1ef      	bne.n	8003bce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80d1 	beq.w	8003d9a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	f000 808b 	beq.w	8003d1c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d15e      	bne.n	8003ccc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fe fac9 	bl	80021b0 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c20:	e00c      	b.n	8003c3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fe fac5 	bl	80021b0 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d905      	bls.n	8003c3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0b3      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3c:	4b59      	ldr	r3, [pc, #356]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ec      	bne.n	8003c22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c48:	4b56      	ldr	r3, [pc, #344]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_OscConfig+0x62c>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6a11      	ldr	r1, [r2, #32]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c62:	0212      	lsls	r2, r2, #8
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c6a:	0852      	lsrs	r2, r2, #1
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0552      	lsls	r2, r2, #21
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c76:	0852      	lsrs	r2, r2, #1
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	0652      	lsls	r2, r2, #25
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c82:	06d2      	lsls	r2, r2, #27
 8003c84:	430a      	orrs	r2, r1
 8003c86:	4947      	ldr	r1, [pc, #284]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b45      	ldr	r3, [pc, #276]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a44      	ldr	r2, [pc, #272]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c98:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a41      	ldr	r2, [pc, #260]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fa84 	bl	80021b0 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe fa80 	bl	80021b0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e06e      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	4b39      	ldr	r3, [pc, #228]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x530>
 8003cca:	e066      	b.n	8003d9a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ccc:	4b35      	ldr	r3, [pc, #212]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cd8:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a31      	ldr	r2, [pc, #196]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ce4:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a2e      	ldr	r2, [pc, #184]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003cea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fa5c 	bl	80021b0 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fe fa58 	bl	80021b0 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e046      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0e:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x580>
 8003d1a:	e03e      	b.n	8003d9a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e039      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d28:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <HAL_RCC_OscConfig+0x628>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 0203 	and.w	r2, r3, #3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d12c      	bne.n	8003d96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	3b01      	subs	r3, #1
 8003d48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d123      	bne.n	8003d96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d11b      	bne.n	8003d96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d113      	bne.n	8003d96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d109      	bne.n	8003d96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000
 8003da8:	019f800c 	.word	0x019f800c

08003dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e11e      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b91      	ldr	r3, [pc, #580]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d910      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b8e      	ldr	r3, [pc, #568]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	498c      	ldr	r1, [pc, #560]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b8a      	ldr	r3, [pc, #552]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e106      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d073      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d129      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e08:	4b81      	ldr	r3, [pc, #516]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0f4      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e18:	f000 f99e 	bl	8004158 <RCC_GetSysClockFreqFromPLLSource>
 8003e1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4a7c      	ldr	r2, [pc, #496]	; (8004014 <HAL_RCC_ClockConfig+0x268>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d93f      	bls.n	8003ea6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e26:	4b7a      	ldr	r3, [pc, #488]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d033      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d12f      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e46:	4b72      	ldr	r3, [pc, #456]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e4e:	4a70      	ldr	r2, [pc, #448]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e024      	b.n	8003ea6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e64:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d109      	bne.n	8003e84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0c6      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e74:	4b66      	ldr	r3, [pc, #408]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0be      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e84:	f000 f8ce 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4a61      	ldr	r2, [pc, #388]	; (8004014 <HAL_RCC_ClockConfig+0x268>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d909      	bls.n	8003ea6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e92:	4b5f      	ldr	r3, [pc, #380]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9a:	4a5d      	ldr	r2, [pc, #372]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ea6:	4b5a      	ldr	r3, [pc, #360]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f023 0203 	bic.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4957      	ldr	r1, [pc, #348]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb8:	f7fe f97a 	bl	80021b0 <HAL_GetTick>
 8003ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec0:	f7fe f976 	bl	80021b0 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e095      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed6:	4b4e      	ldr	r3, [pc, #312]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 020c 	and.w	r2, r3, #12
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d1eb      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d023      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f00:	4b43      	ldr	r3, [pc, #268]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a42      	ldr	r2, [pc, #264]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f18:	4b3d      	ldr	r3, [pc, #244]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f20:	4a3b      	ldr	r2, [pc, #236]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b39      	ldr	r3, [pc, #228]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4936      	ldr	r1, [pc, #216]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b80      	cmp	r3, #128	; 0x80
 8003f40:	d105      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f42:	4b33      	ldr	r3, [pc, #204]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4a32      	ldr	r2, [pc, #200]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003f48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d21d      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5c:	4b2b      	ldr	r3, [pc, #172]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 020f 	bic.w	r2, r3, #15
 8003f64:	4929      	ldr	r1, [pc, #164]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f6c:	f7fe f920 	bl	80021b0 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	e00a      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f74:	f7fe f91c 	bl	80021b0 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e03b      	b.n	8004002 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1ed      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4917      	ldr	r1, [pc, #92]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490f      	ldr	r1, [pc, #60]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fd6:	f000 f825 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <HAL_RCC_ClockConfig+0x264>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490c      	ldr	r1, [pc, #48]	; (8004018 <HAL_RCC_ClockConfig+0x26c>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <HAL_RCC_ClockConfig+0x270>)
 8003ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_RCC_ClockConfig+0x274>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe f88c 	bl	8002118 <HAL_InitTick>
 8004000:	4603      	mov	r3, r0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40022000 	.word	0x40022000
 8004010:	40021000 	.word	0x40021000
 8004014:	04c4b400 	.word	0x04c4b400
 8004018:	0800a2d8 	.word	0x0800a2d8
 800401c:	200000e8 	.word	0x200000e8
 8004020:	200000ec 	.word	0x200000ec

08004024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800402a:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b04      	cmp	r3, #4
 8004034:	d102      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004036:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e047      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800403c:	4b27      	ldr	r3, [pc, #156]	; (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b08      	cmp	r3, #8
 8004046:	d102      	bne.n	800404e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004048:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	e03e      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800404e:	4b23      	ldr	r3, [pc, #140]	; (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b0c      	cmp	r3, #12
 8004058:	d136      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004064:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	3301      	adds	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d10c      	bne.n	8004092 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004078:	4a1a      	ldr	r2, [pc, #104]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	4a16      	ldr	r2, [pc, #88]	; (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004082:	68d2      	ldr	r2, [r2, #12]
 8004084:	0a12      	lsrs	r2, r2, #8
 8004086:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	617b      	str	r3, [r7, #20]
      break;
 8004090:	e00c      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004092:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	fbb2 f3f3 	udiv	r3, r2, r3
 800409a:	4a10      	ldr	r2, [pc, #64]	; (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800409c:	68d2      	ldr	r2, [r2, #12]
 800409e:	0a12      	lsrs	r2, r2, #8
 80040a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
      break;
 80040aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	0e5b      	lsrs	r3, r3, #25
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	3301      	adds	r3, #1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	e001      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040cc:	693b      	ldr	r3, [r7, #16]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
 80040e0:	00f42400 	.word	0x00f42400
 80040e4:	016e3600 	.word	0x016e3600

080040e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	200000e8 	.word	0x200000e8

08004100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004104:	f7ff fff0 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4904      	ldr	r1, [pc, #16]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000
 8004128:	0800a2e8 	.word	0x0800a2e8

0800412c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004130:	f7ff ffda 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0adb      	lsrs	r3, r3, #11
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4904      	ldr	r1, [pc, #16]	; (8004154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	0800a2e8 	.word	0x0800a2e8

08004158 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	3301      	adds	r3, #1
 8004174:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d10c      	bne.n	8004196 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800417c:	4a17      	ldr	r2, [pc, #92]	; (80041dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004186:	68d2      	ldr	r2, [r2, #12]
 8004188:	0a12      	lsrs	r2, r2, #8
 800418a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	617b      	str	r3, [r7, #20]
    break;
 8004194:	e00c      	b.n	80041b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004196:	4a12      	ldr	r2, [pc, #72]	; (80041e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	fbb2 f3f3 	udiv	r3, r2, r3
 800419e:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041a0:	68d2      	ldr	r2, [r2, #12]
 80041a2:	0a12      	lsrs	r2, r2, #8
 80041a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041a8:	fb02 f303 	mul.w	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]
    break;
 80041ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	0e5b      	lsrs	r3, r3, #25
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	3301      	adds	r3, #1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041ca:	687b      	ldr	r3, [r7, #4]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40021000 	.word	0x40021000
 80041dc:	016e3600 	.word	0x016e3600
 80041e0:	00f42400 	.word	0x00f42400

080041e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041ec:	2300      	movs	r3, #0
 80041ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041f0:	2300      	movs	r3, #0
 80041f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8098 	beq.w	8004332 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004206:	4b43      	ldr	r3, [pc, #268]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10d      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	4b40      	ldr	r3, [pc, #256]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	4a3f      	ldr	r2, [pc, #252]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421c:	6593      	str	r3, [r2, #88]	; 0x58
 800421e:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800422a:	2301      	movs	r3, #1
 800422c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800422e:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a39      	ldr	r2, [pc, #228]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004238:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800423a:	f7fd ffb9 	bl	80021b0 <HAL_GetTick>
 800423e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004240:	e009      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004242:	f7fd ffb5 	bl	80021b0 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d902      	bls.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	74fb      	strb	r3, [r7, #19]
        break;
 8004254:	e005      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004256:	4b30      	ldr	r3, [pc, #192]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0ef      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d159      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004268:	4b2a      	ldr	r3, [pc, #168]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004272:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01e      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	429a      	cmp	r2, r3
 8004282:	d019      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004284:	4b23      	ldr	r3, [pc, #140]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004290:	4b20      	ldr	r3, [pc, #128]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042b0:	4a18      	ldr	r2, [pc, #96]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c2:	f7fd ff75 	bl	80021b0 <HAL_GetTick>
 80042c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c8:	e00b      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fd ff71 	bl	80021b0 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d8:	4293      	cmp	r3, r2
 80042da:	d902      	bls.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	74fb      	strb	r3, [r7, #19]
            break;
 80042e0:	e006      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ec      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	4903      	ldr	r1, [pc, #12]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800430c:	e008      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800430e:	7cfb      	ldrb	r3, [r7, #19]
 8004310:	74bb      	strb	r3, [r7, #18]
 8004312:	e005      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004314:	40021000 	.word	0x40021000
 8004318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	7cfb      	ldrb	r3, [r7, #19]
 800431e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004320:	7c7b      	ldrb	r3, [r7, #17]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4ba6      	ldr	r3, [pc, #664]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	4aa5      	ldr	r2, [pc, #660]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004330:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800433e:	4ba0      	ldr	r3, [pc, #640]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f023 0203 	bic.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	499c      	ldr	r1, [pc, #624]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004360:	4b97      	ldr	r3, [pc, #604]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 020c 	bic.w	r2, r3, #12
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4994      	ldr	r1, [pc, #592]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004382:	4b8f      	ldr	r3, [pc, #572]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	498b      	ldr	r1, [pc, #556]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043a4:	4b86      	ldr	r3, [pc, #536]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4983      	ldr	r1, [pc, #524]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043c6:	4b7e      	ldr	r3, [pc, #504]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	497a      	ldr	r1, [pc, #488]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043e8:	4b75      	ldr	r3, [pc, #468]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	4972      	ldr	r1, [pc, #456]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800440a:	4b6d      	ldr	r3, [pc, #436]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	4969      	ldr	r1, [pc, #420]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800442c:	4b64      	ldr	r3, [pc, #400]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	4961      	ldr	r1, [pc, #388]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800444e:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	4958      	ldr	r1, [pc, #352]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	2b00      	cmp	r3, #0
 800446e:	d015      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004470:	4b53      	ldr	r3, [pc, #332]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	4950      	ldr	r1, [pc, #320]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800448e:	d105      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004490:	4b4b      	ldr	r3, [pc, #300]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a4a      	ldr	r2, [pc, #296]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800449a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d015      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044a8:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	4942      	ldr	r1, [pc, #264]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c6:	d105      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c8:	4b3d      	ldr	r3, [pc, #244]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a3c      	ldr	r2, [pc, #240]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044e0:	4b37      	ldr	r3, [pc, #220]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	4934      	ldr	r1, [pc, #208]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004500:	4b2f      	ldr	r3, [pc, #188]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a2e      	ldr	r2, [pc, #184]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004518:	4b29      	ldr	r3, [pc, #164]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	4926      	ldr	r1, [pc, #152]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004536:	d105      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004538:	4b21      	ldr	r3, [pc, #132]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a20      	ldr	r2, [pc, #128]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004542:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004550:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	4918      	ldr	r1, [pc, #96]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800456e:	d105      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004570:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d015      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	490a      	ldr	r1, [pc, #40]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045a6:	d105      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80045b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000

080045c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e049      	b.n	800466a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fd fb68 	bl	8001cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f000 fcd8 	bl	8004fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e049      	b.n	8004718 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f841 	bl	8004720 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f000 fc81 	bl	8004fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <HAL_TIM_PWM_Start+0x24>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e03c      	b.n	80047d2 <HAL_TIM_PWM_Start+0x9e>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b04      	cmp	r3, #4
 800475c:	d109      	bne.n	8004772 <HAL_TIM_PWM_Start+0x3e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b01      	cmp	r3, #1
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	e02f      	b.n	80047d2 <HAL_TIM_PWM_Start+0x9e>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d109      	bne.n	800478c <HAL_TIM_PWM_Start+0x58>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e022      	b.n	80047d2 <HAL_TIM_PWM_Start+0x9e>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d109      	bne.n	80047a6 <HAL_TIM_PWM_Start+0x72>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	bf14      	ite	ne
 800479e:	2301      	movne	r3, #1
 80047a0:	2300      	moveq	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	e015      	b.n	80047d2 <HAL_TIM_PWM_Start+0x9e>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d109      	bne.n	80047c0 <HAL_TIM_PWM_Start+0x8c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e008      	b.n	80047d2 <HAL_TIM_PWM_Start+0x9e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e097      	b.n	800490a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <HAL_TIM_PWM_Start+0xb6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	e023      	b.n	8004832 <HAL_TIM_PWM_Start+0xfe>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_PWM_Start+0xc6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	e01b      	b.n	8004832 <HAL_TIM_PWM_Start+0xfe>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0xd6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004808:	e013      	b.n	8004832 <HAL_TIM_PWM_Start+0xfe>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0xe6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004818:	e00b      	b.n	8004832 <HAL_TIM_PWM_Start+0xfe>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b10      	cmp	r3, #16
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xf6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004828:	e003      	b.n	8004832 <HAL_TIM_PWM_Start+0xfe>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 ffde 	bl	80057fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a33      	ldr	r2, [pc, #204]	; (8004914 <HAL_TIM_PWM_Start+0x1e0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_TIM_PWM_Start+0x13e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a32      	ldr	r2, [pc, #200]	; (8004918 <HAL_TIM_PWM_Start+0x1e4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_TIM_PWM_Start+0x13e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a30      	ldr	r2, [pc, #192]	; (800491c <HAL_TIM_PWM_Start+0x1e8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_TIM_PWM_Start+0x13e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2f      	ldr	r2, [pc, #188]	; (8004920 <HAL_TIM_PWM_Start+0x1ec>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_TIM_PWM_Start+0x13e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2d      	ldr	r2, [pc, #180]	; (8004924 <HAL_TIM_PWM_Start+0x1f0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d101      	bne.n	8004876 <HAL_TIM_PWM_Start+0x142>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_TIM_PWM_Start+0x144>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800488a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a20      	ldr	r2, [pc, #128]	; (8004914 <HAL_TIM_PWM_Start+0x1e0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d018      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x194>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d013      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x194>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a20      	ldr	r2, [pc, #128]	; (8004928 <HAL_TIM_PWM_Start+0x1f4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00e      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x194>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1f      	ldr	r2, [pc, #124]	; (800492c <HAL_TIM_PWM_Start+0x1f8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d009      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x194>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a17      	ldr	r2, [pc, #92]	; (8004918 <HAL_TIM_PWM_Start+0x1e4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x194>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a16      	ldr	r2, [pc, #88]	; (800491c <HAL_TIM_PWM_Start+0x1e8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d115      	bne.n	80048f4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	4b18      	ldr	r3, [pc, #96]	; (8004930 <HAL_TIM_PWM_Start+0x1fc>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b06      	cmp	r3, #6
 80048d8:	d015      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1d2>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d011      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f2:	e008      	b.n	8004906 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e000      	b.n	8004908 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40013400 	.word	0x40013400
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800
 8004930:	00010007 	.word	0x00010007

08004934 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e097      	b.n	8004a78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fd f9e1 	bl	8001d24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004978:	f023 0307 	bic.w	r3, r3, #7
 800497c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f000 fb15 	bl	8004fb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b6:	f023 0303 	bic.w	r3, r3, #3
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	4313      	orrs	r3, r2
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049d4:	f023 030c 	bic.w	r3, r3, #12
 80049d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	4313      	orrs	r3, r2
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	011a      	lsls	r2, r3, #4
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	031b      	lsls	r3, r3, #12
 8004a04:	4313      	orrs	r3, r2
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	4313      	orrs	r3, r2
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d110      	bne.n	8004ad2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d102      	bne.n	8004abc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ab6:	7b7b      	ldrb	r3, [r7, #13]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d001      	beq.n	8004ac0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e069      	b.n	8004b94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad0:	e031      	b.n	8004b36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d110      	bne.n	8004afa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad8:	7bbb      	ldrb	r3, [r7, #14]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d102      	bne.n	8004ae4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ade:	7b3b      	ldrb	r3, [r7, #12]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d001      	beq.n	8004ae8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e055      	b.n	8004b94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af8:	e01d      	b.n	8004b36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d108      	bne.n	8004b12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b00:	7bbb      	ldrb	r3, [r7, #14]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b06:	7b7b      	ldrb	r3, [r7, #13]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d102      	bne.n	8004b12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b0c:	7b3b      	ldrb	r3, [r7, #12]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d001      	beq.n	8004b16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e03e      	b.n	8004b94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2202      	movs	r2, #2
 8004b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_TIM_Encoder_Start+0xc4>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d008      	beq.n	8004b54 <HAL_TIM_Encoder_Start+0xd4>
 8004b42:	e00f      	b.n	8004b64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fe55 	bl	80057fc <TIM_CCxChannelCmd>
      break;
 8004b52:	e016      	b.n	8004b82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2104      	movs	r1, #4
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fe4d 	bl	80057fc <TIM_CCxChannelCmd>
      break;
 8004b62:	e00e      	b.n	8004b82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fe45 	bl	80057fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	2104      	movs	r1, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fe3e 	bl	80057fc <TIM_CCxChannelCmd>
      break;
 8004b80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e0ff      	b.n	8004dba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b14      	cmp	r3, #20
 8004bc6:	f200 80f0 	bhi.w	8004daa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004c25 	.word	0x08004c25
 8004bd4:	08004dab 	.word	0x08004dab
 8004bd8:	08004dab 	.word	0x08004dab
 8004bdc:	08004dab 	.word	0x08004dab
 8004be0:	08004c65 	.word	0x08004c65
 8004be4:	08004dab 	.word	0x08004dab
 8004be8:	08004dab 	.word	0x08004dab
 8004bec:	08004dab 	.word	0x08004dab
 8004bf0:	08004ca7 	.word	0x08004ca7
 8004bf4:	08004dab 	.word	0x08004dab
 8004bf8:	08004dab 	.word	0x08004dab
 8004bfc:	08004dab 	.word	0x08004dab
 8004c00:	08004ce7 	.word	0x08004ce7
 8004c04:	08004dab 	.word	0x08004dab
 8004c08:	08004dab 	.word	0x08004dab
 8004c0c:	08004dab 	.word	0x08004dab
 8004c10:	08004d29 	.word	0x08004d29
 8004c14:	08004dab 	.word	0x08004dab
 8004c18:	08004dab 	.word	0x08004dab
 8004c1c:	08004dab 	.word	0x08004dab
 8004c20:	08004d69 	.word	0x08004d69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fa54 	bl	80050d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0208 	orr.w	r2, r2, #8
 8004c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0204 	bic.w	r2, r2, #4
 8004c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6999      	ldr	r1, [r3, #24]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	619a      	str	r2, [r3, #24]
      break;
 8004c62:	e0a5      	b.n	8004db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fac4 	bl	80051f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6999      	ldr	r1, [r3, #24]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	021a      	lsls	r2, r3, #8
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	619a      	str	r2, [r3, #24]
      break;
 8004ca4:	e084      	b.n	8004db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fb2d 	bl	800530c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0208 	orr.w	r2, r2, #8
 8004cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0204 	bic.w	r2, r2, #4
 8004cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69d9      	ldr	r1, [r3, #28]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	61da      	str	r2, [r3, #28]
      break;
 8004ce4:	e064      	b.n	8004db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fb95 	bl	800541c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	021a      	lsls	r2, r3, #8
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	61da      	str	r2, [r3, #28]
      break;
 8004d26:	e043      	b.n	8004db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fbfe 	bl	8005530 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0208 	orr.w	r2, r2, #8
 8004d42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0204 	bic.w	r2, r2, #4
 8004d52:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d66:	e023      	b.n	8004db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fc42 	bl	80055f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d92:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	021a      	lsls	r2, r3, #8
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004da8:	e002      	b.n	8004db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
      break;
 8004dae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop

08004dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIM_ConfigClockSource+0x1c>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e0de      	b.n	8004f9e <HAL_TIM_ConfigClockSource+0x1da>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004dfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a63      	ldr	r2, [pc, #396]	; (8004fa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	f000 80a9 	beq.w	8004f72 <HAL_TIM_ConfigClockSource+0x1ae>
 8004e20:	4a61      	ldr	r2, [pc, #388]	; (8004fa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	f200 80ae 	bhi.w	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e28:	4a60      	ldr	r2, [pc, #384]	; (8004fac <HAL_TIM_ConfigClockSource+0x1e8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	f000 80a1 	beq.w	8004f72 <HAL_TIM_ConfigClockSource+0x1ae>
 8004e30:	4a5e      	ldr	r2, [pc, #376]	; (8004fac <HAL_TIM_ConfigClockSource+0x1e8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	f200 80a6 	bhi.w	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e38:	4a5d      	ldr	r2, [pc, #372]	; (8004fb0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	f000 8099 	beq.w	8004f72 <HAL_TIM_ConfigClockSource+0x1ae>
 8004e40:	4a5b      	ldr	r2, [pc, #364]	; (8004fb0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	f200 809e 	bhi.w	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e48:	4a5a      	ldr	r2, [pc, #360]	; (8004fb4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	f000 8091 	beq.w	8004f72 <HAL_TIM_ConfigClockSource+0x1ae>
 8004e50:	4a58      	ldr	r2, [pc, #352]	; (8004fb4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	f200 8096 	bhi.w	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e5c:	f000 8089 	beq.w	8004f72 <HAL_TIM_ConfigClockSource+0x1ae>
 8004e60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e64:	f200 808e 	bhi.w	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6c:	d03e      	beq.n	8004eec <HAL_TIM_ConfigClockSource+0x128>
 8004e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e72:	f200 8087 	bhi.w	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7a:	f000 8086 	beq.w	8004f8a <HAL_TIM_ConfigClockSource+0x1c6>
 8004e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e82:	d87f      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e84:	2b70      	cmp	r3, #112	; 0x70
 8004e86:	d01a      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0xfa>
 8004e88:	2b70      	cmp	r3, #112	; 0x70
 8004e8a:	d87b      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e8c:	2b60      	cmp	r3, #96	; 0x60
 8004e8e:	d050      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x16e>
 8004e90:	2b60      	cmp	r3, #96	; 0x60
 8004e92:	d877      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e94:	2b50      	cmp	r3, #80	; 0x50
 8004e96:	d03c      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x14e>
 8004e98:	2b50      	cmp	r3, #80	; 0x50
 8004e9a:	d873      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d058      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x18e>
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d86f      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ea4:	2b30      	cmp	r3, #48	; 0x30
 8004ea6:	d064      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x1ae>
 8004ea8:	2b30      	cmp	r3, #48	; 0x30
 8004eaa:	d86b      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d060      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x1ae>
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d867      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d05c      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x1ae>
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d05a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x1ae>
 8004ebc:	e062      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6899      	ldr	r1, [r3, #8]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f000 fc75 	bl	80057bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ee0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	609a      	str	r2, [r3, #8]
      break;
 8004eea:	e04f      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6899      	ldr	r1, [r3, #8]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f000 fc5e 	bl	80057bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0e:	609a      	str	r2, [r3, #8]
      break;
 8004f10:	e03c      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 fbd0 	bl	80056c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2150      	movs	r1, #80	; 0x50
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fc29 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 8004f30:	e02c      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6859      	ldr	r1, [r3, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f000 fbef 	bl	8005722 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2160      	movs	r1, #96	; 0x60
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fc19 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 8004f50:	e01c      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6859      	ldr	r1, [r3, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f000 fbb0 	bl	80056c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fc09 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 8004f70:	e00c      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f000 fc00 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 8004f82:	e003      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
      break;
 8004f88:	e000      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004f8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	00100070 	.word	0x00100070
 8004fac:	00100040 	.word	0x00100040
 8004fb0:	00100030 	.word	0x00100030
 8004fb4:	00100020 	.word	0x00100020

08004fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a3c      	ldr	r2, [pc, #240]	; (80050bc <TIM_Base_SetConfig+0x104>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00f      	beq.n	8004ff0 <TIM_Base_SetConfig+0x38>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_Base_SetConfig+0x38>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a39      	ldr	r2, [pc, #228]	; (80050c0 <TIM_Base_SetConfig+0x108>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_Base_SetConfig+0x38>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a38      	ldr	r2, [pc, #224]	; (80050c4 <TIM_Base_SetConfig+0x10c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0x38>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a37      	ldr	r2, [pc, #220]	; (80050c8 <TIM_Base_SetConfig+0x110>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d108      	bne.n	8005002 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2d      	ldr	r2, [pc, #180]	; (80050bc <TIM_Base_SetConfig+0x104>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01b      	beq.n	8005042 <TIM_Base_SetConfig+0x8a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005010:	d017      	beq.n	8005042 <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <TIM_Base_SetConfig+0x108>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <TIM_Base_SetConfig+0x10c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00f      	beq.n	8005042 <TIM_Base_SetConfig+0x8a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a28      	ldr	r2, [pc, #160]	; (80050c8 <TIM_Base_SetConfig+0x110>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00b      	beq.n	8005042 <TIM_Base_SetConfig+0x8a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a27      	ldr	r2, [pc, #156]	; (80050cc <TIM_Base_SetConfig+0x114>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <TIM_Base_SetConfig+0x8a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a26      	ldr	r2, [pc, #152]	; (80050d0 <TIM_Base_SetConfig+0x118>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <TIM_Base_SetConfig+0x8a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a25      	ldr	r2, [pc, #148]	; (80050d4 <TIM_Base_SetConfig+0x11c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d108      	bne.n	8005054 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a10      	ldr	r2, [pc, #64]	; (80050bc <TIM_Base_SetConfig+0x104>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00f      	beq.n	80050a0 <TIM_Base_SetConfig+0xe8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a11      	ldr	r2, [pc, #68]	; (80050c8 <TIM_Base_SetConfig+0x110>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00b      	beq.n	80050a0 <TIM_Base_SetConfig+0xe8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a10      	ldr	r2, [pc, #64]	; (80050cc <TIM_Base_SetConfig+0x114>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_Base_SetConfig+0xe8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a0f      	ldr	r2, [pc, #60]	; (80050d0 <TIM_Base_SetConfig+0x118>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_Base_SetConfig+0xe8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a0e      	ldr	r2, [pc, #56]	; (80050d4 <TIM_Base_SetConfig+0x11c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d103      	bne.n	80050a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	615a      	str	r2, [r3, #20]
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800
 80050c8:	40013400 	.word	0x40013400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40014400 	.word	0x40014400
 80050d4:	40014800 	.word	0x40014800

080050d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f023 0201 	bic.w	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0303 	bic.w	r3, r3, #3
 8005112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0302 	bic.w	r3, r3, #2
 8005124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <TIM_OC1_SetConfig+0x10c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00f      	beq.n	8005158 <TIM_OC1_SetConfig+0x80>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <TIM_OC1_SetConfig+0x110>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00b      	beq.n	8005158 <TIM_OC1_SetConfig+0x80>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a2a      	ldr	r2, [pc, #168]	; (80051ec <TIM_OC1_SetConfig+0x114>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d007      	beq.n	8005158 <TIM_OC1_SetConfig+0x80>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a29      	ldr	r2, [pc, #164]	; (80051f0 <TIM_OC1_SetConfig+0x118>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_OC1_SetConfig+0x80>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a28      	ldr	r2, [pc, #160]	; (80051f4 <TIM_OC1_SetConfig+0x11c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d10c      	bne.n	8005172 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0308 	bic.w	r3, r3, #8
 800515e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 0304 	bic.w	r3, r3, #4
 8005170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1b      	ldr	r2, [pc, #108]	; (80051e4 <TIM_OC1_SetConfig+0x10c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00f      	beq.n	800519a <TIM_OC1_SetConfig+0xc2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <TIM_OC1_SetConfig+0x110>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_OC1_SetConfig+0xc2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a19      	ldr	r2, [pc, #100]	; (80051ec <TIM_OC1_SetConfig+0x114>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_OC1_SetConfig+0xc2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <TIM_OC1_SetConfig+0x118>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_OC1_SetConfig+0xc2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a17      	ldr	r2, [pc, #92]	; (80051f4 <TIM_OC1_SetConfig+0x11c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d111      	bne.n	80051be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	621a      	str	r2, [r3, #32]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40013400 	.word	0x40013400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40014400 	.word	0x40014400
 80051f4:	40014800 	.word	0x40014800

080051f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0210 	bic.w	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0320 	bic.w	r3, r3, #32
 8005246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <TIM_OC2_SetConfig+0x100>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_OC2_SetConfig+0x6c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a27      	ldr	r2, [pc, #156]	; (80052fc <TIM_OC2_SetConfig+0x104>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d10d      	bne.n	8005280 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800527e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <TIM_OC2_SetConfig+0x100>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00f      	beq.n	80052a8 <TIM_OC2_SetConfig+0xb0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a1c      	ldr	r2, [pc, #112]	; (80052fc <TIM_OC2_SetConfig+0x104>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00b      	beq.n	80052a8 <TIM_OC2_SetConfig+0xb0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <TIM_OC2_SetConfig+0x108>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <TIM_OC2_SetConfig+0xb0>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a1a      	ldr	r2, [pc, #104]	; (8005304 <TIM_OC2_SetConfig+0x10c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_OC2_SetConfig+0xb0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a19      	ldr	r2, [pc, #100]	; (8005308 <TIM_OC2_SetConfig+0x110>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d113      	bne.n	80052d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40012c00 	.word	0x40012c00
 80052fc:	40013400 	.word	0x40013400
 8005300:	40014000 	.word	0x40014000
 8005304:	40014400 	.word	0x40014400
 8005308:	40014800 	.word	0x40014800

0800530c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a27      	ldr	r2, [pc, #156]	; (8005408 <TIM_OC3_SetConfig+0xfc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d003      	beq.n	8005376 <TIM_OC3_SetConfig+0x6a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a26      	ldr	r2, [pc, #152]	; (800540c <TIM_OC3_SetConfig+0x100>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d10d      	bne.n	8005392 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800537c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <TIM_OC3_SetConfig+0xfc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_OC3_SetConfig+0xae>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1b      	ldr	r2, [pc, #108]	; (800540c <TIM_OC3_SetConfig+0x100>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_OC3_SetConfig+0xae>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a1a      	ldr	r2, [pc, #104]	; (8005410 <TIM_OC3_SetConfig+0x104>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_OC3_SetConfig+0xae>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a19      	ldr	r2, [pc, #100]	; (8005414 <TIM_OC3_SetConfig+0x108>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_OC3_SetConfig+0xae>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a18      	ldr	r2, [pc, #96]	; (8005418 <TIM_OC3_SetConfig+0x10c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d113      	bne.n	80053e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	621a      	str	r2, [r3, #32]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40013400 	.word	0x40013400
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800

0800541c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800544a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800546a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	031b      	lsls	r3, r3, #12
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a28      	ldr	r2, [pc, #160]	; (800551c <TIM_OC4_SetConfig+0x100>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_OC4_SetConfig+0x6c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a27      	ldr	r2, [pc, #156]	; (8005520 <TIM_OC4_SetConfig+0x104>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d10d      	bne.n	80054a4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800548e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	031b      	lsls	r3, r3, #12
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a1d      	ldr	r2, [pc, #116]	; (800551c <TIM_OC4_SetConfig+0x100>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00f      	beq.n	80054cc <TIM_OC4_SetConfig+0xb0>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <TIM_OC4_SetConfig+0x104>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00b      	beq.n	80054cc <TIM_OC4_SetConfig+0xb0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <TIM_OC4_SetConfig+0x108>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_OC4_SetConfig+0xb0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <TIM_OC4_SetConfig+0x10c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_OC4_SetConfig+0xb0>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a19      	ldr	r2, [pc, #100]	; (800552c <TIM_OC4_SetConfig+0x110>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d113      	bne.n	80054f4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	019b      	lsls	r3, r3, #6
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	019b      	lsls	r3, r3, #6
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40012c00 	.word	0x40012c00
 8005520:	40013400 	.word	0x40013400
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005574:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a17      	ldr	r2, [pc, #92]	; (80055e4 <TIM_OC5_SetConfig+0xb4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00f      	beq.n	80055aa <TIM_OC5_SetConfig+0x7a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <TIM_OC5_SetConfig+0xb8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00b      	beq.n	80055aa <TIM_OC5_SetConfig+0x7a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a15      	ldr	r2, [pc, #84]	; (80055ec <TIM_OC5_SetConfig+0xbc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <TIM_OC5_SetConfig+0x7a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a14      	ldr	r2, [pc, #80]	; (80055f0 <TIM_OC5_SetConfig+0xc0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_OC5_SetConfig+0x7a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <TIM_OC5_SetConfig+0xc4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d109      	bne.n	80055be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	621a      	str	r2, [r3, #32]
}
 80055d8:	bf00      	nop
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40013400 	.word	0x40013400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800

080055f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800563e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	051b      	lsls	r3, r3, #20
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a18      	ldr	r2, [pc, #96]	; (80056b0 <TIM_OC6_SetConfig+0xb8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00f      	beq.n	8005674 <TIM_OC6_SetConfig+0x7c>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <TIM_OC6_SetConfig+0xbc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_OC6_SetConfig+0x7c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a16      	ldr	r2, [pc, #88]	; (80056b8 <TIM_OC6_SetConfig+0xc0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_OC6_SetConfig+0x7c>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a15      	ldr	r2, [pc, #84]	; (80056bc <TIM_OC6_SetConfig+0xc4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_OC6_SetConfig+0x7c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a14      	ldr	r2, [pc, #80]	; (80056c0 <TIM_OC6_SetConfig+0xc8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d109      	bne.n	8005688 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800567a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	029b      	lsls	r3, r3, #10
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	621a      	str	r2, [r3, #32]
}
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40013400 	.word	0x40013400
 80056b8:	40014000 	.word	0x40014000
 80056bc:	40014400 	.word	0x40014400
 80056c0:	40014800 	.word	0x40014800

080056c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 030a 	bic.w	r3, r3, #10
 8005700:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	621a      	str	r2, [r3, #32]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005722:	b480      	push	{r7}
 8005724:	b087      	sub	sp, #28
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0210 	bic.w	r2, r3, #16
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800574c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	031b      	lsls	r3, r3, #12
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800575e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f043 0307 	orr.w	r3, r3, #7
 80057a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	609a      	str	r2, [r3, #8]
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	021a      	lsls	r2, r3, #8
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	431a      	orrs	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	609a      	str	r2, [r3, #8]
}
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	2201      	movs	r2, #1
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	43db      	mvns	r3, r3
 800581e:	401a      	ands	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	fa01 f303 	lsl.w	r3, r1, r3
 8005834:	431a      	orrs	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800585c:	2302      	movs	r3, #2
 800585e:	e065      	b.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2b      	ldr	r2, [pc, #172]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d108      	bne.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800589a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d018      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d6:	d013      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a18      	ldr	r2, [pc, #96]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00e      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a17      	ldr	r2, [pc, #92]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a12      	ldr	r2, [pc, #72]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a13      	ldr	r2, [pc, #76]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10c      	bne.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40013400 	.word	0x40013400
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40014000 	.word	0x40014000

0800594c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005964:	2302      	movs	r3, #2
 8005966:	e087      	b.n	8005a78 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a27      	ldr	r2, [pc, #156]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d004      	beq.n	80059f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d106      	bne.n	8005a04 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d126      	bne.n	8005a66 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	051b      	lsls	r3, r3, #20
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a0e      	ldr	r2, [pc, #56]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d004      	beq.n	8005a58 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a0d      	ldr	r2, [pc, #52]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d106      	bne.n	8005a66 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40013400 	.word	0x40013400

08005a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e042      	b.n	8005b24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7fc fa47 	bl	8001f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2224      	movs	r2, #36	; 0x24
 8005aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fcce 	bl	8006470 <UART_SetConfig>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e022      	b.n	8005b24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 ff8e 	bl	8006a08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 f815 	bl	8006b4c <UART_CheckIdleState>
 8005b22:	4603      	mov	r3, r0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	f040 8083 	bne.w	8005c4e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_UART_Transmit+0x28>
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e07b      	b.n	8005c50 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Transmit+0x3a>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e074      	b.n	8005c50 <HAL_UART_Transmit+0x124>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2221      	movs	r2, #33	; 0x21
 8005b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b7e:	f7fc fb17 	bl	80021b0 <HAL_GetTick>
 8005b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9c:	d108      	bne.n	8005bb0 <HAL_UART_Transmit+0x84>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	e003      	b.n	8005bb8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005bc0:	e02c      	b.n	8005c1c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f001 f808 	bl	8006be2 <UART_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e039      	b.n	8005c50 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10b      	bne.n	8005bfa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bf0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	e007      	b.n	8005c0a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	3301      	adds	r3, #1
 8005c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1cc      	bne.n	8005bc2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2140      	movs	r1, #64	; 0x40
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 ffd5 	bl	8006be2 <UART_WaitOnFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e006      	b.n	8005c50 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e000      	b.n	8005c50 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08a      	sub	sp, #40	; 0x28
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	4613      	mov	r3, r2
 8005c66:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	f040 80c0 	bne.w	8005df4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_UART_Receive+0x28>
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0b8      	b.n	8005df6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_UART_Receive+0x3a>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e0b1      	b.n	8005df6 <HAL_UART_Receive+0x19e>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2222      	movs	r2, #34	; 0x22
 8005ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cb0:	f7fc fa7e 	bl	80021b0 <HAL_GetTick>
 8005cb4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	88fa      	ldrh	r2, [r7, #6]
 8005cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	88fa      	ldrh	r2, [r7, #6]
 8005cc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cce:	d10e      	bne.n	8005cee <HAL_UART_Receive+0x96>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d105      	bne.n	8005ce4 <HAL_UART_Receive+0x8c>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005cde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ce2:	e02d      	b.n	8005d40 <HAL_UART_Receive+0xe8>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	22ff      	movs	r2, #255	; 0xff
 8005ce8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cec:	e028      	b.n	8005d40 <HAL_UART_Receive+0xe8>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10d      	bne.n	8005d12 <HAL_UART_Receive+0xba>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <HAL_UART_Receive+0xb0>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	22ff      	movs	r2, #255	; 0xff
 8005d02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d06:	e01b      	b.n	8005d40 <HAL_UART_Receive+0xe8>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	227f      	movs	r2, #127	; 0x7f
 8005d0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d10:	e016      	b.n	8005d40 <HAL_UART_Receive+0xe8>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d1a:	d10d      	bne.n	8005d38 <HAL_UART_Receive+0xe0>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <HAL_UART_Receive+0xd6>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	227f      	movs	r2, #127	; 0x7f
 8005d28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d2c:	e008      	b.n	8005d40 <HAL_UART_Receive+0xe8>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	223f      	movs	r2, #63	; 0x3f
 8005d32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d36:	e003      	b.n	8005d40 <HAL_UART_Receive+0xe8>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d46:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d50:	d108      	bne.n	8005d64 <HAL_UART_Receive+0x10c>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d104      	bne.n	8005d64 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	e003      	b.n	8005d6c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d74:	e032      	b.n	8005ddc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2120      	movs	r1, #32
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 ff2e 	bl	8006be2 <UART_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e032      	b.n	8005df6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10c      	bne.n	8005db0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	8a7b      	ldrh	r3, [r7, #18]
 8005da0:	4013      	ands	r3, r2
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	3302      	adds	r3, #2
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e00c      	b.n	8005dca <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	8a7b      	ldrh	r3, [r7, #18]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1c6      	bne.n	8005d76 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e000      	b.n	8005df6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b0ba      	sub	sp, #232	; 0xe8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e2e:	4013      	ands	r3, r2
 8005e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d11b      	bne.n	8005e74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d015      	beq.n	8005e74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d105      	bne.n	8005e60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 82d6 	beq.w	8006416 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
      }
      return;
 8005e72:	e2d0      	b.n	8006416 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 811f 	beq.w	80060bc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e82:	4b8b      	ldr	r3, [pc, #556]	; (80060b0 <HAL_UART_IRQHandler+0x2b0>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e8e:	4b89      	ldr	r3, [pc, #548]	; (80060b4 <HAL_UART_IRQHandler+0x2b4>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8112 	beq.w	80060bc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d011      	beq.n	8005ec8 <HAL_UART_IRQHandler+0xc8>
 8005ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ebe:	f043 0201 	orr.w	r2, r3, #1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d011      	beq.n	8005ef8 <HAL_UART_IRQHandler+0xf8>
 8005ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eee:	f043 0204 	orr.w	r2, r3, #4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d011      	beq.n	8005f28 <HAL_UART_IRQHandler+0x128>
 8005f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2204      	movs	r2, #4
 8005f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f1e:	f043 0202 	orr.w	r2, r3, #2
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d017      	beq.n	8005f64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f44:	4b5a      	ldr	r3, [pc, #360]	; (80060b0 <HAL_UART_IRQHandler+0x2b0>)
 8005f46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2208      	movs	r2, #8
 8005f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f5a:	f043 0208 	orr.w	r2, r3, #8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d012      	beq.n	8005f96 <HAL_UART_IRQHandler+0x196>
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00c      	beq.n	8005f96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f8c:	f043 0220 	orr.w	r2, r3, #32
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 823c 	beq.w	800641a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d013      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	d005      	beq.n	8005ffa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ff2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d04f      	beq.n	800609a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 feb9 	bl	8006d72 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d141      	bne.n	8006092 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3308      	adds	r3, #8
 8006014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800603a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800603e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1d9      	bne.n	800600e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d013      	beq.n	800608a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006066:	4a14      	ldr	r2, [pc, #80]	; (80060b8 <HAL_UART_IRQHandler+0x2b8>)
 8006068:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800606e:	4618      	mov	r0, r3
 8006070:	f7fc fa34 	bl	80024dc <HAL_DMA_Abort_IT>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d017      	beq.n	80060aa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006084:	4610      	mov	r0, r2
 8006086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	e00f      	b.n	80060aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9da 	bl	8006444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	e00b      	b.n	80060aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9d6 	bl	8006444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006098:	e007      	b.n	80060aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9d2 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80060a8:	e1b7      	b.n	800641a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060aa:	bf00      	nop
    return;
 80060ac:	e1b5      	b.n	800641a <HAL_UART_IRQHandler+0x61a>
 80060ae:	bf00      	nop
 80060b0:	10000001 	.word	0x10000001
 80060b4:	04000120 	.word	0x04000120
 80060b8:	08006e3f 	.word	0x08006e3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	f040 814a 	bne.w	800635a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 8143 	beq.w	800635a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 813c 	beq.w	800635a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2210      	movs	r2, #16
 80060e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	2b40      	cmp	r3, #64	; 0x40
 80060f6:	f040 80b5 	bne.w	8006264 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006106:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8187 	beq.w	800641e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800611a:	429a      	cmp	r2, r3
 800611c:	f080 817f 	bcs.w	800641e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006126:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	f040 8086 	bne.w	8006248 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006166:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800616a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006172:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800617e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1da      	bne.n	800613c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e1      	bne.n	8006186 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3308      	adds	r3, #8
 80061c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3308      	adds	r3, #8
 80061e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e3      	bne.n	80061c2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006218:	f023 0310 	bic.w	r3, r3, #16
 800621c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800622a:	65bb      	str	r3, [r7, #88]	; 0x58
 800622c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e4      	bne.n	8006208 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006242:	4618      	mov	r0, r3
 8006244:	f7fc f8f1 	bl	800242a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006254:	b29b      	uxth	r3, r3
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	b29b      	uxth	r3, r3
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f8fb 	bl	8006458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006262:	e0dc      	b.n	800641e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006270:	b29b      	uxth	r3, r3
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80ce 	beq.w	8006422 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80c9 	beq.w	8006422 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062b2:	647b      	str	r3, [r7, #68]	; 0x44
 80062b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e4      	bne.n	8006290 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3308      	adds	r3, #8
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	623b      	str	r3, [r7, #32]
   return(result);
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3308      	adds	r3, #8
 80062ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062ee:	633a      	str	r2, [r7, #48]	; 0x30
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e1      	bne.n	80062c6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	60fb      	str	r3, [r7, #12]
   return(result);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0310 	bic.w	r3, r3, #16
 800632a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	69b9      	ldr	r1, [r7, #24]
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	617b      	str	r3, [r7, #20]
   return(result);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e4      	bne.n	8006316 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800634c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f880 	bl	8006458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006358:	e063      	b.n	8006422 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <HAL_UART_IRQHandler+0x584>
 8006366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800636a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800637a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fd9f 	bl	8006ec0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006382:	e051      	b.n	8006428 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638c:	2b00      	cmp	r3, #0
 800638e:	d014      	beq.n	80063ba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b00      	cmp	r3, #0
 800639a:	d105      	bne.n	80063a8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800639c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d03a      	beq.n	8006426 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4798      	blx	r3
    }
    return;
 80063b8:	e035      	b.n	8006426 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d009      	beq.n	80063da <HAL_UART_IRQHandler+0x5da>
 80063c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fd49 	bl	8006e6a <UART_EndTransmit_IT>
    return;
 80063d8:	e026      	b.n	8006428 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <HAL_UART_IRQHandler+0x5fa>
 80063e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fd78 	bl	8006ee8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063f8:	e016      	b.n	8006428 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d010      	beq.n	8006428 <HAL_UART_IRQHandler+0x628>
 8006406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800640a:	2b00      	cmp	r3, #0
 800640c:	da0c      	bge.n	8006428 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fd60 	bl	8006ed4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006414:	e008      	b.n	8006428 <HAL_UART_IRQHandler+0x628>
      return;
 8006416:	bf00      	nop
 8006418:	e006      	b.n	8006428 <HAL_UART_IRQHandler+0x628>
    return;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <HAL_UART_IRQHandler+0x628>
      return;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <HAL_UART_IRQHandler+0x628>
      return;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <HAL_UART_IRQHandler+0x628>
    return;
 8006426:	bf00      	nop
  }
}
 8006428:	37e8      	adds	r7, #232	; 0xe8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop

08006430 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006474:	b08c      	sub	sp, #48	; 0x30
 8006476:	af00      	add	r7, sp, #0
 8006478:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	431a      	orrs	r2, r3
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	431a      	orrs	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	4313      	orrs	r3, r2
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4bab      	ldr	r3, [pc, #684]	; (800674c <UART_SetConfig+0x2dc>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	6812      	ldr	r2, [r2, #0]
 80064a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064a8:	430b      	orrs	r3, r1
 80064aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4aa0      	ldr	r2, [pc, #640]	; (8006750 <UART_SetConfig+0x2e0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d004      	beq.n	80064dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064d8:	4313      	orrs	r3, r2
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80064e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	f023 010f 	bic.w	r1, r3, #15
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a91      	ldr	r2, [pc, #580]	; (8006754 <UART_SetConfig+0x2e4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d125      	bne.n	8006560 <UART_SetConfig+0xf0>
 8006514:	4b90      	ldr	r3, [pc, #576]	; (8006758 <UART_SetConfig+0x2e8>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	2b03      	cmp	r3, #3
 8006520:	d81a      	bhi.n	8006558 <UART_SetConfig+0xe8>
 8006522:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <UART_SetConfig+0xb8>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	08006539 	.word	0x08006539
 800652c:	08006549 	.word	0x08006549
 8006530:	08006541 	.word	0x08006541
 8006534:	08006551 	.word	0x08006551
 8006538:	2301      	movs	r3, #1
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653e:	e0d6      	b.n	80066ee <UART_SetConfig+0x27e>
 8006540:	2302      	movs	r3, #2
 8006542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006546:	e0d2      	b.n	80066ee <UART_SetConfig+0x27e>
 8006548:	2304      	movs	r3, #4
 800654a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800654e:	e0ce      	b.n	80066ee <UART_SetConfig+0x27e>
 8006550:	2308      	movs	r3, #8
 8006552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006556:	e0ca      	b.n	80066ee <UART_SetConfig+0x27e>
 8006558:	2310      	movs	r3, #16
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800655e:	e0c6      	b.n	80066ee <UART_SetConfig+0x27e>
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a7d      	ldr	r2, [pc, #500]	; (800675c <UART_SetConfig+0x2ec>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d138      	bne.n	80065dc <UART_SetConfig+0x16c>
 800656a:	4b7b      	ldr	r3, [pc, #492]	; (8006758 <UART_SetConfig+0x2e8>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006570:	f003 030c 	and.w	r3, r3, #12
 8006574:	2b0c      	cmp	r3, #12
 8006576:	d82d      	bhi.n	80065d4 <UART_SetConfig+0x164>
 8006578:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <UART_SetConfig+0x110>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	080065b5 	.word	0x080065b5
 8006584:	080065d5 	.word	0x080065d5
 8006588:	080065d5 	.word	0x080065d5
 800658c:	080065d5 	.word	0x080065d5
 8006590:	080065c5 	.word	0x080065c5
 8006594:	080065d5 	.word	0x080065d5
 8006598:	080065d5 	.word	0x080065d5
 800659c:	080065d5 	.word	0x080065d5
 80065a0:	080065bd 	.word	0x080065bd
 80065a4:	080065d5 	.word	0x080065d5
 80065a8:	080065d5 	.word	0x080065d5
 80065ac:	080065d5 	.word	0x080065d5
 80065b0:	080065cd 	.word	0x080065cd
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ba:	e098      	b.n	80066ee <UART_SetConfig+0x27e>
 80065bc:	2302      	movs	r3, #2
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c2:	e094      	b.n	80066ee <UART_SetConfig+0x27e>
 80065c4:	2304      	movs	r3, #4
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ca:	e090      	b.n	80066ee <UART_SetConfig+0x27e>
 80065cc:	2308      	movs	r3, #8
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d2:	e08c      	b.n	80066ee <UART_SetConfig+0x27e>
 80065d4:	2310      	movs	r3, #16
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065da:	e088      	b.n	80066ee <UART_SetConfig+0x27e>
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a5f      	ldr	r2, [pc, #380]	; (8006760 <UART_SetConfig+0x2f0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d125      	bne.n	8006632 <UART_SetConfig+0x1c2>
 80065e6:	4b5c      	ldr	r3, [pc, #368]	; (8006758 <UART_SetConfig+0x2e8>)
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065f0:	2b30      	cmp	r3, #48	; 0x30
 80065f2:	d016      	beq.n	8006622 <UART_SetConfig+0x1b2>
 80065f4:	2b30      	cmp	r3, #48	; 0x30
 80065f6:	d818      	bhi.n	800662a <UART_SetConfig+0x1ba>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d00a      	beq.n	8006612 <UART_SetConfig+0x1a2>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d814      	bhi.n	800662a <UART_SetConfig+0x1ba>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <UART_SetConfig+0x19a>
 8006604:	2b10      	cmp	r3, #16
 8006606:	d008      	beq.n	800661a <UART_SetConfig+0x1aa>
 8006608:	e00f      	b.n	800662a <UART_SetConfig+0x1ba>
 800660a:	2300      	movs	r3, #0
 800660c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006610:	e06d      	b.n	80066ee <UART_SetConfig+0x27e>
 8006612:	2302      	movs	r3, #2
 8006614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006618:	e069      	b.n	80066ee <UART_SetConfig+0x27e>
 800661a:	2304      	movs	r3, #4
 800661c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006620:	e065      	b.n	80066ee <UART_SetConfig+0x27e>
 8006622:	2308      	movs	r3, #8
 8006624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006628:	e061      	b.n	80066ee <UART_SetConfig+0x27e>
 800662a:	2310      	movs	r3, #16
 800662c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006630:	e05d      	b.n	80066ee <UART_SetConfig+0x27e>
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a4b      	ldr	r2, [pc, #300]	; (8006764 <UART_SetConfig+0x2f4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d125      	bne.n	8006688 <UART_SetConfig+0x218>
 800663c:	4b46      	ldr	r3, [pc, #280]	; (8006758 <UART_SetConfig+0x2e8>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006642:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006646:	2bc0      	cmp	r3, #192	; 0xc0
 8006648:	d016      	beq.n	8006678 <UART_SetConfig+0x208>
 800664a:	2bc0      	cmp	r3, #192	; 0xc0
 800664c:	d818      	bhi.n	8006680 <UART_SetConfig+0x210>
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d00a      	beq.n	8006668 <UART_SetConfig+0x1f8>
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	d814      	bhi.n	8006680 <UART_SetConfig+0x210>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <UART_SetConfig+0x1f0>
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d008      	beq.n	8006670 <UART_SetConfig+0x200>
 800665e:	e00f      	b.n	8006680 <UART_SetConfig+0x210>
 8006660:	2300      	movs	r3, #0
 8006662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006666:	e042      	b.n	80066ee <UART_SetConfig+0x27e>
 8006668:	2302      	movs	r3, #2
 800666a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800666e:	e03e      	b.n	80066ee <UART_SetConfig+0x27e>
 8006670:	2304      	movs	r3, #4
 8006672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006676:	e03a      	b.n	80066ee <UART_SetConfig+0x27e>
 8006678:	2308      	movs	r3, #8
 800667a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667e:	e036      	b.n	80066ee <UART_SetConfig+0x27e>
 8006680:	2310      	movs	r3, #16
 8006682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006686:	e032      	b.n	80066ee <UART_SetConfig+0x27e>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a30      	ldr	r2, [pc, #192]	; (8006750 <UART_SetConfig+0x2e0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d12a      	bne.n	80066e8 <UART_SetConfig+0x278>
 8006692:	4b31      	ldr	r3, [pc, #196]	; (8006758 <UART_SetConfig+0x2e8>)
 8006694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800669c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a0:	d01a      	beq.n	80066d8 <UART_SetConfig+0x268>
 80066a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a6:	d81b      	bhi.n	80066e0 <UART_SetConfig+0x270>
 80066a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ac:	d00c      	beq.n	80066c8 <UART_SetConfig+0x258>
 80066ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b2:	d815      	bhi.n	80066e0 <UART_SetConfig+0x270>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <UART_SetConfig+0x250>
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	d008      	beq.n	80066d0 <UART_SetConfig+0x260>
 80066be:	e00f      	b.n	80066e0 <UART_SetConfig+0x270>
 80066c0:	2300      	movs	r3, #0
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066c6:	e012      	b.n	80066ee <UART_SetConfig+0x27e>
 80066c8:	2302      	movs	r3, #2
 80066ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ce:	e00e      	b.n	80066ee <UART_SetConfig+0x27e>
 80066d0:	2304      	movs	r3, #4
 80066d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d6:	e00a      	b.n	80066ee <UART_SetConfig+0x27e>
 80066d8:	2308      	movs	r3, #8
 80066da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066de:	e006      	b.n	80066ee <UART_SetConfig+0x27e>
 80066e0:	2310      	movs	r3, #16
 80066e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e6:	e002      	b.n	80066ee <UART_SetConfig+0x27e>
 80066e8:	2310      	movs	r3, #16
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a17      	ldr	r2, [pc, #92]	; (8006750 <UART_SetConfig+0x2e0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	f040 80a8 	bne.w	800684a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d834      	bhi.n	800676c <UART_SetConfig+0x2fc>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <UART_SetConfig+0x298>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800672d 	.word	0x0800672d
 800670c:	0800676d 	.word	0x0800676d
 8006710:	08006735 	.word	0x08006735
 8006714:	0800676d 	.word	0x0800676d
 8006718:	0800673b 	.word	0x0800673b
 800671c:	0800676d 	.word	0x0800676d
 8006720:	0800676d 	.word	0x0800676d
 8006724:	0800676d 	.word	0x0800676d
 8006728:	08006743 	.word	0x08006743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800672c:	f7fd fce8 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 8006730:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006732:	e021      	b.n	8006778 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <UART_SetConfig+0x2f8>)
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006738:	e01e      	b.n	8006778 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800673a:	f7fd fc73 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 800673e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006740:	e01a      	b.n	8006778 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006748:	e016      	b.n	8006778 <UART_SetConfig+0x308>
 800674a:	bf00      	nop
 800674c:	cfff69f3 	.word	0xcfff69f3
 8006750:	40008000 	.word	0x40008000
 8006754:	40013800 	.word	0x40013800
 8006758:	40021000 	.word	0x40021000
 800675c:	40004400 	.word	0x40004400
 8006760:	40004800 	.word	0x40004800
 8006764:	40004c00 	.word	0x40004c00
 8006768:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006776:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 812a 	beq.w	80069d4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	4a9e      	ldr	r2, [pc, #632]	; (8006a00 <UART_SetConfig+0x590>)
 8006786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800678a:	461a      	mov	r2, r3
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006792:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	4413      	add	r3, r2
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d305      	bcc.n	80067b0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d903      	bls.n	80067b8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067b6:	e10d      	b.n	80069d4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	2200      	movs	r2, #0
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	60fa      	str	r2, [r7, #12]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	4a8e      	ldr	r2, [pc, #568]	; (8006a00 <UART_SetConfig+0x590>)
 80067c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2200      	movs	r2, #0
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	607a      	str	r2, [r7, #4]
 80067d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067da:	f7f9 fd71 	bl	80002c0 <__aeabi_uldivmod>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4610      	mov	r0, r2
 80067e4:	4619      	mov	r1, r3
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	020b      	lsls	r3, r1, #8
 80067f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067f4:	0202      	lsls	r2, r0, #8
 80067f6:	6979      	ldr	r1, [r7, #20]
 80067f8:	6849      	ldr	r1, [r1, #4]
 80067fa:	0849      	lsrs	r1, r1, #1
 80067fc:	2000      	movs	r0, #0
 80067fe:	460c      	mov	r4, r1
 8006800:	4605      	mov	r5, r0
 8006802:	eb12 0804 	adds.w	r8, r2, r4
 8006806:	eb43 0905 	adc.w	r9, r3, r5
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	469a      	mov	sl, r3
 8006812:	4693      	mov	fp, r2
 8006814:	4652      	mov	r2, sl
 8006816:	465b      	mov	r3, fp
 8006818:	4640      	mov	r0, r8
 800681a:	4649      	mov	r1, r9
 800681c:	f7f9 fd50 	bl	80002c0 <__aeabi_uldivmod>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4613      	mov	r3, r2
 8006826:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800682e:	d308      	bcc.n	8006842 <UART_SetConfig+0x3d2>
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006836:	d204      	bcs.n	8006842 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6a3a      	ldr	r2, [r7, #32]
 800683e:	60da      	str	r2, [r3, #12]
 8006840:	e0c8      	b.n	80069d4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006848:	e0c4      	b.n	80069d4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006852:	d167      	bne.n	8006924 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006854:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006858:	2b08      	cmp	r3, #8
 800685a:	d828      	bhi.n	80068ae <UART_SetConfig+0x43e>
 800685c:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <UART_SetConfig+0x3f4>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	08006889 	.word	0x08006889
 8006868:	08006891 	.word	0x08006891
 800686c:	08006899 	.word	0x08006899
 8006870:	080068af 	.word	0x080068af
 8006874:	0800689f 	.word	0x0800689f
 8006878:	080068af 	.word	0x080068af
 800687c:	080068af 	.word	0x080068af
 8006880:	080068af 	.word	0x080068af
 8006884:	080068a7 	.word	0x080068a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006888:	f7fd fc3a 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 800688c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800688e:	e014      	b.n	80068ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006890:	f7fd fc4c 	bl	800412c <HAL_RCC_GetPCLK2Freq>
 8006894:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006896:	e010      	b.n	80068ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006898:	4b5a      	ldr	r3, [pc, #360]	; (8006a04 <UART_SetConfig+0x594>)
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800689c:	e00d      	b.n	80068ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800689e:	f7fd fbc1 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 80068a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068a4:	e009      	b.n	80068ba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068ac:	e005      	b.n	80068ba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8089 	beq.w	80069d4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	4a4e      	ldr	r2, [pc, #312]	; (8006a00 <UART_SetConfig+0x590>)
 80068c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068cc:	461a      	mov	r2, r3
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80068d4:	005a      	lsls	r2, r3, #1
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	085b      	lsrs	r3, r3, #1
 80068dc:	441a      	add	r2, r3
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	2b0f      	cmp	r3, #15
 80068ec:	d916      	bls.n	800691c <UART_SetConfig+0x4ac>
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f4:	d212      	bcs.n	800691c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f023 030f 	bic.w	r3, r3, #15
 80068fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	b29b      	uxth	r3, r3
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	b29a      	uxth	r2, r3
 800690c:	8bfb      	ldrh	r3, [r7, #30]
 800690e:	4313      	orrs	r3, r2
 8006910:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	8bfa      	ldrh	r2, [r7, #30]
 8006918:	60da      	str	r2, [r3, #12]
 800691a:	e05b      	b.n	80069d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006922:	e057      	b.n	80069d4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006928:	2b08      	cmp	r3, #8
 800692a:	d828      	bhi.n	800697e <UART_SetConfig+0x50e>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x4c4>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006959 	.word	0x08006959
 8006938:	08006961 	.word	0x08006961
 800693c:	08006969 	.word	0x08006969
 8006940:	0800697f 	.word	0x0800697f
 8006944:	0800696f 	.word	0x0800696f
 8006948:	0800697f 	.word	0x0800697f
 800694c:	0800697f 	.word	0x0800697f
 8006950:	0800697f 	.word	0x0800697f
 8006954:	08006977 	.word	0x08006977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006958:	f7fd fbd2 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 800695c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800695e:	e014      	b.n	800698a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006960:	f7fd fbe4 	bl	800412c <HAL_RCC_GetPCLK2Freq>
 8006964:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006966:	e010      	b.n	800698a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006968:	4b26      	ldr	r3, [pc, #152]	; (8006a04 <UART_SetConfig+0x594>)
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800696c:	e00d      	b.n	800698a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696e:	f7fd fb59 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8006972:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006974:	e009      	b.n	800698a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800697c:	e005      	b.n	800698a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006988:	bf00      	nop
    }

    if (pclk != 0U)
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d021      	beq.n	80069d4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	4a1a      	ldr	r2, [pc, #104]	; (8006a00 <UART_SetConfig+0x590>)
 8006996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800699a:	461a      	mov	r2, r3
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	fbb3 f2f2 	udiv	r2, r3, r2
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	441a      	add	r2, r3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	2b0f      	cmp	r3, #15
 80069b8:	d909      	bls.n	80069ce <UART_SetConfig+0x55e>
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c0:	d205      	bcs.n	80069ce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60da      	str	r2, [r3, #12]
 80069cc:	e002      	b.n	80069d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2201      	movs	r2, #1
 80069e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2200      	movs	r2, #0
 80069e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2200      	movs	r2, #0
 80069ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3730      	adds	r7, #48	; 0x30
 80069f8:	46bd      	mov	sp, r7
 80069fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069fe:	bf00      	nop
 8006a00:	0800a2f0 	.word	0x0800a2f0
 8006a04:	00f42400 	.word	0x00f42400

08006a08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00a      	beq.n	8006a76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b06:	d10a      	bne.n	8006b1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b5c:	f7fb fb28 	bl	80021b0 <HAL_GetTick>
 8006b60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d10e      	bne.n	8006b8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f82f 	bl	8006be2 <UART_WaitOnFlagUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e025      	b.n	8006bda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d10e      	bne.n	8006bba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f819 	bl	8006be2 <UART_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e00f      	b.n	8006bda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b09c      	sub	sp, #112	; 0x70
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf2:	e0a9      	b.n	8006d48 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfa:	f000 80a5 	beq.w	8006d48 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bfe:	f7fb fad7 	bl	80021b0 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d302      	bcc.n	8006c14 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d140      	bne.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c28:	667b      	str	r3, [r7, #100]	; 0x64
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e6      	bne.n	8006c14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3308      	adds	r3, #8
 8006c64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c66:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e5      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e069      	b.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d051      	beq.n	8006d48 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb2:	d149      	bne.n	8006d48 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e6      	bne.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d10:	623a      	str	r2, [r7, #32]
 8006d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e5      	bne.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e010      	b.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69da      	ldr	r2, [r3, #28]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4013      	ands	r3, r2
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	bf0c      	ite	eq
 8006d58:	2301      	moveq	r3, #1
 8006d5a:	2300      	movne	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	79fb      	ldrb	r3, [r7, #7]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	f43f af46 	beq.w	8006bf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3770      	adds	r7, #112	; 0x70
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b095      	sub	sp, #84	; 0x54
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d98:	643b      	str	r3, [r7, #64]	; 0x40
 8006d9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e6      	bne.n	8006d7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3308      	adds	r3, #8
 8006db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3308      	adds	r3, #8
 8006dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e3      	bne.n	8006dac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d118      	bne.n	8006e1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f023 0310 	bic.w	r3, r3, #16
 8006e00:	647b      	str	r3, [r7, #68]	; 0x44
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6979      	ldr	r1, [r7, #20]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	613b      	str	r3, [r7, #16]
   return(result);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e6      	bne.n	8006dec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006e32:	bf00      	nop
 8006e34:	3754      	adds	r7, #84	; 0x54
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff faf1 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b088      	sub	sp, #32
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e86:	61fb      	str	r3, [r7, #28]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6979      	ldr	r1, [r7, #20]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e6      	bne.n	8006e72 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff fabc 	bl	8006430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb8:	bf00      	nop
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e027      	b.n	8006f62 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2224      	movs	r2, #36	; 0x24
 8006f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0201 	bic.w	r2, r2, #1
 8006f38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e02d      	b.n	8006fe2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2224      	movs	r2, #36	; 0x24
 8006f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f850 	bl	8007068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ffe:	2302      	movs	r3, #2
 8007000:	e02d      	b.n	800705e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2224      	movs	r2, #36	; 0x24
 800700e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0201 	bic.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f812 	bl	8007068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007074:	2b00      	cmp	r3, #0
 8007076:	d108      	bne.n	800708a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007088:	e031      	b.n	80070ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800708a:	2308      	movs	r3, #8
 800708c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800708e:	2308      	movs	r3, #8
 8007090:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	0e5b      	lsrs	r3, r3, #25
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	0f5b      	lsrs	r3, r3, #29
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	7b3a      	ldrb	r2, [r7, #12]
 80070b6:	4911      	ldr	r1, [pc, #68]	; (80070fc <UARTEx_SetNbDataToProcess+0x94>)
 80070b8:	5c8a      	ldrb	r2, [r1, r2]
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070be:	7b3a      	ldrb	r2, [r7, #12]
 80070c0:	490f      	ldr	r1, [pc, #60]	; (8007100 <UARTEx_SetNbDataToProcess+0x98>)
 80070c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	7b7a      	ldrb	r2, [r7, #13]
 80070d4:	4909      	ldr	r1, [pc, #36]	; (80070fc <UARTEx_SetNbDataToProcess+0x94>)
 80070d6:	5c8a      	ldrb	r2, [r1, r2]
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070dc:	7b7a      	ldrb	r2, [r7, #13]
 80070de:	4908      	ldr	r1, [pc, #32]	; (8007100 <UARTEx_SetNbDataToProcess+0x98>)
 80070e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	0800a308 	.word	0x0800a308
 8007100:	0800a310 	.word	0x0800a310

08007104 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007116:	2b84      	cmp	r3, #132	; 0x84
 8007118:	d005      	beq.n	8007126 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800711a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	3303      	adds	r3, #3
 8007124:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007126:	68fb      	ldr	r3, [r7, #12]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007138:	f000 fe22 	bl	8007d80 <vTaskStartScheduler>
  
  return osOK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	bd80      	pop	{r7, pc}

08007142 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007144:	b087      	sub	sp, #28
 8007146:	af02      	add	r7, sp, #8
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685c      	ldr	r4, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007158:	b29e      	uxth	r6, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff ffcf 	bl	8007104 <makeFreeRtosPriority>
 8007166:	4602      	mov	r2, r0
 8007168:	f107 030c 	add.w	r3, r7, #12
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	9200      	str	r2, [sp, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	4632      	mov	r2, r6
 8007174:	4629      	mov	r1, r5
 8007176:	4620      	mov	r0, r4
 8007178:	f000 fc9c 	bl	8007ab4 <xTaskCreate>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d001      	beq.n	8007186 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	e000      	b.n	8007188 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007186:	68fb      	ldr	r3, [r7, #12]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007190 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <osDelay+0x16>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	e000      	b.n	80071a8 <osDelay+0x18>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fdb5 	bl	8007d18 <vTaskDelay>
  
  return osOK;
 80071ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f103 0208 	add.w	r2, r3, #8
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f103 0208 	add.w	r2, r3, #8
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f103 0208 	add.w	r2, r3, #8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007212:	b480      	push	{r7}
 8007214:	b085      	sub	sp, #20
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	601a      	str	r2, [r3, #0]
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800725a:	b480      	push	{r7}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d103      	bne.n	800727a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e00c      	b.n	8007294 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	3308      	adds	r3, #8
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	e002      	b.n	8007288 <vListInsert+0x2e>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	429a      	cmp	r2, r3
 8007292:	d2f6      	bcs.n	8007282 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	601a      	str	r2, [r3, #0]
}
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6892      	ldr	r2, [r2, #8]
 80072e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6852      	ldr	r2, [r2, #4]
 80072ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d103      	bne.n	8007300 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	1e5a      	subs	r2, r3, #1
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007334:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007346:	bf00      	nop
 8007348:	e7fe      	b.n	8007348 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800734a:	f001 fc2b 	bl	8008ba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007356:	68f9      	ldr	r1, [r7, #12]
 8007358:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800735a:	fb01 f303 	mul.w	r3, r1, r3
 800735e:	441a      	add	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737a:	3b01      	subs	r3, #1
 800737c:	68f9      	ldr	r1, [r7, #12]
 800737e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	441a      	add	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	22ff      	movs	r2, #255	; 0xff
 800738e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	22ff      	movs	r2, #255	; 0xff
 8007396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d114      	bne.n	80073ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01a      	beq.n	80073de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3310      	adds	r3, #16
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 ff11 	bl	80081d4 <xTaskRemoveFromEventList>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d012      	beq.n	80073de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <xQueueGenericReset+0xcc>)
 80073ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	e009      	b.n	80073de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3310      	adds	r3, #16
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff fef2 	bl	80071b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3324      	adds	r3, #36	; 0x24
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff feed 	bl	80071b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073de:	f001 fc11 	bl	8008c04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073e2:	2301      	movs	r3, #1
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	e000ed04 	.word	0xe000ed04

080073f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08a      	sub	sp, #40	; 0x28
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007404:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	613b      	str	r3, [r7, #16]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	fb02 f303 	mul.w	r3, r2, r3
 8007422:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	3348      	adds	r3, #72	; 0x48
 8007428:	4618      	mov	r0, r3
 800742a:	f001 fc9d 	bl	8008d68 <pvPortMalloc>
 800742e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00d      	beq.n	8007452 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	3348      	adds	r3, #72	; 0x48
 800743e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007440:	79fa      	ldrb	r2, [r7, #7]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	4613      	mov	r3, r2
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	68b9      	ldr	r1, [r7, #8]
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f805 	bl	800745c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007452:	69bb      	ldr	r3, [r7, #24]
	}
 8007454:	4618      	mov	r0, r3
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d103      	bne.n	8007478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	e002      	b.n	800747e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800748a:	2101      	movs	r1, #1
 800748c:	69b8      	ldr	r0, [r7, #24]
 800748e:	f7ff ff47 	bl	8007320 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08e      	sub	sp, #56	; 0x38
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074aa:	2300      	movs	r3, #0
 80074ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <xQueueGenericSend+0x32>
	__asm volatile
 80074b8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d103      	bne.n	80074dc <xQueueGenericSend+0x40>
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <xQueueGenericSend+0x44>
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <xQueueGenericSend+0x46>
 80074e0:	2300      	movs	r3, #0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <xQueueGenericSend+0x60>
	__asm volatile
 80074e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d103      	bne.n	800750a <xQueueGenericSend+0x6e>
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <xQueueGenericSend+0x72>
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <xQueueGenericSend+0x74>
 800750e:	2300      	movs	r3, #0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <xQueueGenericSend+0x8e>
	__asm volatile
 8007514:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	623b      	str	r3, [r7, #32]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800752a:	f000 ffef 	bl	800850c <xTaskGetSchedulerState>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <xQueueGenericSend+0x9e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <xQueueGenericSend+0xa2>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <xQueueGenericSend+0xa4>
 800753e:	2300      	movs	r3, #0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <xQueueGenericSend+0xbe>
	__asm volatile
 8007544:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	61fb      	str	r3, [r7, #28]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800755a:	f001 fb23 	bl	8008ba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007566:	429a      	cmp	r2, r3
 8007568:	d302      	bcc.n	8007570 <xQueueGenericSend+0xd4>
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d129      	bne.n	80075c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007576:	f000 f9b3 	bl	80078e0 <prvCopyDataToQueue>
 800757a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	d010      	beq.n	80075a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	3324      	adds	r3, #36	; 0x24
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fe23 	bl	80081d4 <xTaskRemoveFromEventList>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d013      	beq.n	80075bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007594:	4b3f      	ldr	r3, [pc, #252]	; (8007694 <xQueueGenericSend+0x1f8>)
 8007596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	e00a      	b.n	80075bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d007      	beq.n	80075bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075ac:	4b39      	ldr	r3, [pc, #228]	; (8007694 <xQueueGenericSend+0x1f8>)
 80075ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075bc:	f001 fb22 	bl	8008c04 <vPortExitCritical>
				return pdPASS;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e063      	b.n	800768c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d103      	bne.n	80075d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075ca:	f001 fb1b 	bl	8008c04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e05c      	b.n	800768c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075d8:	f107 0314 	add.w	r3, r7, #20
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fe5b 	bl	8008298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075e2:	2301      	movs	r3, #1
 80075e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075e6:	f001 fb0d 	bl	8008c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075ea:	f000 fc11 	bl	8007e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075ee:	f001 fad9 	bl	8008ba4 <vPortEnterCritical>
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075f8:	b25b      	sxtb	r3, r3
 80075fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fe:	d103      	bne.n	8007608 <xQueueGenericSend+0x16c>
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800760e:	b25b      	sxtb	r3, r3
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d103      	bne.n	800761e <xQueueGenericSend+0x182>
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800761e:	f001 faf1 	bl	8008c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007622:	1d3a      	adds	r2, r7, #4
 8007624:	f107 0314 	add.w	r3, r7, #20
 8007628:	4611      	mov	r1, r2
 800762a:	4618      	mov	r0, r3
 800762c:	f000 fe4a 	bl	80082c4 <xTaskCheckForTimeOut>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d124      	bne.n	8007680 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007638:	f000 fa24 	bl	8007a84 <prvIsQueueFull>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d018      	beq.n	8007674 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	3310      	adds	r3, #16
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fd9e 	bl	800818c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007652:	f000 f9af 	bl	80079b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007656:	f000 fbe9 	bl	8007e2c <xTaskResumeAll>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	f47f af7c 	bne.w	800755a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007662:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <xQueueGenericSend+0x1f8>)
 8007664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	e772      	b.n	800755a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007676:	f000 f99d 	bl	80079b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800767a:	f000 fbd7 	bl	8007e2c <xTaskResumeAll>
 800767e:	e76c      	b.n	800755a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007682:	f000 f997 	bl	80079b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007686:	f000 fbd1 	bl	8007e2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800768a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800768c:	4618      	mov	r0, r3
 800768e:	3738      	adds	r7, #56	; 0x38
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08e      	sub	sp, #56	; 0x38
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80076aa:	2300      	movs	r3, #0
 80076ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80076b4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	623b      	str	r3, [r7, #32]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80076d2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	61fb      	str	r3, [r7, #28]
}
 80076e4:	bf00      	nop
 80076e6:	e7fe      	b.n	80076e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076e8:	f000 ff10 	bl	800850c <xTaskGetSchedulerState>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <xQueueSemaphoreTake+0x60>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <xQueueSemaphoreTake+0x64>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e000      	b.n	80076fe <xQueueSemaphoreTake+0x66>
 80076fc:	2300      	movs	r3, #0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007702:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	61bb      	str	r3, [r7, #24]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007718:	f001 fa44 	bl	8008ba4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007720:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	2b00      	cmp	r3, #0
 8007726:	d024      	beq.n	8007772 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	1e5a      	subs	r2, r3, #1
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007738:	f001 f890 	bl	800885c <pvTaskIncrementMutexHeldCount>
 800773c:	4602      	mov	r2, r0
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00f      	beq.n	800776a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774c:	3310      	adds	r3, #16
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fd40 	bl	80081d4 <xTaskRemoveFromEventList>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800775a:	4b54      	ldr	r3, [pc, #336]	; (80078ac <xQueueSemaphoreTake+0x214>)
 800775c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800776a:	f001 fa4b 	bl	8008c04 <vPortExitCritical>
				return pdPASS;
 800776e:	2301      	movs	r3, #1
 8007770:	e097      	b.n	80078a2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d111      	bne.n	800779c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800777e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	617b      	str	r3, [r7, #20]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007794:	f001 fa36 	bl	8008c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007798:	2300      	movs	r3, #0
 800779a:	e082      	b.n	80078a2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077a2:	f107 030c 	add.w	r3, r7, #12
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fd76 	bl	8008298 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077ac:	2301      	movs	r3, #1
 80077ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077b0:	f001 fa28 	bl	8008c04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077b4:	f000 fb2c 	bl	8007e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077b8:	f001 f9f4 	bl	8008ba4 <vPortEnterCritical>
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077c2:	b25b      	sxtb	r3, r3
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c8:	d103      	bne.n	80077d2 <xQueueSemaphoreTake+0x13a>
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d8:	b25b      	sxtb	r3, r3
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d103      	bne.n	80077e8 <xQueueSemaphoreTake+0x150>
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077e8:	f001 fa0c 	bl	8008c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077ec:	463a      	mov	r2, r7
 80077ee:	f107 030c 	add.w	r3, r7, #12
 80077f2:	4611      	mov	r1, r2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fd65 	bl	80082c4 <xTaskCheckForTimeOut>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d132      	bne.n	8007866 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007802:	f000 f929 	bl	8007a58 <prvIsQueueEmpty>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d026      	beq.n	800785a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d109      	bne.n	8007828 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007814:	f001 f9c6 	bl	8008ba4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fe93 	bl	8008548 <xTaskPriorityInherit>
 8007822:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007824:	f001 f9ee 	bl	8008c04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	3324      	adds	r3, #36	; 0x24
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f000 fcab 	bl	800818c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007838:	f000 f8bc 	bl	80079b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800783c:	f000 faf6 	bl	8007e2c <xTaskResumeAll>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	f47f af68 	bne.w	8007718 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007848:	4b18      	ldr	r3, [pc, #96]	; (80078ac <xQueueSemaphoreTake+0x214>)
 800784a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	e75e      	b.n	8007718 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800785a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800785c:	f000 f8aa 	bl	80079b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007860:	f000 fae4 	bl	8007e2c <xTaskResumeAll>
 8007864:	e758      	b.n	8007718 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007868:	f000 f8a4 	bl	80079b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800786c:	f000 fade 	bl	8007e2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007872:	f000 f8f1 	bl	8007a58 <prvIsQueueEmpty>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	f43f af4d 	beq.w	8007718 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00d      	beq.n	80078a0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007884:	f001 f98e 	bl	8008ba4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800788a:	f000 f811 	bl	80078b0 <prvGetDisinheritPriorityAfterTimeout>
 800788e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007896:	4618      	mov	r0, r3
 8007898:	f000 ff52 	bl	8008740 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800789c:	f001 f9b2 	bl	8008c04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3738      	adds	r7, #56	; 0x38
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d006      	beq.n	80078ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f1c3 0307 	rsb	r3, r3, #7
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e001      	b.n	80078d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80078d2:	68fb      	ldr	r3, [r7, #12]
	}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10d      	bne.n	800791a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d14d      	bne.n	80079a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fe92 	bl	8008634 <xTaskPriorityDisinherit>
 8007910:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	609a      	str	r2, [r3, #8]
 8007918:	e043      	b.n	80079a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d119      	bne.n	8007954 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6858      	ldr	r0, [r3, #4]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	461a      	mov	r2, r3
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	f001 fc30 	bl	8009190 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007938:	441a      	add	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	429a      	cmp	r2, r3
 8007948:	d32b      	bcc.n	80079a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	605a      	str	r2, [r3, #4]
 8007952:	e026      	b.n	80079a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	68d8      	ldr	r0, [r3, #12]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	461a      	mov	r2, r3
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	f001 fc16 	bl	8009190 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	425b      	negs	r3, r3
 800796e:	441a      	add	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d207      	bcs.n	8007990 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	425b      	negs	r3, r3
 800798a:	441a      	add	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d105      	bne.n	80079a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	3b01      	subs	r3, #1
 80079a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079aa:	697b      	ldr	r3, [r7, #20]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80079bc:	f001 f8f2 	bl	8008ba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079c8:	e011      	b.n	80079ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d012      	beq.n	80079f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3324      	adds	r3, #36	; 0x24
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fbfc 	bl	80081d4 <xTaskRemoveFromEventList>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079e2:	f000 fcd1 	bl	8008388 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dce9      	bgt.n	80079ca <prvUnlockQueue+0x16>
 80079f6:	e000      	b.n	80079fa <prvUnlockQueue+0x46>
					break;
 80079f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	22ff      	movs	r2, #255	; 0xff
 80079fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a02:	f001 f8ff 	bl	8008c04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a06:	f001 f8cd 	bl	8008ba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a12:	e011      	b.n	8007a38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d012      	beq.n	8007a42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3310      	adds	r3, #16
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fbd7 	bl	80081d4 <xTaskRemoveFromEventList>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a2c:	f000 fcac 	bl	8008388 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dce9      	bgt.n	8007a14 <prvUnlockQueue+0x60>
 8007a40:	e000      	b.n	8007a44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	22ff      	movs	r2, #255	; 0xff
 8007a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a4c:	f001 f8da 	bl	8008c04 <vPortExitCritical>
}
 8007a50:	bf00      	nop
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a60:	f001 f8a0 	bl	8008ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d102      	bne.n	8007a72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	e001      	b.n	8007a76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a76:	f001 f8c5 	bl	8008c04 <vPortExitCritical>

	return xReturn;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a8c:	f001 f88a 	bl	8008ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d102      	bne.n	8007aa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	e001      	b.n	8007aa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007aa6:	f001 f8ad 	bl	8008c04 <vPortExitCritical>

	return xReturn;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08c      	sub	sp, #48	; 0x30
 8007ab8:	af04      	add	r7, sp, #16
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ac4:	88fb      	ldrh	r3, [r7, #6]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 f94d 	bl	8008d68 <pvPortMalloc>
 8007ace:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ad6:	2064      	movs	r0, #100	; 0x64
 8007ad8:	f001 f946 	bl	8008d68 <pvPortMalloc>
 8007adc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	631a      	str	r2, [r3, #48]	; 0x30
 8007aea:	e005      	b.n	8007af8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007aec:	6978      	ldr	r0, [r7, #20]
 8007aee:	f001 fa07 	bl	8008f00 <vPortFree>
 8007af2:	e001      	b.n	8007af8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d013      	beq.n	8007b26 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007afe:	88fa      	ldrh	r2, [r7, #6]
 8007b00:	2300      	movs	r3, #0
 8007b02:	9303      	str	r3, [sp, #12]
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	9302      	str	r3, [sp, #8]
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	9301      	str	r3, [sp, #4]
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f80e 	bl	8007b36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b1a:	69f8      	ldr	r0, [r7, #28]
 8007b1c:	f000 f892 	bl	8007c44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b20:	2301      	movs	r3, #1
 8007b22:	61bb      	str	r3, [r7, #24]
 8007b24:	e002      	b.n	8007b2c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b26:	f04f 33ff 	mov.w	r3, #4294967295
 8007b2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
	}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3720      	adds	r7, #32
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b088      	sub	sp, #32
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f023 0307 	bic.w	r3, r3, #7
 8007b5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <prvInitialiseNewTask+0x48>
	__asm volatile
 8007b68:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	617b      	str	r3, [r7, #20]
}
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01f      	beq.n	8007bc4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b84:	2300      	movs	r3, #0
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	e012      	b.n	8007bb0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	7819      	ldrb	r1, [r3, #0]
 8007b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	4413      	add	r3, r2
 8007b98:	3334      	adds	r3, #52	; 0x34
 8007b9a:	460a      	mov	r2, r1
 8007b9c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d006      	beq.n	8007bb8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	3301      	adds	r3, #1
 8007bae:	61fb      	str	r3, [r7, #28]
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	2b1f      	cmp	r3, #31
 8007bb4:	d9e9      	bls.n	8007b8a <prvInitialiseNewTask+0x54>
 8007bb6:	e000      	b.n	8007bba <prvInitialiseNewTask+0x84>
			{
				break;
 8007bb8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007bc2:	e003      	b.n	8007bcc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	2b06      	cmp	r3, #6
 8007bd0:	d901      	bls.n	8007bd6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bd2:	2306      	movs	r3, #6
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bda:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	2200      	movs	r2, #0
 8007be6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	3304      	adds	r3, #4
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff fb03 	bl	80071f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	3318      	adds	r3, #24
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff fafe 	bl	80071f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	f1c3 0207 	rsb	r2, r3, #7
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	2200      	movs	r2, #0
 8007c16:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	68f9      	ldr	r1, [r7, #12]
 8007c24:	69b8      	ldr	r0, [r7, #24]
 8007c26:	f000 fe93 	bl	8008950 <pxPortInitialiseStack>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c3c:	bf00      	nop
 8007c3e:	3720      	adds	r7, #32
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c4c:	f000 ffaa 	bl	8008ba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c50:	4b2a      	ldr	r3, [pc, #168]	; (8007cfc <prvAddNewTaskToReadyList+0xb8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	4a29      	ldr	r2, [pc, #164]	; (8007cfc <prvAddNewTaskToReadyList+0xb8>)
 8007c58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c5a:	4b29      	ldr	r3, [pc, #164]	; (8007d00 <prvAddNewTaskToReadyList+0xbc>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c62:	4a27      	ldr	r2, [pc, #156]	; (8007d00 <prvAddNewTaskToReadyList+0xbc>)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c68:	4b24      	ldr	r3, [pc, #144]	; (8007cfc <prvAddNewTaskToReadyList+0xb8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d110      	bne.n	8007c92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c70:	f000 fbae 	bl	80083d0 <prvInitialiseTaskLists>
 8007c74:	e00d      	b.n	8007c92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c76:	4b23      	ldr	r3, [pc, #140]	; (8007d04 <prvAddNewTaskToReadyList+0xc0>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c7e:	4b20      	ldr	r3, [pc, #128]	; (8007d00 <prvAddNewTaskToReadyList+0xbc>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d802      	bhi.n	8007c92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c8c:	4a1c      	ldr	r2, [pc, #112]	; (8007d00 <prvAddNewTaskToReadyList+0xbc>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c92:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <prvAddNewTaskToReadyList+0xc4>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3301      	adds	r3, #1
 8007c98:	4a1b      	ldr	r2, [pc, #108]	; (8007d08 <prvAddNewTaskToReadyList+0xc4>)
 8007c9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	409a      	lsls	r2, r3
 8007ca4:	4b19      	ldr	r3, [pc, #100]	; (8007d0c <prvAddNewTaskToReadyList+0xc8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	4a18      	ldr	r2, [pc, #96]	; (8007d0c <prvAddNewTaskToReadyList+0xc8>)
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4a15      	ldr	r2, [pc, #84]	; (8007d10 <prvAddNewTaskToReadyList+0xcc>)
 8007cbc:	441a      	add	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f7ff faa4 	bl	8007212 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cca:	f000 ff9b 	bl	8008c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cce:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <prvAddNewTaskToReadyList+0xc0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00e      	beq.n	8007cf4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <prvAddNewTaskToReadyList+0xbc>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d207      	bcs.n	8007cf4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ce4:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <prvAddNewTaskToReadyList+0xd0>)
 8007ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	200004e8 	.word	0x200004e8
 8007d00:	200003e8 	.word	0x200003e8
 8007d04:	200004f4 	.word	0x200004f4
 8007d08:	20000504 	.word	0x20000504
 8007d0c:	200004f0 	.word	0x200004f0
 8007d10:	200003ec 	.word	0x200003ec
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d017      	beq.n	8007d5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d2a:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <vTaskDelay+0x60>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <vTaskDelay+0x30>
	__asm volatile
 8007d32:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	60bb      	str	r3, [r7, #8]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d48:	f000 f862 	bl	8007e10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fd98 	bl	8008884 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d54:	f000 f86a 	bl	8007e2c <xTaskResumeAll>
 8007d58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d107      	bne.n	8007d70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d60:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <vTaskDelay+0x64>)
 8007d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d70:	bf00      	nop
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	20000510 	.word	0x20000510
 8007d7c:	e000ed04 	.word	0xe000ed04

08007d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007d86:	4b1c      	ldr	r3, [pc, #112]	; (8007df8 <vTaskStartScheduler+0x78>)
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2280      	movs	r2, #128	; 0x80
 8007d92:	491a      	ldr	r1, [pc, #104]	; (8007dfc <vTaskStartScheduler+0x7c>)
 8007d94:	481a      	ldr	r0, [pc, #104]	; (8007e00 <vTaskStartScheduler+0x80>)
 8007d96:	f7ff fe8d 	bl	8007ab4 <xTaskCreate>
 8007d9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d116      	bne.n	8007dd0 <vTaskStartScheduler+0x50>
	__asm volatile
 8007da2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	60bb      	str	r3, [r7, #8]
}
 8007db4:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007db6:	4b13      	ldr	r3, [pc, #76]	; (8007e04 <vTaskStartScheduler+0x84>)
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dbe:	4b12      	ldr	r3, [pc, #72]	; (8007e08 <vTaskStartScheduler+0x88>)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007dc4:	4b11      	ldr	r3, [pc, #68]	; (8007e0c <vTaskStartScheduler+0x8c>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dca:	f000 fe49 	bl	8008a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dce:	e00e      	b.n	8007dee <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd6:	d10a      	bne.n	8007dee <vTaskStartScheduler+0x6e>
	__asm volatile
 8007dd8:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	607b      	str	r3, [r7, #4]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <vTaskStartScheduler+0x6c>
}
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	2000050c 	.word	0x2000050c
 8007dfc:	0800a2d0 	.word	0x0800a2d0
 8007e00:	080083a1 	.word	0x080083a1
 8007e04:	20000508 	.word	0x20000508
 8007e08:	200004f4 	.word	0x200004f4
 8007e0c:	200004ec 	.word	0x200004ec

08007e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <vTaskSuspendAll+0x18>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	4a03      	ldr	r2, [pc, #12]	; (8007e28 <vTaskSuspendAll+0x18>)
 8007e1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e1e:	bf00      	nop
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	20000510 	.word	0x20000510

08007e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e3a:	4b41      	ldr	r3, [pc, #260]	; (8007f40 <xTaskResumeAll+0x114>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <xTaskResumeAll+0x2c>
	__asm volatile
 8007e42:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	603b      	str	r3, [r7, #0]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e58:	f000 fea4 	bl	8008ba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e5c:	4b38      	ldr	r3, [pc, #224]	; (8007f40 <xTaskResumeAll+0x114>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	4a37      	ldr	r2, [pc, #220]	; (8007f40 <xTaskResumeAll+0x114>)
 8007e64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e66:	4b36      	ldr	r3, [pc, #216]	; (8007f40 <xTaskResumeAll+0x114>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d161      	bne.n	8007f32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e6e:	4b35      	ldr	r3, [pc, #212]	; (8007f44 <xTaskResumeAll+0x118>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d05d      	beq.n	8007f32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e76:	e02e      	b.n	8007ed6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e78:	4b33      	ldr	r3, [pc, #204]	; (8007f48 <xTaskResumeAll+0x11c>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3318      	adds	r3, #24
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff fa21 	bl	80072cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff fa1c 	bl	80072cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	2201      	movs	r2, #1
 8007e9a:	409a      	lsls	r2, r3
 8007e9c:	4b2b      	ldr	r3, [pc, #172]	; (8007f4c <xTaskResumeAll+0x120>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	4a2a      	ldr	r2, [pc, #168]	; (8007f4c <xTaskResumeAll+0x120>)
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eaa:	4613      	mov	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4a27      	ldr	r2, [pc, #156]	; (8007f50 <xTaskResumeAll+0x124>)
 8007eb4:	441a      	add	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	f7ff f9a8 	bl	8007212 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec6:	4b23      	ldr	r3, [pc, #140]	; (8007f54 <xTaskResumeAll+0x128>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d302      	bcc.n	8007ed6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007ed0:	4b21      	ldr	r3, [pc, #132]	; (8007f58 <xTaskResumeAll+0x12c>)
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ed6:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <xTaskResumeAll+0x11c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1cc      	bne.n	8007e78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ee4:	f000 faf2 	bl	80084cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ee8:	4b1c      	ldr	r3, [pc, #112]	; (8007f5c <xTaskResumeAll+0x130>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d010      	beq.n	8007f16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ef4:	f000 f836 	bl	8007f64 <xTaskIncrementTick>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d002      	beq.n	8007f04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007efe:	4b16      	ldr	r3, [pc, #88]	; (8007f58 <xTaskResumeAll+0x12c>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f1      	bne.n	8007ef4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007f10:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <xTaskResumeAll+0x130>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f16:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <xTaskResumeAll+0x12c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f22:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <xTaskResumeAll+0x134>)
 8007f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f32:	f000 fe67 	bl	8008c04 <vPortExitCritical>

	return xAlreadyYielded;
 8007f36:	68bb      	ldr	r3, [r7, #8]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000510 	.word	0x20000510
 8007f44:	200004e8 	.word	0x200004e8
 8007f48:	200004a8 	.word	0x200004a8
 8007f4c:	200004f0 	.word	0x200004f0
 8007f50:	200003ec 	.word	0x200003ec
 8007f54:	200003e8 	.word	0x200003e8
 8007f58:	200004fc 	.word	0x200004fc
 8007f5c:	200004f8 	.word	0x200004f8
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f6e:	4b4e      	ldr	r3, [pc, #312]	; (80080a8 <xTaskIncrementTick+0x144>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f040 808e 	bne.w	8008094 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f78:	4b4c      	ldr	r3, [pc, #304]	; (80080ac <xTaskIncrementTick+0x148>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f80:	4a4a      	ldr	r2, [pc, #296]	; (80080ac <xTaskIncrementTick+0x148>)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d120      	bne.n	8007fce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f8c:	4b48      	ldr	r3, [pc, #288]	; (80080b0 <xTaskIncrementTick+0x14c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <xTaskIncrementTick+0x48>
	__asm volatile
 8007f96:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	603b      	str	r3, [r7, #0]
}
 8007fa8:	bf00      	nop
 8007faa:	e7fe      	b.n	8007faa <xTaskIncrementTick+0x46>
 8007fac:	4b40      	ldr	r3, [pc, #256]	; (80080b0 <xTaskIncrementTick+0x14c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	4b40      	ldr	r3, [pc, #256]	; (80080b4 <xTaskIncrementTick+0x150>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a3e      	ldr	r2, [pc, #248]	; (80080b0 <xTaskIncrementTick+0x14c>)
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	4a3e      	ldr	r2, [pc, #248]	; (80080b4 <xTaskIncrementTick+0x150>)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	4b3d      	ldr	r3, [pc, #244]	; (80080b8 <xTaskIncrementTick+0x154>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	4a3c      	ldr	r2, [pc, #240]	; (80080b8 <xTaskIncrementTick+0x154>)
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	f000 fa7f 	bl	80084cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fce:	4b3b      	ldr	r3, [pc, #236]	; (80080bc <xTaskIncrementTick+0x158>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d348      	bcc.n	800806a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fd8:	4b35      	ldr	r3, [pc, #212]	; (80080b0 <xTaskIncrementTick+0x14c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe2:	4b36      	ldr	r3, [pc, #216]	; (80080bc <xTaskIncrementTick+0x158>)
 8007fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe8:	601a      	str	r2, [r3, #0]
					break;
 8007fea:	e03e      	b.n	800806a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fec:	4b30      	ldr	r3, [pc, #192]	; (80080b0 <xTaskIncrementTick+0x14c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	429a      	cmp	r2, r3
 8008002:	d203      	bcs.n	800800c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008004:	4a2d      	ldr	r2, [pc, #180]	; (80080bc <xTaskIncrementTick+0x158>)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800800a:	e02e      	b.n	800806a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	3304      	adds	r3, #4
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff f95b 	bl	80072cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	3318      	adds	r3, #24
 8008022:	4618      	mov	r0, r3
 8008024:	f7ff f952 	bl	80072cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	2201      	movs	r2, #1
 800802e:	409a      	lsls	r2, r3
 8008030:	4b23      	ldr	r3, [pc, #140]	; (80080c0 <xTaskIncrementTick+0x15c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4313      	orrs	r3, r2
 8008036:	4a22      	ldr	r2, [pc, #136]	; (80080c0 <xTaskIncrementTick+0x15c>)
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4a1f      	ldr	r2, [pc, #124]	; (80080c4 <xTaskIncrementTick+0x160>)
 8008048:	441a      	add	r2, r3
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	3304      	adds	r3, #4
 800804e:	4619      	mov	r1, r3
 8008050:	4610      	mov	r0, r2
 8008052:	f7ff f8de 	bl	8007212 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805a:	4b1b      	ldr	r3, [pc, #108]	; (80080c8 <xTaskIncrementTick+0x164>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	429a      	cmp	r2, r3
 8008062:	d3b9      	bcc.n	8007fd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008064:	2301      	movs	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008068:	e7b6      	b.n	8007fd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800806a:	4b17      	ldr	r3, [pc, #92]	; (80080c8 <xTaskIncrementTick+0x164>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008070:	4914      	ldr	r1, [pc, #80]	; (80080c4 <xTaskIncrementTick+0x160>)
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d901      	bls.n	8008086 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008082:	2301      	movs	r3, #1
 8008084:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008086:	4b11      	ldr	r3, [pc, #68]	; (80080cc <xTaskIncrementTick+0x168>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800808e:	2301      	movs	r3, #1
 8008090:	617b      	str	r3, [r7, #20]
 8008092:	e004      	b.n	800809e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008094:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <xTaskIncrementTick+0x16c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3301      	adds	r3, #1
 800809a:	4a0d      	ldr	r2, [pc, #52]	; (80080d0 <xTaskIncrementTick+0x16c>)
 800809c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800809e:	697b      	ldr	r3, [r7, #20]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20000510 	.word	0x20000510
 80080ac:	200004ec 	.word	0x200004ec
 80080b0:	200004a0 	.word	0x200004a0
 80080b4:	200004a4 	.word	0x200004a4
 80080b8:	20000500 	.word	0x20000500
 80080bc:	20000508 	.word	0x20000508
 80080c0:	200004f0 	.word	0x200004f0
 80080c4:	200003ec 	.word	0x200003ec
 80080c8:	200003e8 	.word	0x200003e8
 80080cc:	200004fc 	.word	0x200004fc
 80080d0:	200004f8 	.word	0x200004f8

080080d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080da:	4b27      	ldr	r3, [pc, #156]	; (8008178 <vTaskSwitchContext+0xa4>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080e2:	4b26      	ldr	r3, [pc, #152]	; (800817c <vTaskSwitchContext+0xa8>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080e8:	e03f      	b.n	800816a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80080ea:	4b24      	ldr	r3, [pc, #144]	; (800817c <vTaskSwitchContext+0xa8>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f0:	4b23      	ldr	r3, [pc, #140]	; (8008180 <vTaskSwitchContext+0xac>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	fab3 f383 	clz	r3, r3
 80080fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80080fe:	7afb      	ldrb	r3, [r7, #11]
 8008100:	f1c3 031f 	rsb	r3, r3, #31
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	491f      	ldr	r1, [pc, #124]	; (8008184 <vTaskSwitchContext+0xb0>)
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4613      	mov	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <vTaskSwitchContext+0x5c>
	__asm volatile
 800811a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	607b      	str	r3, [r7, #4]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <vTaskSwitchContext+0x5a>
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4a12      	ldr	r2, [pc, #72]	; (8008184 <vTaskSwitchContext+0xb0>)
 800813c:	4413      	add	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	605a      	str	r2, [r3, #4]
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	3308      	adds	r3, #8
 8008152:	429a      	cmp	r2, r3
 8008154:	d104      	bne.n	8008160 <vTaskSwitchContext+0x8c>
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	605a      	str	r2, [r3, #4]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	4a08      	ldr	r2, [pc, #32]	; (8008188 <vTaskSwitchContext+0xb4>)
 8008168:	6013      	str	r3, [r2, #0]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	20000510 	.word	0x20000510
 800817c:	200004fc 	.word	0x200004fc
 8008180:	200004f0 	.word	0x200004f0
 8008184:	200003ec 	.word	0x200003ec
 8008188:	200003e8 	.word	0x200003e8

0800818c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800819c:	f04f 0380 	mov.w	r3, #128	; 0x80
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	60fb      	str	r3, [r7, #12]
}
 80081ae:	bf00      	nop
 80081b0:	e7fe      	b.n	80081b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081b2:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <vTaskPlaceOnEventList+0x44>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3318      	adds	r3, #24
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff f84d 	bl	800725a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081c0:	2101      	movs	r1, #1
 80081c2:	6838      	ldr	r0, [r7, #0]
 80081c4:	f000 fb5e 	bl	8008884 <prvAddCurrentTaskToDelayedList>
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	200003e8 	.word	0x200003e8

080081d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081ea:	f04f 0380 	mov.w	r3, #128	; 0x80
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	60fb      	str	r3, [r7, #12]
}
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3318      	adds	r3, #24
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff f861 	bl	80072cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800820a:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <xTaskRemoveFromEventList+0xac>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d11c      	bne.n	800824c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	3304      	adds	r3, #4
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff f858 	bl	80072cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	2201      	movs	r2, #1
 8008222:	409a      	lsls	r2, r3
 8008224:	4b17      	ldr	r3, [pc, #92]	; (8008284 <xTaskRemoveFromEventList+0xb0>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4313      	orrs	r3, r2
 800822a:	4a16      	ldr	r2, [pc, #88]	; (8008284 <xTaskRemoveFromEventList+0xb0>)
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4a13      	ldr	r2, [pc, #76]	; (8008288 <xTaskRemoveFromEventList+0xb4>)
 800823c:	441a      	add	r2, r3
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	3304      	adds	r3, #4
 8008242:	4619      	mov	r1, r3
 8008244:	4610      	mov	r0, r2
 8008246:	f7fe ffe4 	bl	8007212 <vListInsertEnd>
 800824a:	e005      	b.n	8008258 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	3318      	adds	r3, #24
 8008250:	4619      	mov	r1, r3
 8008252:	480e      	ldr	r0, [pc, #56]	; (800828c <xTaskRemoveFromEventList+0xb8>)
 8008254:	f7fe ffdd 	bl	8007212 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <xTaskRemoveFromEventList+0xbc>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	429a      	cmp	r2, r3
 8008264:	d905      	bls.n	8008272 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008266:	2301      	movs	r3, #1
 8008268:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800826a:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <xTaskRemoveFromEventList+0xc0>)
 800826c:	2201      	movs	r2, #1
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	e001      	b.n	8008276 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008276:	697b      	ldr	r3, [r7, #20]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000510 	.word	0x20000510
 8008284:	200004f0 	.word	0x200004f0
 8008288:	200003ec 	.word	0x200003ec
 800828c:	200004a8 	.word	0x200004a8
 8008290:	200003e8 	.word	0x200003e8
 8008294:	200004fc 	.word	0x200004fc

08008298 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082a0:	4b06      	ldr	r3, [pc, #24]	; (80082bc <vTaskInternalSetTimeOutState+0x24>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082a8:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <vTaskInternalSetTimeOutState+0x28>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	605a      	str	r2, [r3, #4]
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	20000500 	.word	0x20000500
 80082c0:	200004ec 	.word	0x200004ec

080082c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082d4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	613b      	str	r3, [r7, #16]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082f0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008306:	f000 fc4d 	bl	8008ba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800830a:	4b1d      	ldr	r3, [pc, #116]	; (8008380 <xTaskCheckForTimeOut+0xbc>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d102      	bne.n	800832a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008324:	2300      	movs	r3, #0
 8008326:	61fb      	str	r3, [r7, #28]
 8008328:	e023      	b.n	8008372 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	4b15      	ldr	r3, [pc, #84]	; (8008384 <xTaskCheckForTimeOut+0xc0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d007      	beq.n	8008346 <xTaskCheckForTimeOut+0x82>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	429a      	cmp	r2, r3
 800833e:	d302      	bcc.n	8008346 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	61fb      	str	r3, [r7, #28]
 8008344:	e015      	b.n	8008372 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	429a      	cmp	r2, r3
 800834e:	d20b      	bcs.n	8008368 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	1ad2      	subs	r2, r2, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff ff9b 	bl	8008298 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	61fb      	str	r3, [r7, #28]
 8008366:	e004      	b.n	8008372 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800836e:	2301      	movs	r3, #1
 8008370:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008372:	f000 fc47 	bl	8008c04 <vPortExitCritical>

	return xReturn;
 8008376:	69fb      	ldr	r3, [r7, #28]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3720      	adds	r7, #32
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	200004ec 	.word	0x200004ec
 8008384:	20000500 	.word	0x20000500

08008388 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800838c:	4b03      	ldr	r3, [pc, #12]	; (800839c <vTaskMissedYield+0x14>)
 800838e:	2201      	movs	r2, #1
 8008390:	601a      	str	r2, [r3, #0]
}
 8008392:	bf00      	nop
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	200004fc 	.word	0x200004fc

080083a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083a8:	f000 f852 	bl	8008450 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083ac:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <prvIdleTask+0x28>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d9f9      	bls.n	80083a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083b4:	4b05      	ldr	r3, [pc, #20]	; (80083cc <prvIdleTask+0x2c>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083c4:	e7f0      	b.n	80083a8 <prvIdleTask+0x8>
 80083c6:	bf00      	nop
 80083c8:	200003ec 	.word	0x200003ec
 80083cc:	e000ed04 	.word	0xe000ed04

080083d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083d6:	2300      	movs	r3, #0
 80083d8:	607b      	str	r3, [r7, #4]
 80083da:	e00c      	b.n	80083f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4a12      	ldr	r2, [pc, #72]	; (8008430 <prvInitialiseTaskLists+0x60>)
 80083e8:	4413      	add	r3, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fee4 	bl	80071b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3301      	adds	r3, #1
 80083f4:	607b      	str	r3, [r7, #4]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b06      	cmp	r3, #6
 80083fa:	d9ef      	bls.n	80083dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083fc:	480d      	ldr	r0, [pc, #52]	; (8008434 <prvInitialiseTaskLists+0x64>)
 80083fe:	f7fe fedb 	bl	80071b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008402:	480d      	ldr	r0, [pc, #52]	; (8008438 <prvInitialiseTaskLists+0x68>)
 8008404:	f7fe fed8 	bl	80071b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008408:	480c      	ldr	r0, [pc, #48]	; (800843c <prvInitialiseTaskLists+0x6c>)
 800840a:	f7fe fed5 	bl	80071b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800840e:	480c      	ldr	r0, [pc, #48]	; (8008440 <prvInitialiseTaskLists+0x70>)
 8008410:	f7fe fed2 	bl	80071b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008414:	480b      	ldr	r0, [pc, #44]	; (8008444 <prvInitialiseTaskLists+0x74>)
 8008416:	f7fe fecf 	bl	80071b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <prvInitialiseTaskLists+0x78>)
 800841c:	4a05      	ldr	r2, [pc, #20]	; (8008434 <prvInitialiseTaskLists+0x64>)
 800841e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008420:	4b0a      	ldr	r3, [pc, #40]	; (800844c <prvInitialiseTaskLists+0x7c>)
 8008422:	4a05      	ldr	r2, [pc, #20]	; (8008438 <prvInitialiseTaskLists+0x68>)
 8008424:	601a      	str	r2, [r3, #0]
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200003ec 	.word	0x200003ec
 8008434:	20000478 	.word	0x20000478
 8008438:	2000048c 	.word	0x2000048c
 800843c:	200004a8 	.word	0x200004a8
 8008440:	200004bc 	.word	0x200004bc
 8008444:	200004d4 	.word	0x200004d4
 8008448:	200004a0 	.word	0x200004a0
 800844c:	200004a4 	.word	0x200004a4

08008450 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008456:	e019      	b.n	800848c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008458:	f000 fba4 	bl	8008ba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800845c:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <prvCheckTasksWaitingTermination+0x50>)
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3304      	adds	r3, #4
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe ff2f 	bl	80072cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800846e:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <prvCheckTasksWaitingTermination+0x54>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3b01      	subs	r3, #1
 8008474:	4a0b      	ldr	r2, [pc, #44]	; (80084a4 <prvCheckTasksWaitingTermination+0x54>)
 8008476:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008478:	4b0b      	ldr	r3, [pc, #44]	; (80084a8 <prvCheckTasksWaitingTermination+0x58>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3b01      	subs	r3, #1
 800847e:	4a0a      	ldr	r2, [pc, #40]	; (80084a8 <prvCheckTasksWaitingTermination+0x58>)
 8008480:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008482:	f000 fbbf 	bl	8008c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f810 	bl	80084ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <prvCheckTasksWaitingTermination+0x58>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e1      	bne.n	8008458 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	200004bc 	.word	0x200004bc
 80084a4:	200004e8 	.word	0x200004e8
 80084a8:	200004d0 	.word	0x200004d0

080084ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fd21 	bl	8008f00 <vPortFree>
			vPortFree( pxTCB );
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fd1e 	bl	8008f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084d2:	4b0c      	ldr	r3, [pc, #48]	; (8008504 <prvResetNextTaskUnblockTime+0x38>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d104      	bne.n	80084e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <prvResetNextTaskUnblockTime+0x3c>)
 80084de:	f04f 32ff 	mov.w	r2, #4294967295
 80084e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084e4:	e008      	b.n	80084f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e6:	4b07      	ldr	r3, [pc, #28]	; (8008504 <prvResetNextTaskUnblockTime+0x38>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	4a04      	ldr	r2, [pc, #16]	; (8008508 <prvResetNextTaskUnblockTime+0x3c>)
 80084f6:	6013      	str	r3, [r2, #0]
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	200004a0 	.word	0x200004a0
 8008508:	20000508 	.word	0x20000508

0800850c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008512:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <xTaskGetSchedulerState+0x34>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800851a:	2301      	movs	r3, #1
 800851c:	607b      	str	r3, [r7, #4]
 800851e:	e008      	b.n	8008532 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008520:	4b08      	ldr	r3, [pc, #32]	; (8008544 <xTaskGetSchedulerState+0x38>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008528:	2302      	movs	r3, #2
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	e001      	b.n	8008532 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800852e:	2300      	movs	r3, #0
 8008530:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008532:	687b      	ldr	r3, [r7, #4]
	}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	200004f4 	.word	0x200004f4
 8008544:	20000510 	.word	0x20000510

08008548 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d05e      	beq.n	800861c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008562:	4b31      	ldr	r3, [pc, #196]	; (8008628 <xTaskPriorityInherit+0xe0>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	429a      	cmp	r2, r3
 800856a:	d24e      	bcs.n	800860a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	db06      	blt.n	8008582 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008574:	4b2c      	ldr	r3, [pc, #176]	; (8008628 <xTaskPriorityInherit+0xe0>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	f1c3 0207 	rsb	r2, r3, #7
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	6959      	ldr	r1, [r3, #20]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4a26      	ldr	r2, [pc, #152]	; (800862c <xTaskPriorityInherit+0xe4>)
 8008594:	4413      	add	r3, r2
 8008596:	4299      	cmp	r1, r3
 8008598:	d12f      	bne.n	80085fa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	3304      	adds	r3, #4
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fe94 	bl	80072cc <uxListRemove>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	2201      	movs	r2, #1
 80085b0:	fa02 f303 	lsl.w	r3, r2, r3
 80085b4:	43da      	mvns	r2, r3
 80085b6:	4b1e      	ldr	r3, [pc, #120]	; (8008630 <xTaskPriorityInherit+0xe8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4013      	ands	r3, r2
 80085bc:	4a1c      	ldr	r2, [pc, #112]	; (8008630 <xTaskPriorityInherit+0xe8>)
 80085be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085c0:	4b19      	ldr	r3, [pc, #100]	; (8008628 <xTaskPriorityInherit+0xe0>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	2201      	movs	r2, #1
 80085d0:	409a      	lsls	r2, r3
 80085d2:	4b17      	ldr	r3, [pc, #92]	; (8008630 <xTaskPriorityInherit+0xe8>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	4a15      	ldr	r2, [pc, #84]	; (8008630 <xTaskPriorityInherit+0xe8>)
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4a10      	ldr	r2, [pc, #64]	; (800862c <xTaskPriorityInherit+0xe4>)
 80085ea:	441a      	add	r2, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f7fe fe0d 	bl	8007212 <vListInsertEnd>
 80085f8:	e004      	b.n	8008604 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085fa:	4b0b      	ldr	r3, [pc, #44]	; (8008628 <xTaskPriorityInherit+0xe0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	e008      	b.n	800861c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800860e:	4b06      	ldr	r3, [pc, #24]	; (8008628 <xTaskPriorityInherit+0xe0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	429a      	cmp	r2, r3
 8008616:	d201      	bcs.n	800861c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800861c:	68fb      	ldr	r3, [r7, #12]
	}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	200003e8 	.word	0x200003e8
 800862c:	200003ec 	.word	0x200003ec
 8008630:	200004f0 	.word	0x200004f0

08008634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008640:	2300      	movs	r3, #0
 8008642:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d06e      	beq.n	8008728 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800864a:	4b3a      	ldr	r3, [pc, #232]	; (8008734 <xTaskPriorityDisinherit+0x100>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	429a      	cmp	r2, r3
 8008652:	d00a      	beq.n	800866a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008654:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	60fb      	str	r3, [r7, #12]
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10a      	bne.n	8008688 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008672:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	60bb      	str	r3, [r7, #8]
}
 8008684:	bf00      	nop
 8008686:	e7fe      	b.n	8008686 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800868c:	1e5a      	subs	r2, r3, #1
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869a:	429a      	cmp	r2, r3
 800869c:	d044      	beq.n	8008728 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d140      	bne.n	8008728 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	3304      	adds	r3, #4
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe fe0e 	bl	80072cc <uxListRemove>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d115      	bne.n	80086e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ba:	491f      	ldr	r1, [pc, #124]	; (8008738 <xTaskPriorityDisinherit+0x104>)
 80086bc:	4613      	mov	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <xTaskPriorityDisinherit+0xae>
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	2201      	movs	r2, #1
 80086d2:	fa02 f303 	lsl.w	r3, r2, r3
 80086d6:	43da      	mvns	r2, r3
 80086d8:	4b18      	ldr	r3, [pc, #96]	; (800873c <xTaskPriorityDisinherit+0x108>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4013      	ands	r3, r2
 80086de:	4a17      	ldr	r2, [pc, #92]	; (800873c <xTaskPriorityDisinherit+0x108>)
 80086e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ee:	f1c3 0207 	rsb	r2, r3, #7
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fa:	2201      	movs	r2, #1
 80086fc:	409a      	lsls	r2, r3
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <xTaskPriorityDisinherit+0x108>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4313      	orrs	r3, r2
 8008704:	4a0d      	ldr	r2, [pc, #52]	; (800873c <xTaskPriorityDisinherit+0x108>)
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4a08      	ldr	r2, [pc, #32]	; (8008738 <xTaskPriorityDisinherit+0x104>)
 8008716:	441a      	add	r2, r3
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	3304      	adds	r3, #4
 800871c:	4619      	mov	r1, r3
 800871e:	4610      	mov	r0, r2
 8008720:	f7fe fd77 	bl	8007212 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008724:	2301      	movs	r3, #1
 8008726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008728:	697b      	ldr	r3, [r7, #20]
	}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	200003e8 	.word	0x200003e8
 8008738:	200003ec 	.word	0x200003ec
 800873c:	200004f0 	.word	0x200004f0

08008740 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800874e:	2301      	movs	r3, #1
 8008750:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d077      	beq.n	8008848 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10a      	bne.n	8008776 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008760:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	60fb      	str	r3, [r7, #12]
}
 8008772:	bf00      	nop
 8008774:	e7fe      	b.n	8008774 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	d902      	bls.n	8008786 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	61fb      	str	r3, [r7, #28]
 8008784:	e002      	b.n	800878c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	429a      	cmp	r2, r3
 8008794:	d058      	beq.n	8008848 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	429a      	cmp	r2, r3
 800879e:	d153      	bne.n	8008848 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80087a0:	4b2b      	ldr	r3, [pc, #172]	; (8008850 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d10a      	bne.n	80087c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80087aa:	f04f 0380 	mov.w	r3, #128	; 0x80
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	60bb      	str	r3, [r7, #8]
}
 80087bc:	bf00      	nop
 80087be:	e7fe      	b.n	80087be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	69fa      	ldr	r2, [r7, #28]
 80087ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	db04      	blt.n	80087de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	f1c3 0207 	rsb	r2, r3, #7
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	6959      	ldr	r1, [r3, #20]
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	4613      	mov	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4a19      	ldr	r2, [pc, #100]	; (8008854 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80087ee:	4413      	add	r3, r2
 80087f0:	4299      	cmp	r1, r3
 80087f2:	d129      	bne.n	8008848 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fd67 	bl	80072cc <uxListRemove>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10a      	bne.n	800881a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	2201      	movs	r2, #1
 800880a:	fa02 f303 	lsl.w	r3, r2, r3
 800880e:	43da      	mvns	r2, r3
 8008810:	4b11      	ldr	r3, [pc, #68]	; (8008858 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4013      	ands	r3, r2
 8008816:	4a10      	ldr	r2, [pc, #64]	; (8008858 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008818:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	2201      	movs	r2, #1
 8008820:	409a      	lsls	r2, r3
 8008822:	4b0d      	ldr	r3, [pc, #52]	; (8008858 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4313      	orrs	r3, r2
 8008828:	4a0b      	ldr	r2, [pc, #44]	; (8008858 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008830:	4613      	mov	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4a06      	ldr	r2, [pc, #24]	; (8008854 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800883a:	441a      	add	r2, r3
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	3304      	adds	r3, #4
 8008840:	4619      	mov	r1, r3
 8008842:	4610      	mov	r0, r2
 8008844:	f7fe fce5 	bl	8007212 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008848:	bf00      	nop
 800884a:	3720      	adds	r7, #32
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	200003e8 	.word	0x200003e8
 8008854:	200003ec 	.word	0x200003ec
 8008858:	200004f0 	.word	0x200004f0

0800885c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008860:	4b07      	ldr	r3, [pc, #28]	; (8008880 <pvTaskIncrementMutexHeldCount+0x24>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d004      	beq.n	8008872 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008868:	4b05      	ldr	r3, [pc, #20]	; (8008880 <pvTaskIncrementMutexHeldCount+0x24>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800886e:	3201      	adds	r2, #1
 8008870:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8008872:	4b03      	ldr	r3, [pc, #12]	; (8008880 <pvTaskIncrementMutexHeldCount+0x24>)
 8008874:	681b      	ldr	r3, [r3, #0]
	}
 8008876:	4618      	mov	r0, r3
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	200003e8 	.word	0x200003e8

08008884 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800888e:	4b29      	ldr	r3, [pc, #164]	; (8008934 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008894:	4b28      	ldr	r3, [pc, #160]	; (8008938 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3304      	adds	r3, #4
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fd16 	bl	80072cc <uxListRemove>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10b      	bne.n	80088be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80088a6:	4b24      	ldr	r3, [pc, #144]	; (8008938 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	2201      	movs	r2, #1
 80088ae:	fa02 f303 	lsl.w	r3, r2, r3
 80088b2:	43da      	mvns	r2, r3
 80088b4:	4b21      	ldr	r3, [pc, #132]	; (800893c <prvAddCurrentTaskToDelayedList+0xb8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4013      	ands	r3, r2
 80088ba:	4a20      	ldr	r2, [pc, #128]	; (800893c <prvAddCurrentTaskToDelayedList+0xb8>)
 80088bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c4:	d10a      	bne.n	80088dc <prvAddCurrentTaskToDelayedList+0x58>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d007      	beq.n	80088dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088cc:	4b1a      	ldr	r3, [pc, #104]	; (8008938 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3304      	adds	r3, #4
 80088d2:	4619      	mov	r1, r3
 80088d4:	481a      	ldr	r0, [pc, #104]	; (8008940 <prvAddCurrentTaskToDelayedList+0xbc>)
 80088d6:	f7fe fc9c 	bl	8007212 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088da:	e026      	b.n	800892a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4413      	add	r3, r2
 80088e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088e4:	4b14      	ldr	r3, [pc, #80]	; (8008938 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d209      	bcs.n	8008908 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088f4:	4b13      	ldr	r3, [pc, #76]	; (8008944 <prvAddCurrentTaskToDelayedList+0xc0>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4619      	mov	r1, r3
 8008900:	4610      	mov	r0, r2
 8008902:	f7fe fcaa 	bl	800725a <vListInsert>
}
 8008906:	e010      	b.n	800892a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008908:	4b0f      	ldr	r3, [pc, #60]	; (8008948 <prvAddCurrentTaskToDelayedList+0xc4>)
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <prvAddCurrentTaskToDelayedList+0xb4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3304      	adds	r3, #4
 8008912:	4619      	mov	r1, r3
 8008914:	4610      	mov	r0, r2
 8008916:	f7fe fca0 	bl	800725a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800891a:	4b0c      	ldr	r3, [pc, #48]	; (800894c <prvAddCurrentTaskToDelayedList+0xc8>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	429a      	cmp	r2, r3
 8008922:	d202      	bcs.n	800892a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008924:	4a09      	ldr	r2, [pc, #36]	; (800894c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	6013      	str	r3, [r2, #0]
}
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	200004ec 	.word	0x200004ec
 8008938:	200003e8 	.word	0x200003e8
 800893c:	200004f0 	.word	0x200004f0
 8008940:	200004d4 	.word	0x200004d4
 8008944:	200004a4 	.word	0x200004a4
 8008948:	200004a0 	.word	0x200004a0
 800894c:	20000508 	.word	0x20000508

08008950 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3b04      	subs	r3, #4
 8008960:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3b04      	subs	r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f023 0201 	bic.w	r2, r3, #1
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3b04      	subs	r3, #4
 800897e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008980:	4a0c      	ldr	r2, [pc, #48]	; (80089b4 <pxPortInitialiseStack+0x64>)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b14      	subs	r3, #20
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3b04      	subs	r3, #4
 8008996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f06f 0202 	mvn.w	r2, #2
 800899e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3b20      	subs	r3, #32
 80089a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089a6:	68fb      	ldr	r3, [r7, #12]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	080089b9 	.word	0x080089b9

080089b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089c2:	4b12      	ldr	r3, [pc, #72]	; (8008a0c <prvTaskExitError+0x54>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ca:	d00a      	beq.n	80089e2 <prvTaskExitError+0x2a>
	__asm volatile
 80089cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	60fb      	str	r3, [r7, #12]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <prvTaskExitError+0x28>
	__asm volatile
 80089e2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	60bb      	str	r3, [r7, #8]
}
 80089f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089f6:	bf00      	nop
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0fc      	beq.n	80089f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089fe:	bf00      	nop
 8008a00:	bf00      	nop
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	200000f4 	.word	0x200000f4

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	4770      	bx	lr
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst2>:
 8008a30:	200003e8 	.word	0x200003e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a38:	4808      	ldr	r0, [pc, #32]	; (8008a5c <prvPortStartFirstTask+0x24>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8814 	msr	CONTROL, r0
 8008a4a:	b662      	cpsie	i
 8008a4c:	b661      	cpsie	f
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	df00      	svc	0
 8008a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed08 	.word	0xe000ed08

08008a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a66:	4b46      	ldr	r3, [pc, #280]	; (8008b80 <xPortStartScheduler+0x120>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a46      	ldr	r2, [pc, #280]	; (8008b84 <xPortStartScheduler+0x124>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10a      	bne.n	8008a86 <xPortStartScheduler+0x26>
	__asm volatile
 8008a70:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	613b      	str	r3, [r7, #16]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a86:	4b3e      	ldr	r3, [pc, #248]	; (8008b80 <xPortStartScheduler+0x120>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a3f      	ldr	r2, [pc, #252]	; (8008b88 <xPortStartScheduler+0x128>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10a      	bne.n	8008aa6 <xPortStartScheduler+0x46>
	__asm volatile
 8008a90:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aa6:	4b39      	ldr	r3, [pc, #228]	; (8008b8c <xPortStartScheduler+0x12c>)
 8008aa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	22ff      	movs	r2, #255	; 0xff
 8008ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	4b31      	ldr	r3, [pc, #196]	; (8008b90 <xPortStartScheduler+0x130>)
 8008acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ace:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <xPortStartScheduler+0x134>)
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ad4:	e009      	b.n	8008aea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ad6:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <xPortStartScheduler+0x134>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	4a2d      	ldr	r2, [pc, #180]	; (8008b94 <xPortStartScheduler+0x134>)
 8008ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aea:	78fb      	ldrb	r3, [r7, #3]
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af2:	2b80      	cmp	r3, #128	; 0x80
 8008af4:	d0ef      	beq.n	8008ad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008af6:	4b27      	ldr	r3, [pc, #156]	; (8008b94 <xPortStartScheduler+0x134>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f1c3 0307 	rsb	r3, r3, #7
 8008afe:	2b04      	cmp	r3, #4
 8008b00:	d00a      	beq.n	8008b18 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b02:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60bb      	str	r3, [r7, #8]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b18:	4b1e      	ldr	r3, [pc, #120]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	4a1d      	ldr	r2, [pc, #116]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b22:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b2a:	4a1a      	ldr	r2, [pc, #104]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b36:	4b18      	ldr	r3, [pc, #96]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a17      	ldr	r2, [pc, #92]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b42:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a14      	ldr	r2, [pc, #80]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b4e:	f000 f8dd 	bl	8008d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b52:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <xPortStartScheduler+0x13c>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b58:	f000 f8fc 	bl	8008d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b5c:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <xPortStartScheduler+0x140>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a0f      	ldr	r2, [pc, #60]	; (8008ba0 <xPortStartScheduler+0x140>)
 8008b62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b68:	f7ff ff66 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b6c:	f7ff fab2 	bl	80080d4 <vTaskSwitchContext>
	prvTaskExitError();
 8008b70:	f7ff ff22 	bl	80089b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	e000ed00 	.word	0xe000ed00
 8008b84:	410fc271 	.word	0x410fc271
 8008b88:	410fc270 	.word	0x410fc270
 8008b8c:	e000e400 	.word	0xe000e400
 8008b90:	20000514 	.word	0x20000514
 8008b94:	20000518 	.word	0x20000518
 8008b98:	e000ed20 	.word	0xe000ed20
 8008b9c:	200000f4 	.word	0x200000f4
 8008ba0:	e000ef34 	.word	0xe000ef34

08008ba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
	__asm volatile
 8008baa:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	607b      	str	r3, [r7, #4]
}
 8008bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <vPortEnterCritical+0x58>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	4a0d      	ldr	r2, [pc, #52]	; (8008bfc <vPortEnterCritical+0x58>)
 8008bc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bc8:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <vPortEnterCritical+0x58>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d10f      	bne.n	8008bf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <vPortEnterCritical+0x5c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bda:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	603b      	str	r3, [r7, #0]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <vPortEnterCritical+0x4a>
	}
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	200000f4 	.word	0x200000f4
 8008c00:	e000ed04 	.word	0xe000ed04

08008c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c0a:	4b12      	ldr	r3, [pc, #72]	; (8008c54 <vPortExitCritical+0x50>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10a      	bne.n	8008c28 <vPortExitCritical+0x24>
	__asm volatile
 8008c12:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	607b      	str	r3, [r7, #4]
}
 8008c24:	bf00      	nop
 8008c26:	e7fe      	b.n	8008c26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <vPortExitCritical+0x50>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <vPortExitCritical+0x50>)
 8008c30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c32:	4b08      	ldr	r3, [pc, #32]	; (8008c54 <vPortExitCritical+0x50>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d105      	bne.n	8008c46 <vPortExitCritical+0x42>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	200000f4 	.word	0x200000f4
	...

08008c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c60:	f3ef 8009 	mrs	r0, PSP
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4b15      	ldr	r3, [pc, #84]	; (8008cc0 <pxCurrentTCBConst>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	f01e 0f10 	tst.w	lr, #16
 8008c70:	bf08      	it	eq
 8008c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	6010      	str	r0, [r2, #0]
 8008c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c80:	f04f 0080 	mov.w	r0, #128	; 0x80
 8008c84:	f380 8811 	msr	BASEPRI, r0
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f7ff fa20 	bl	80080d4 <vTaskSwitchContext>
 8008c94:	f04f 0000 	mov.w	r0, #0
 8008c98:	f380 8811 	msr	BASEPRI, r0
 8008c9c:	bc09      	pop	{r0, r3}
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	6808      	ldr	r0, [r1, #0]
 8008ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca6:	f01e 0f10 	tst.w	lr, #16
 8008caa:	bf08      	it	eq
 8008cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cb0:	f380 8809 	msr	PSP, r0
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w

08008cc0 <pxCurrentTCBConst>:
 8008cc0:	200003e8 	.word	0x200003e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop

08008cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cce:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	607b      	str	r3, [r7, #4]
}
 8008ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ce2:	f7ff f93f 	bl	8007f64 <xTaskIncrementTick>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <xPortSysTickHandler+0x40>)
 8008cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f383 8811 	msr	BASEPRI, r3
}
 8008cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d10:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d16:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <vPortSetupTimerInterrupt+0x38>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <vPortSetupTimerInterrupt+0x3c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <vPortSetupTimerInterrupt+0x40>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	099b      	lsrs	r3, r3, #6
 8008d28:	4a09      	ldr	r2, [pc, #36]	; (8008d50 <vPortSetupTimerInterrupt+0x44>)
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d2e:	4b04      	ldr	r3, [pc, #16]	; (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d30:	2207      	movs	r2, #7
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	e000e010 	.word	0xe000e010
 8008d44:	e000e018 	.word	0xe000e018
 8008d48:	200000e8 	.word	0x200000e8
 8008d4c:	10624dd3 	.word	0x10624dd3
 8008d50:	e000e014 	.word	0xe000e014

08008d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d64 <vPortEnableVFP+0x10>
 8008d58:	6801      	ldr	r1, [r0, #0]
 8008d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d5e:	6001      	str	r1, [r0, #0]
 8008d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d62:	bf00      	nop
 8008d64:	e000ed88 	.word	0xe000ed88

08008d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08a      	sub	sp, #40	; 0x28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d74:	f7ff f84c 	bl	8007e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d78:	4b5b      	ldr	r3, [pc, #364]	; (8008ee8 <pvPortMalloc+0x180>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d80:	f000 f920 	bl	8008fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d84:	4b59      	ldr	r3, [pc, #356]	; (8008eec <pvPortMalloc+0x184>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f040 8093 	bne.w	8008eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01d      	beq.n	8008dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d98:	2208      	movs	r2, #8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d014      	beq.n	8008dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f023 0307 	bic.w	r3, r3, #7
 8008db0:	3308      	adds	r3, #8
 8008db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8008dbe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	617b      	str	r3, [r7, #20]
}
 8008dd0:	bf00      	nop
 8008dd2:	e7fe      	b.n	8008dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d06e      	beq.n	8008eb8 <pvPortMalloc+0x150>
 8008dda:	4b45      	ldr	r3, [pc, #276]	; (8008ef0 <pvPortMalloc+0x188>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d869      	bhi.n	8008eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008de4:	4b43      	ldr	r3, [pc, #268]	; (8008ef4 <pvPortMalloc+0x18c>)
 8008de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008de8:	4b42      	ldr	r3, [pc, #264]	; (8008ef4 <pvPortMalloc+0x18c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dee:	e004      	b.n	8008dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d903      	bls.n	8008e0c <pvPortMalloc+0xa4>
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f1      	bne.n	8008df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e0c:	4b36      	ldr	r3, [pc, #216]	; (8008ee8 <pvPortMalloc+0x180>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d050      	beq.n	8008eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	4413      	add	r3, r2
 8008e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	2308      	movs	r3, #8
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d91f      	bls.n	8008e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <pvPortMalloc+0xf8>
	__asm volatile
 8008e4a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	613b      	str	r3, [r7, #16]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	1ad2      	subs	r2, r2, r3
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e72:	69b8      	ldr	r0, [r7, #24]
 8008e74:	f000 f908 	bl	8009088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e78:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	4a1b      	ldr	r2, [pc, #108]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e86:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b1b      	ldr	r3, [pc, #108]	; (8008ef8 <pvPortMalloc+0x190>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d203      	bcs.n	8008e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e92:	4b17      	ldr	r3, [pc, #92]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a18      	ldr	r2, [pc, #96]	; (8008ef8 <pvPortMalloc+0x190>)
 8008e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	4b13      	ldr	r3, [pc, #76]	; (8008eec <pvPortMalloc+0x184>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <pvPortMalloc+0x194>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	4a11      	ldr	r2, [pc, #68]	; (8008efc <pvPortMalloc+0x194>)
 8008eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008eb8:	f7fe ffb8 	bl	8007e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <pvPortMalloc+0x174>
	__asm volatile
 8008ec6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	60fb      	str	r3, [r7, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <pvPortMalloc+0x172>
	return pvReturn;
 8008edc:	69fb      	ldr	r3, [r7, #28]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3728      	adds	r7, #40	; 0x28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20004524 	.word	0x20004524
 8008eec:	20004538 	.word	0x20004538
 8008ef0:	20004528 	.word	0x20004528
 8008ef4:	2000451c 	.word	0x2000451c
 8008ef8:	2000452c 	.word	0x2000452c
 8008efc:	20004530 	.word	0x20004530

08008f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d04d      	beq.n	8008fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f12:	2308      	movs	r3, #8
 8008f14:	425b      	negs	r3, r3
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4413      	add	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <vPortFree+0xb8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <vPortFree+0x44>
	__asm volatile
 8008f2e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	60fb      	str	r3, [r7, #12]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <vPortFree+0x62>
	__asm volatile
 8008f4c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	60bb      	str	r3, [r7, #8]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	4b14      	ldr	r3, [pc, #80]	; (8008fb8 <vPortFree+0xb8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01e      	beq.n	8008fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d11a      	bne.n	8008fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <vPortFree+0xb8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	401a      	ands	r2, r3
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f88:	f7fe ff42 	bl	8007e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <vPortFree+0xbc>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4413      	add	r3, r2
 8008f96:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <vPortFree+0xbc>)
 8008f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f9a:	6938      	ldr	r0, [r7, #16]
 8008f9c:	f000 f874 	bl	8009088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <vPortFree+0xc0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	4a06      	ldr	r2, [pc, #24]	; (8008fc0 <vPortFree+0xc0>)
 8008fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008faa:	f7fe ff3f 	bl	8007e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fae:	bf00      	nop
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20004538 	.word	0x20004538
 8008fbc:	20004528 	.word	0x20004528
 8008fc0:	20004534 	.word	0x20004534

08008fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fd0:	4b27      	ldr	r3, [pc, #156]	; (8009070 <prvHeapInit+0xac>)
 8008fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00c      	beq.n	8008ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <prvHeapInit+0xac>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <prvHeapInit+0xb0>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <prvHeapInit+0xb0>)
 8009004:	2200      	movs	r2, #0
 8009006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009010:	2208      	movs	r2, #8
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0307 	bic.w	r3, r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a15      	ldr	r2, [pc, #84]	; (8009078 <prvHeapInit+0xb4>)
 8009024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <prvHeapInit+0xb4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <prvHeapInit+0xb4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <prvHeapInit+0xb4>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4a0a      	ldr	r2, [pc, #40]	; (800907c <prvHeapInit+0xb8>)
 8009052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4a09      	ldr	r2, [pc, #36]	; (8009080 <prvHeapInit+0xbc>)
 800905a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <prvHeapInit+0xc0>)
 800905e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009062:	601a      	str	r2, [r3, #0]
}
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	2000051c 	.word	0x2000051c
 8009074:	2000451c 	.word	0x2000451c
 8009078:	20004524 	.word	0x20004524
 800907c:	2000452c 	.word	0x2000452c
 8009080:	20004528 	.word	0x20004528
 8009084:	20004538 	.word	0x20004538

08009088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009090:	4b28      	ldr	r3, [pc, #160]	; (8009134 <prvInsertBlockIntoFreeList+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e002      	b.n	800909c <prvInsertBlockIntoFreeList+0x14>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d8f7      	bhi.n	8009096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	4413      	add	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d108      	bne.n	80090ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	441a      	add	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d118      	bne.n	8009110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d00d      	beq.n	8009106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e008      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e003      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	429a      	cmp	r2, r3
 800911e:	d002      	beq.n	8009126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	2000451c 	.word	0x2000451c
 8009138:	20004524 	.word	0x20004524

0800913c <__errno>:
 800913c:	4b01      	ldr	r3, [pc, #4]	; (8009144 <__errno+0x8>)
 800913e:	6818      	ldr	r0, [r3, #0]
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	200000f8 	.word	0x200000f8

08009148 <__libc_init_array>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	4d0d      	ldr	r5, [pc, #52]	; (8009180 <__libc_init_array+0x38>)
 800914c:	4c0d      	ldr	r4, [pc, #52]	; (8009184 <__libc_init_array+0x3c>)
 800914e:	1b64      	subs	r4, r4, r5
 8009150:	10a4      	asrs	r4, r4, #2
 8009152:	2600      	movs	r6, #0
 8009154:	42a6      	cmp	r6, r4
 8009156:	d109      	bne.n	800916c <__libc_init_array+0x24>
 8009158:	4d0b      	ldr	r5, [pc, #44]	; (8009188 <__libc_init_array+0x40>)
 800915a:	4c0c      	ldr	r4, [pc, #48]	; (800918c <__libc_init_array+0x44>)
 800915c:	f001 f832 	bl	800a1c4 <_init>
 8009160:	1b64      	subs	r4, r4, r5
 8009162:	10a4      	asrs	r4, r4, #2
 8009164:	2600      	movs	r6, #0
 8009166:	42a6      	cmp	r6, r4
 8009168:	d105      	bne.n	8009176 <__libc_init_array+0x2e>
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009170:	4798      	blx	r3
 8009172:	3601      	adds	r6, #1
 8009174:	e7ee      	b.n	8009154 <__libc_init_array+0xc>
 8009176:	f855 3b04 	ldr.w	r3, [r5], #4
 800917a:	4798      	blx	r3
 800917c:	3601      	adds	r6, #1
 800917e:	e7f2      	b.n	8009166 <__libc_init_array+0x1e>
 8009180:	0800a3b8 	.word	0x0800a3b8
 8009184:	0800a3b8 	.word	0x0800a3b8
 8009188:	0800a3b8 	.word	0x0800a3b8
 800918c:	0800a3bc 	.word	0x0800a3bc

08009190 <memcpy>:
 8009190:	440a      	add	r2, r1
 8009192:	4291      	cmp	r1, r2
 8009194:	f100 33ff 	add.w	r3, r0, #4294967295
 8009198:	d100      	bne.n	800919c <memcpy+0xc>
 800919a:	4770      	bx	lr
 800919c:	b510      	push	{r4, lr}
 800919e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091a6:	4291      	cmp	r1, r2
 80091a8:	d1f9      	bne.n	800919e <memcpy+0xe>
 80091aa:	bd10      	pop	{r4, pc}

080091ac <memset>:
 80091ac:	4402      	add	r2, r0
 80091ae:	4603      	mov	r3, r0
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d100      	bne.n	80091b6 <memset+0xa>
 80091b4:	4770      	bx	lr
 80091b6:	f803 1b01 	strb.w	r1, [r3], #1
 80091ba:	e7f9      	b.n	80091b0 <memset+0x4>

080091bc <iprintf>:
 80091bc:	b40f      	push	{r0, r1, r2, r3}
 80091be:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <iprintf+0x2c>)
 80091c0:	b513      	push	{r0, r1, r4, lr}
 80091c2:	681c      	ldr	r4, [r3, #0]
 80091c4:	b124      	cbz	r4, 80091d0 <iprintf+0x14>
 80091c6:	69a3      	ldr	r3, [r4, #24]
 80091c8:	b913      	cbnz	r3, 80091d0 <iprintf+0x14>
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 fa5e 	bl	800968c <__sinit>
 80091d0:	ab05      	add	r3, sp, #20
 80091d2:	9a04      	ldr	r2, [sp, #16]
 80091d4:	68a1      	ldr	r1, [r4, #8]
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	4620      	mov	r0, r4
 80091da:	f000 fc67 	bl	8009aac <_vfiprintf_r>
 80091de:	b002      	add	sp, #8
 80091e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e4:	b004      	add	sp, #16
 80091e6:	4770      	bx	lr
 80091e8:	200000f8 	.word	0x200000f8

080091ec <_puts_r>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	460e      	mov	r6, r1
 80091f0:	4605      	mov	r5, r0
 80091f2:	b118      	cbz	r0, 80091fc <_puts_r+0x10>
 80091f4:	6983      	ldr	r3, [r0, #24]
 80091f6:	b90b      	cbnz	r3, 80091fc <_puts_r+0x10>
 80091f8:	f000 fa48 	bl	800968c <__sinit>
 80091fc:	69ab      	ldr	r3, [r5, #24]
 80091fe:	68ac      	ldr	r4, [r5, #8]
 8009200:	b913      	cbnz	r3, 8009208 <_puts_r+0x1c>
 8009202:	4628      	mov	r0, r5
 8009204:	f000 fa42 	bl	800968c <__sinit>
 8009208:	4b2c      	ldr	r3, [pc, #176]	; (80092bc <_puts_r+0xd0>)
 800920a:	429c      	cmp	r4, r3
 800920c:	d120      	bne.n	8009250 <_puts_r+0x64>
 800920e:	686c      	ldr	r4, [r5, #4]
 8009210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009212:	07db      	lsls	r3, r3, #31
 8009214:	d405      	bmi.n	8009222 <_puts_r+0x36>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	0598      	lsls	r0, r3, #22
 800921a:	d402      	bmi.n	8009222 <_puts_r+0x36>
 800921c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800921e:	f000 fad3 	bl	80097c8 <__retarget_lock_acquire_recursive>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	0719      	lsls	r1, r3, #28
 8009226:	d51d      	bpl.n	8009264 <_puts_r+0x78>
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	b1db      	cbz	r3, 8009264 <_puts_r+0x78>
 800922c:	3e01      	subs	r6, #1
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009234:	3b01      	subs	r3, #1
 8009236:	60a3      	str	r3, [r4, #8]
 8009238:	bb39      	cbnz	r1, 800928a <_puts_r+0x9e>
 800923a:	2b00      	cmp	r3, #0
 800923c:	da38      	bge.n	80092b0 <_puts_r+0xc4>
 800923e:	4622      	mov	r2, r4
 8009240:	210a      	movs	r1, #10
 8009242:	4628      	mov	r0, r5
 8009244:	f000 f848 	bl	80092d8 <__swbuf_r>
 8009248:	3001      	adds	r0, #1
 800924a:	d011      	beq.n	8009270 <_puts_r+0x84>
 800924c:	250a      	movs	r5, #10
 800924e:	e011      	b.n	8009274 <_puts_r+0x88>
 8009250:	4b1b      	ldr	r3, [pc, #108]	; (80092c0 <_puts_r+0xd4>)
 8009252:	429c      	cmp	r4, r3
 8009254:	d101      	bne.n	800925a <_puts_r+0x6e>
 8009256:	68ac      	ldr	r4, [r5, #8]
 8009258:	e7da      	b.n	8009210 <_puts_r+0x24>
 800925a:	4b1a      	ldr	r3, [pc, #104]	; (80092c4 <_puts_r+0xd8>)
 800925c:	429c      	cmp	r4, r3
 800925e:	bf08      	it	eq
 8009260:	68ec      	ldreq	r4, [r5, #12]
 8009262:	e7d5      	b.n	8009210 <_puts_r+0x24>
 8009264:	4621      	mov	r1, r4
 8009266:	4628      	mov	r0, r5
 8009268:	f000 f888 	bl	800937c <__swsetup_r>
 800926c:	2800      	cmp	r0, #0
 800926e:	d0dd      	beq.n	800922c <_puts_r+0x40>
 8009270:	f04f 35ff 	mov.w	r5, #4294967295
 8009274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009276:	07da      	lsls	r2, r3, #31
 8009278:	d405      	bmi.n	8009286 <_puts_r+0x9a>
 800927a:	89a3      	ldrh	r3, [r4, #12]
 800927c:	059b      	lsls	r3, r3, #22
 800927e:	d402      	bmi.n	8009286 <_puts_r+0x9a>
 8009280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009282:	f000 faa2 	bl	80097ca <__retarget_lock_release_recursive>
 8009286:	4628      	mov	r0, r5
 8009288:	bd70      	pop	{r4, r5, r6, pc}
 800928a:	2b00      	cmp	r3, #0
 800928c:	da04      	bge.n	8009298 <_puts_r+0xac>
 800928e:	69a2      	ldr	r2, [r4, #24]
 8009290:	429a      	cmp	r2, r3
 8009292:	dc06      	bgt.n	80092a2 <_puts_r+0xb6>
 8009294:	290a      	cmp	r1, #10
 8009296:	d004      	beq.n	80092a2 <_puts_r+0xb6>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	6022      	str	r2, [r4, #0]
 800929e:	7019      	strb	r1, [r3, #0]
 80092a0:	e7c5      	b.n	800922e <_puts_r+0x42>
 80092a2:	4622      	mov	r2, r4
 80092a4:	4628      	mov	r0, r5
 80092a6:	f000 f817 	bl	80092d8 <__swbuf_r>
 80092aa:	3001      	adds	r0, #1
 80092ac:	d1bf      	bne.n	800922e <_puts_r+0x42>
 80092ae:	e7df      	b.n	8009270 <_puts_r+0x84>
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	250a      	movs	r5, #10
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	6022      	str	r2, [r4, #0]
 80092b8:	701d      	strb	r5, [r3, #0]
 80092ba:	e7db      	b.n	8009274 <_puts_r+0x88>
 80092bc:	0800a33c 	.word	0x0800a33c
 80092c0:	0800a35c 	.word	0x0800a35c
 80092c4:	0800a31c 	.word	0x0800a31c

080092c8 <puts>:
 80092c8:	4b02      	ldr	r3, [pc, #8]	; (80092d4 <puts+0xc>)
 80092ca:	4601      	mov	r1, r0
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	f7ff bf8d 	b.w	80091ec <_puts_r>
 80092d2:	bf00      	nop
 80092d4:	200000f8 	.word	0x200000f8

080092d8 <__swbuf_r>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	460e      	mov	r6, r1
 80092dc:	4614      	mov	r4, r2
 80092de:	4605      	mov	r5, r0
 80092e0:	b118      	cbz	r0, 80092ea <__swbuf_r+0x12>
 80092e2:	6983      	ldr	r3, [r0, #24]
 80092e4:	b90b      	cbnz	r3, 80092ea <__swbuf_r+0x12>
 80092e6:	f000 f9d1 	bl	800968c <__sinit>
 80092ea:	4b21      	ldr	r3, [pc, #132]	; (8009370 <__swbuf_r+0x98>)
 80092ec:	429c      	cmp	r4, r3
 80092ee:	d12b      	bne.n	8009348 <__swbuf_r+0x70>
 80092f0:	686c      	ldr	r4, [r5, #4]
 80092f2:	69a3      	ldr	r3, [r4, #24]
 80092f4:	60a3      	str	r3, [r4, #8]
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	071a      	lsls	r2, r3, #28
 80092fa:	d52f      	bpl.n	800935c <__swbuf_r+0x84>
 80092fc:	6923      	ldr	r3, [r4, #16]
 80092fe:	b36b      	cbz	r3, 800935c <__swbuf_r+0x84>
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	6820      	ldr	r0, [r4, #0]
 8009304:	1ac0      	subs	r0, r0, r3
 8009306:	6963      	ldr	r3, [r4, #20]
 8009308:	b2f6      	uxtb	r6, r6
 800930a:	4283      	cmp	r3, r0
 800930c:	4637      	mov	r7, r6
 800930e:	dc04      	bgt.n	800931a <__swbuf_r+0x42>
 8009310:	4621      	mov	r1, r4
 8009312:	4628      	mov	r0, r5
 8009314:	f000 f926 	bl	8009564 <_fflush_r>
 8009318:	bb30      	cbnz	r0, 8009368 <__swbuf_r+0x90>
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	3b01      	subs	r3, #1
 800931e:	60a3      	str	r3, [r4, #8]
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	6022      	str	r2, [r4, #0]
 8009326:	701e      	strb	r6, [r3, #0]
 8009328:	6963      	ldr	r3, [r4, #20]
 800932a:	3001      	adds	r0, #1
 800932c:	4283      	cmp	r3, r0
 800932e:	d004      	beq.n	800933a <__swbuf_r+0x62>
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	07db      	lsls	r3, r3, #31
 8009334:	d506      	bpl.n	8009344 <__swbuf_r+0x6c>
 8009336:	2e0a      	cmp	r6, #10
 8009338:	d104      	bne.n	8009344 <__swbuf_r+0x6c>
 800933a:	4621      	mov	r1, r4
 800933c:	4628      	mov	r0, r5
 800933e:	f000 f911 	bl	8009564 <_fflush_r>
 8009342:	b988      	cbnz	r0, 8009368 <__swbuf_r+0x90>
 8009344:	4638      	mov	r0, r7
 8009346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009348:	4b0a      	ldr	r3, [pc, #40]	; (8009374 <__swbuf_r+0x9c>)
 800934a:	429c      	cmp	r4, r3
 800934c:	d101      	bne.n	8009352 <__swbuf_r+0x7a>
 800934e:	68ac      	ldr	r4, [r5, #8]
 8009350:	e7cf      	b.n	80092f2 <__swbuf_r+0x1a>
 8009352:	4b09      	ldr	r3, [pc, #36]	; (8009378 <__swbuf_r+0xa0>)
 8009354:	429c      	cmp	r4, r3
 8009356:	bf08      	it	eq
 8009358:	68ec      	ldreq	r4, [r5, #12]
 800935a:	e7ca      	b.n	80092f2 <__swbuf_r+0x1a>
 800935c:	4621      	mov	r1, r4
 800935e:	4628      	mov	r0, r5
 8009360:	f000 f80c 	bl	800937c <__swsetup_r>
 8009364:	2800      	cmp	r0, #0
 8009366:	d0cb      	beq.n	8009300 <__swbuf_r+0x28>
 8009368:	f04f 37ff 	mov.w	r7, #4294967295
 800936c:	e7ea      	b.n	8009344 <__swbuf_r+0x6c>
 800936e:	bf00      	nop
 8009370:	0800a33c 	.word	0x0800a33c
 8009374:	0800a35c 	.word	0x0800a35c
 8009378:	0800a31c 	.word	0x0800a31c

0800937c <__swsetup_r>:
 800937c:	4b32      	ldr	r3, [pc, #200]	; (8009448 <__swsetup_r+0xcc>)
 800937e:	b570      	push	{r4, r5, r6, lr}
 8009380:	681d      	ldr	r5, [r3, #0]
 8009382:	4606      	mov	r6, r0
 8009384:	460c      	mov	r4, r1
 8009386:	b125      	cbz	r5, 8009392 <__swsetup_r+0x16>
 8009388:	69ab      	ldr	r3, [r5, #24]
 800938a:	b913      	cbnz	r3, 8009392 <__swsetup_r+0x16>
 800938c:	4628      	mov	r0, r5
 800938e:	f000 f97d 	bl	800968c <__sinit>
 8009392:	4b2e      	ldr	r3, [pc, #184]	; (800944c <__swsetup_r+0xd0>)
 8009394:	429c      	cmp	r4, r3
 8009396:	d10f      	bne.n	80093b8 <__swsetup_r+0x3c>
 8009398:	686c      	ldr	r4, [r5, #4]
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093a0:	0719      	lsls	r1, r3, #28
 80093a2:	d42c      	bmi.n	80093fe <__swsetup_r+0x82>
 80093a4:	06dd      	lsls	r5, r3, #27
 80093a6:	d411      	bmi.n	80093cc <__swsetup_r+0x50>
 80093a8:	2309      	movs	r3, #9
 80093aa:	6033      	str	r3, [r6, #0]
 80093ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093b0:	81a3      	strh	r3, [r4, #12]
 80093b2:	f04f 30ff 	mov.w	r0, #4294967295
 80093b6:	e03e      	b.n	8009436 <__swsetup_r+0xba>
 80093b8:	4b25      	ldr	r3, [pc, #148]	; (8009450 <__swsetup_r+0xd4>)
 80093ba:	429c      	cmp	r4, r3
 80093bc:	d101      	bne.n	80093c2 <__swsetup_r+0x46>
 80093be:	68ac      	ldr	r4, [r5, #8]
 80093c0:	e7eb      	b.n	800939a <__swsetup_r+0x1e>
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <__swsetup_r+0xd8>)
 80093c4:	429c      	cmp	r4, r3
 80093c6:	bf08      	it	eq
 80093c8:	68ec      	ldreq	r4, [r5, #12]
 80093ca:	e7e6      	b.n	800939a <__swsetup_r+0x1e>
 80093cc:	0758      	lsls	r0, r3, #29
 80093ce:	d512      	bpl.n	80093f6 <__swsetup_r+0x7a>
 80093d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093d2:	b141      	cbz	r1, 80093e6 <__swsetup_r+0x6a>
 80093d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093d8:	4299      	cmp	r1, r3
 80093da:	d002      	beq.n	80093e2 <__swsetup_r+0x66>
 80093dc:	4630      	mov	r0, r6
 80093de:	f000 fa5b 	bl	8009898 <_free_r>
 80093e2:	2300      	movs	r3, #0
 80093e4:	6363      	str	r3, [r4, #52]	; 0x34
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	2300      	movs	r3, #0
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	6923      	ldr	r3, [r4, #16]
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f043 0308 	orr.w	r3, r3, #8
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	b94b      	cbnz	r3, 8009416 <__swsetup_r+0x9a>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800940c:	d003      	beq.n	8009416 <__swsetup_r+0x9a>
 800940e:	4621      	mov	r1, r4
 8009410:	4630      	mov	r0, r6
 8009412:	f000 fa01 	bl	8009818 <__smakebuf_r>
 8009416:	89a0      	ldrh	r0, [r4, #12]
 8009418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800941c:	f010 0301 	ands.w	r3, r0, #1
 8009420:	d00a      	beq.n	8009438 <__swsetup_r+0xbc>
 8009422:	2300      	movs	r3, #0
 8009424:	60a3      	str	r3, [r4, #8]
 8009426:	6963      	ldr	r3, [r4, #20]
 8009428:	425b      	negs	r3, r3
 800942a:	61a3      	str	r3, [r4, #24]
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	b943      	cbnz	r3, 8009442 <__swsetup_r+0xc6>
 8009430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009434:	d1ba      	bne.n	80093ac <__swsetup_r+0x30>
 8009436:	bd70      	pop	{r4, r5, r6, pc}
 8009438:	0781      	lsls	r1, r0, #30
 800943a:	bf58      	it	pl
 800943c:	6963      	ldrpl	r3, [r4, #20]
 800943e:	60a3      	str	r3, [r4, #8]
 8009440:	e7f4      	b.n	800942c <__swsetup_r+0xb0>
 8009442:	2000      	movs	r0, #0
 8009444:	e7f7      	b.n	8009436 <__swsetup_r+0xba>
 8009446:	bf00      	nop
 8009448:	200000f8 	.word	0x200000f8
 800944c:	0800a33c 	.word	0x0800a33c
 8009450:	0800a35c 	.word	0x0800a35c
 8009454:	0800a31c 	.word	0x0800a31c

08009458 <__sflush_r>:
 8009458:	898a      	ldrh	r2, [r1, #12]
 800945a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800945e:	4605      	mov	r5, r0
 8009460:	0710      	lsls	r0, r2, #28
 8009462:	460c      	mov	r4, r1
 8009464:	d458      	bmi.n	8009518 <__sflush_r+0xc0>
 8009466:	684b      	ldr	r3, [r1, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	dc05      	bgt.n	8009478 <__sflush_r+0x20>
 800946c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800946e:	2b00      	cmp	r3, #0
 8009470:	dc02      	bgt.n	8009478 <__sflush_r+0x20>
 8009472:	2000      	movs	r0, #0
 8009474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800947a:	2e00      	cmp	r6, #0
 800947c:	d0f9      	beq.n	8009472 <__sflush_r+0x1a>
 800947e:	2300      	movs	r3, #0
 8009480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009484:	682f      	ldr	r7, [r5, #0]
 8009486:	602b      	str	r3, [r5, #0]
 8009488:	d032      	beq.n	80094f0 <__sflush_r+0x98>
 800948a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	075a      	lsls	r2, r3, #29
 8009490:	d505      	bpl.n	800949e <__sflush_r+0x46>
 8009492:	6863      	ldr	r3, [r4, #4]
 8009494:	1ac0      	subs	r0, r0, r3
 8009496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009498:	b10b      	cbz	r3, 800949e <__sflush_r+0x46>
 800949a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800949c:	1ac0      	subs	r0, r0, r3
 800949e:	2300      	movs	r3, #0
 80094a0:	4602      	mov	r2, r0
 80094a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094a4:	6a21      	ldr	r1, [r4, #32]
 80094a6:	4628      	mov	r0, r5
 80094a8:	47b0      	blx	r6
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	d106      	bne.n	80094be <__sflush_r+0x66>
 80094b0:	6829      	ldr	r1, [r5, #0]
 80094b2:	291d      	cmp	r1, #29
 80094b4:	d82c      	bhi.n	8009510 <__sflush_r+0xb8>
 80094b6:	4a2a      	ldr	r2, [pc, #168]	; (8009560 <__sflush_r+0x108>)
 80094b8:	40ca      	lsrs	r2, r1
 80094ba:	07d6      	lsls	r6, r2, #31
 80094bc:	d528      	bpl.n	8009510 <__sflush_r+0xb8>
 80094be:	2200      	movs	r2, #0
 80094c0:	6062      	str	r2, [r4, #4]
 80094c2:	04d9      	lsls	r1, r3, #19
 80094c4:	6922      	ldr	r2, [r4, #16]
 80094c6:	6022      	str	r2, [r4, #0]
 80094c8:	d504      	bpl.n	80094d4 <__sflush_r+0x7c>
 80094ca:	1c42      	adds	r2, r0, #1
 80094cc:	d101      	bne.n	80094d2 <__sflush_r+0x7a>
 80094ce:	682b      	ldr	r3, [r5, #0]
 80094d0:	b903      	cbnz	r3, 80094d4 <__sflush_r+0x7c>
 80094d2:	6560      	str	r0, [r4, #84]	; 0x54
 80094d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094d6:	602f      	str	r7, [r5, #0]
 80094d8:	2900      	cmp	r1, #0
 80094da:	d0ca      	beq.n	8009472 <__sflush_r+0x1a>
 80094dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094e0:	4299      	cmp	r1, r3
 80094e2:	d002      	beq.n	80094ea <__sflush_r+0x92>
 80094e4:	4628      	mov	r0, r5
 80094e6:	f000 f9d7 	bl	8009898 <_free_r>
 80094ea:	2000      	movs	r0, #0
 80094ec:	6360      	str	r0, [r4, #52]	; 0x34
 80094ee:	e7c1      	b.n	8009474 <__sflush_r+0x1c>
 80094f0:	6a21      	ldr	r1, [r4, #32]
 80094f2:	2301      	movs	r3, #1
 80094f4:	4628      	mov	r0, r5
 80094f6:	47b0      	blx	r6
 80094f8:	1c41      	adds	r1, r0, #1
 80094fa:	d1c7      	bne.n	800948c <__sflush_r+0x34>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0c4      	beq.n	800948c <__sflush_r+0x34>
 8009502:	2b1d      	cmp	r3, #29
 8009504:	d001      	beq.n	800950a <__sflush_r+0xb2>
 8009506:	2b16      	cmp	r3, #22
 8009508:	d101      	bne.n	800950e <__sflush_r+0xb6>
 800950a:	602f      	str	r7, [r5, #0]
 800950c:	e7b1      	b.n	8009472 <__sflush_r+0x1a>
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	e7ad      	b.n	8009474 <__sflush_r+0x1c>
 8009518:	690f      	ldr	r7, [r1, #16]
 800951a:	2f00      	cmp	r7, #0
 800951c:	d0a9      	beq.n	8009472 <__sflush_r+0x1a>
 800951e:	0793      	lsls	r3, r2, #30
 8009520:	680e      	ldr	r6, [r1, #0]
 8009522:	bf08      	it	eq
 8009524:	694b      	ldreq	r3, [r1, #20]
 8009526:	600f      	str	r7, [r1, #0]
 8009528:	bf18      	it	ne
 800952a:	2300      	movne	r3, #0
 800952c:	eba6 0807 	sub.w	r8, r6, r7
 8009530:	608b      	str	r3, [r1, #8]
 8009532:	f1b8 0f00 	cmp.w	r8, #0
 8009536:	dd9c      	ble.n	8009472 <__sflush_r+0x1a>
 8009538:	6a21      	ldr	r1, [r4, #32]
 800953a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800953c:	4643      	mov	r3, r8
 800953e:	463a      	mov	r2, r7
 8009540:	4628      	mov	r0, r5
 8009542:	47b0      	blx	r6
 8009544:	2800      	cmp	r0, #0
 8009546:	dc06      	bgt.n	8009556 <__sflush_r+0xfe>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800954e:	81a3      	strh	r3, [r4, #12]
 8009550:	f04f 30ff 	mov.w	r0, #4294967295
 8009554:	e78e      	b.n	8009474 <__sflush_r+0x1c>
 8009556:	4407      	add	r7, r0
 8009558:	eba8 0800 	sub.w	r8, r8, r0
 800955c:	e7e9      	b.n	8009532 <__sflush_r+0xda>
 800955e:	bf00      	nop
 8009560:	20400001 	.word	0x20400001

08009564 <_fflush_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	690b      	ldr	r3, [r1, #16]
 8009568:	4605      	mov	r5, r0
 800956a:	460c      	mov	r4, r1
 800956c:	b913      	cbnz	r3, 8009574 <_fflush_r+0x10>
 800956e:	2500      	movs	r5, #0
 8009570:	4628      	mov	r0, r5
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	b118      	cbz	r0, 800957e <_fflush_r+0x1a>
 8009576:	6983      	ldr	r3, [r0, #24]
 8009578:	b90b      	cbnz	r3, 800957e <_fflush_r+0x1a>
 800957a:	f000 f887 	bl	800968c <__sinit>
 800957e:	4b14      	ldr	r3, [pc, #80]	; (80095d0 <_fflush_r+0x6c>)
 8009580:	429c      	cmp	r4, r3
 8009582:	d11b      	bne.n	80095bc <_fflush_r+0x58>
 8009584:	686c      	ldr	r4, [r5, #4]
 8009586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0ef      	beq.n	800956e <_fflush_r+0xa>
 800958e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009590:	07d0      	lsls	r0, r2, #31
 8009592:	d404      	bmi.n	800959e <_fflush_r+0x3a>
 8009594:	0599      	lsls	r1, r3, #22
 8009596:	d402      	bmi.n	800959e <_fflush_r+0x3a>
 8009598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800959a:	f000 f915 	bl	80097c8 <__retarget_lock_acquire_recursive>
 800959e:	4628      	mov	r0, r5
 80095a0:	4621      	mov	r1, r4
 80095a2:	f7ff ff59 	bl	8009458 <__sflush_r>
 80095a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095a8:	07da      	lsls	r2, r3, #31
 80095aa:	4605      	mov	r5, r0
 80095ac:	d4e0      	bmi.n	8009570 <_fflush_r+0xc>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	059b      	lsls	r3, r3, #22
 80095b2:	d4dd      	bmi.n	8009570 <_fflush_r+0xc>
 80095b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b6:	f000 f908 	bl	80097ca <__retarget_lock_release_recursive>
 80095ba:	e7d9      	b.n	8009570 <_fflush_r+0xc>
 80095bc:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <_fflush_r+0x70>)
 80095be:	429c      	cmp	r4, r3
 80095c0:	d101      	bne.n	80095c6 <_fflush_r+0x62>
 80095c2:	68ac      	ldr	r4, [r5, #8]
 80095c4:	e7df      	b.n	8009586 <_fflush_r+0x22>
 80095c6:	4b04      	ldr	r3, [pc, #16]	; (80095d8 <_fflush_r+0x74>)
 80095c8:	429c      	cmp	r4, r3
 80095ca:	bf08      	it	eq
 80095cc:	68ec      	ldreq	r4, [r5, #12]
 80095ce:	e7da      	b.n	8009586 <_fflush_r+0x22>
 80095d0:	0800a33c 	.word	0x0800a33c
 80095d4:	0800a35c 	.word	0x0800a35c
 80095d8:	0800a31c 	.word	0x0800a31c

080095dc <std>:
 80095dc:	2300      	movs	r3, #0
 80095de:	b510      	push	{r4, lr}
 80095e0:	4604      	mov	r4, r0
 80095e2:	e9c0 3300 	strd	r3, r3, [r0]
 80095e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ea:	6083      	str	r3, [r0, #8]
 80095ec:	8181      	strh	r1, [r0, #12]
 80095ee:	6643      	str	r3, [r0, #100]	; 0x64
 80095f0:	81c2      	strh	r2, [r0, #14]
 80095f2:	6183      	str	r3, [r0, #24]
 80095f4:	4619      	mov	r1, r3
 80095f6:	2208      	movs	r2, #8
 80095f8:	305c      	adds	r0, #92	; 0x5c
 80095fa:	f7ff fdd7 	bl	80091ac <memset>
 80095fe:	4b05      	ldr	r3, [pc, #20]	; (8009614 <std+0x38>)
 8009600:	6263      	str	r3, [r4, #36]	; 0x24
 8009602:	4b05      	ldr	r3, [pc, #20]	; (8009618 <std+0x3c>)
 8009604:	62a3      	str	r3, [r4, #40]	; 0x28
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <std+0x40>)
 8009608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800960a:	4b05      	ldr	r3, [pc, #20]	; (8009620 <std+0x44>)
 800960c:	6224      	str	r4, [r4, #32]
 800960e:	6323      	str	r3, [r4, #48]	; 0x30
 8009610:	bd10      	pop	{r4, pc}
 8009612:	bf00      	nop
 8009614:	0800a055 	.word	0x0800a055
 8009618:	0800a077 	.word	0x0800a077
 800961c:	0800a0af 	.word	0x0800a0af
 8009620:	0800a0d3 	.word	0x0800a0d3

08009624 <_cleanup_r>:
 8009624:	4901      	ldr	r1, [pc, #4]	; (800962c <_cleanup_r+0x8>)
 8009626:	f000 b8af 	b.w	8009788 <_fwalk_reent>
 800962a:	bf00      	nop
 800962c:	08009565 	.word	0x08009565

08009630 <__sfmoreglue>:
 8009630:	b570      	push	{r4, r5, r6, lr}
 8009632:	2268      	movs	r2, #104	; 0x68
 8009634:	1e4d      	subs	r5, r1, #1
 8009636:	4355      	muls	r5, r2
 8009638:	460e      	mov	r6, r1
 800963a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800963e:	f000 f997 	bl	8009970 <_malloc_r>
 8009642:	4604      	mov	r4, r0
 8009644:	b140      	cbz	r0, 8009658 <__sfmoreglue+0x28>
 8009646:	2100      	movs	r1, #0
 8009648:	e9c0 1600 	strd	r1, r6, [r0]
 800964c:	300c      	adds	r0, #12
 800964e:	60a0      	str	r0, [r4, #8]
 8009650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009654:	f7ff fdaa 	bl	80091ac <memset>
 8009658:	4620      	mov	r0, r4
 800965a:	bd70      	pop	{r4, r5, r6, pc}

0800965c <__sfp_lock_acquire>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__sfp_lock_acquire+0x8>)
 800965e:	f000 b8b3 	b.w	80097c8 <__retarget_lock_acquire_recursive>
 8009662:	bf00      	nop
 8009664:	2000453d 	.word	0x2000453d

08009668 <__sfp_lock_release>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__sfp_lock_release+0x8>)
 800966a:	f000 b8ae 	b.w	80097ca <__retarget_lock_release_recursive>
 800966e:	bf00      	nop
 8009670:	2000453d 	.word	0x2000453d

08009674 <__sinit_lock_acquire>:
 8009674:	4801      	ldr	r0, [pc, #4]	; (800967c <__sinit_lock_acquire+0x8>)
 8009676:	f000 b8a7 	b.w	80097c8 <__retarget_lock_acquire_recursive>
 800967a:	bf00      	nop
 800967c:	2000453e 	.word	0x2000453e

08009680 <__sinit_lock_release>:
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__sinit_lock_release+0x8>)
 8009682:	f000 b8a2 	b.w	80097ca <__retarget_lock_release_recursive>
 8009686:	bf00      	nop
 8009688:	2000453e 	.word	0x2000453e

0800968c <__sinit>:
 800968c:	b510      	push	{r4, lr}
 800968e:	4604      	mov	r4, r0
 8009690:	f7ff fff0 	bl	8009674 <__sinit_lock_acquire>
 8009694:	69a3      	ldr	r3, [r4, #24]
 8009696:	b11b      	cbz	r3, 80096a0 <__sinit+0x14>
 8009698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800969c:	f7ff bff0 	b.w	8009680 <__sinit_lock_release>
 80096a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096a4:	6523      	str	r3, [r4, #80]	; 0x50
 80096a6:	4b13      	ldr	r3, [pc, #76]	; (80096f4 <__sinit+0x68>)
 80096a8:	4a13      	ldr	r2, [pc, #76]	; (80096f8 <__sinit+0x6c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80096ae:	42a3      	cmp	r3, r4
 80096b0:	bf04      	itt	eq
 80096b2:	2301      	moveq	r3, #1
 80096b4:	61a3      	streq	r3, [r4, #24]
 80096b6:	4620      	mov	r0, r4
 80096b8:	f000 f820 	bl	80096fc <__sfp>
 80096bc:	6060      	str	r0, [r4, #4]
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 f81c 	bl	80096fc <__sfp>
 80096c4:	60a0      	str	r0, [r4, #8]
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 f818 	bl	80096fc <__sfp>
 80096cc:	2200      	movs	r2, #0
 80096ce:	60e0      	str	r0, [r4, #12]
 80096d0:	2104      	movs	r1, #4
 80096d2:	6860      	ldr	r0, [r4, #4]
 80096d4:	f7ff ff82 	bl	80095dc <std>
 80096d8:	68a0      	ldr	r0, [r4, #8]
 80096da:	2201      	movs	r2, #1
 80096dc:	2109      	movs	r1, #9
 80096de:	f7ff ff7d 	bl	80095dc <std>
 80096e2:	68e0      	ldr	r0, [r4, #12]
 80096e4:	2202      	movs	r2, #2
 80096e6:	2112      	movs	r1, #18
 80096e8:	f7ff ff78 	bl	80095dc <std>
 80096ec:	2301      	movs	r3, #1
 80096ee:	61a3      	str	r3, [r4, #24]
 80096f0:	e7d2      	b.n	8009698 <__sinit+0xc>
 80096f2:	bf00      	nop
 80096f4:	0800a318 	.word	0x0800a318
 80096f8:	08009625 	.word	0x08009625

080096fc <__sfp>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	4607      	mov	r7, r0
 8009700:	f7ff ffac 	bl	800965c <__sfp_lock_acquire>
 8009704:	4b1e      	ldr	r3, [pc, #120]	; (8009780 <__sfp+0x84>)
 8009706:	681e      	ldr	r6, [r3, #0]
 8009708:	69b3      	ldr	r3, [r6, #24]
 800970a:	b913      	cbnz	r3, 8009712 <__sfp+0x16>
 800970c:	4630      	mov	r0, r6
 800970e:	f7ff ffbd 	bl	800968c <__sinit>
 8009712:	3648      	adds	r6, #72	; 0x48
 8009714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009718:	3b01      	subs	r3, #1
 800971a:	d503      	bpl.n	8009724 <__sfp+0x28>
 800971c:	6833      	ldr	r3, [r6, #0]
 800971e:	b30b      	cbz	r3, 8009764 <__sfp+0x68>
 8009720:	6836      	ldr	r6, [r6, #0]
 8009722:	e7f7      	b.n	8009714 <__sfp+0x18>
 8009724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009728:	b9d5      	cbnz	r5, 8009760 <__sfp+0x64>
 800972a:	4b16      	ldr	r3, [pc, #88]	; (8009784 <__sfp+0x88>)
 800972c:	60e3      	str	r3, [r4, #12]
 800972e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009732:	6665      	str	r5, [r4, #100]	; 0x64
 8009734:	f000 f847 	bl	80097c6 <__retarget_lock_init_recursive>
 8009738:	f7ff ff96 	bl	8009668 <__sfp_lock_release>
 800973c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009744:	6025      	str	r5, [r4, #0]
 8009746:	61a5      	str	r5, [r4, #24]
 8009748:	2208      	movs	r2, #8
 800974a:	4629      	mov	r1, r5
 800974c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009750:	f7ff fd2c 	bl	80091ac <memset>
 8009754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800975c:	4620      	mov	r0, r4
 800975e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009760:	3468      	adds	r4, #104	; 0x68
 8009762:	e7d9      	b.n	8009718 <__sfp+0x1c>
 8009764:	2104      	movs	r1, #4
 8009766:	4638      	mov	r0, r7
 8009768:	f7ff ff62 	bl	8009630 <__sfmoreglue>
 800976c:	4604      	mov	r4, r0
 800976e:	6030      	str	r0, [r6, #0]
 8009770:	2800      	cmp	r0, #0
 8009772:	d1d5      	bne.n	8009720 <__sfp+0x24>
 8009774:	f7ff ff78 	bl	8009668 <__sfp_lock_release>
 8009778:	230c      	movs	r3, #12
 800977a:	603b      	str	r3, [r7, #0]
 800977c:	e7ee      	b.n	800975c <__sfp+0x60>
 800977e:	bf00      	nop
 8009780:	0800a318 	.word	0x0800a318
 8009784:	ffff0001 	.word	0xffff0001

08009788 <_fwalk_reent>:
 8009788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800978c:	4606      	mov	r6, r0
 800978e:	4688      	mov	r8, r1
 8009790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009794:	2700      	movs	r7, #0
 8009796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800979a:	f1b9 0901 	subs.w	r9, r9, #1
 800979e:	d505      	bpl.n	80097ac <_fwalk_reent+0x24>
 80097a0:	6824      	ldr	r4, [r4, #0]
 80097a2:	2c00      	cmp	r4, #0
 80097a4:	d1f7      	bne.n	8009796 <_fwalk_reent+0xe>
 80097a6:	4638      	mov	r0, r7
 80097a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ac:	89ab      	ldrh	r3, [r5, #12]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d907      	bls.n	80097c2 <_fwalk_reent+0x3a>
 80097b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097b6:	3301      	adds	r3, #1
 80097b8:	d003      	beq.n	80097c2 <_fwalk_reent+0x3a>
 80097ba:	4629      	mov	r1, r5
 80097bc:	4630      	mov	r0, r6
 80097be:	47c0      	blx	r8
 80097c0:	4307      	orrs	r7, r0
 80097c2:	3568      	adds	r5, #104	; 0x68
 80097c4:	e7e9      	b.n	800979a <_fwalk_reent+0x12>

080097c6 <__retarget_lock_init_recursive>:
 80097c6:	4770      	bx	lr

080097c8 <__retarget_lock_acquire_recursive>:
 80097c8:	4770      	bx	lr

080097ca <__retarget_lock_release_recursive>:
 80097ca:	4770      	bx	lr

080097cc <__swhatbuf_r>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	460e      	mov	r6, r1
 80097d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d4:	2900      	cmp	r1, #0
 80097d6:	b096      	sub	sp, #88	; 0x58
 80097d8:	4614      	mov	r4, r2
 80097da:	461d      	mov	r5, r3
 80097dc:	da08      	bge.n	80097f0 <__swhatbuf_r+0x24>
 80097de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	602a      	str	r2, [r5, #0]
 80097e6:	061a      	lsls	r2, r3, #24
 80097e8:	d410      	bmi.n	800980c <__swhatbuf_r+0x40>
 80097ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ee:	e00e      	b.n	800980e <__swhatbuf_r+0x42>
 80097f0:	466a      	mov	r2, sp
 80097f2:	f000 fc95 	bl	800a120 <_fstat_r>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	dbf1      	blt.n	80097de <__swhatbuf_r+0x12>
 80097fa:	9a01      	ldr	r2, [sp, #4]
 80097fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009800:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009804:	425a      	negs	r2, r3
 8009806:	415a      	adcs	r2, r3
 8009808:	602a      	str	r2, [r5, #0]
 800980a:	e7ee      	b.n	80097ea <__swhatbuf_r+0x1e>
 800980c:	2340      	movs	r3, #64	; 0x40
 800980e:	2000      	movs	r0, #0
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	b016      	add	sp, #88	; 0x58
 8009814:	bd70      	pop	{r4, r5, r6, pc}
	...

08009818 <__smakebuf_r>:
 8009818:	898b      	ldrh	r3, [r1, #12]
 800981a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800981c:	079d      	lsls	r5, r3, #30
 800981e:	4606      	mov	r6, r0
 8009820:	460c      	mov	r4, r1
 8009822:	d507      	bpl.n	8009834 <__smakebuf_r+0x1c>
 8009824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	6123      	str	r3, [r4, #16]
 800982c:	2301      	movs	r3, #1
 800982e:	6163      	str	r3, [r4, #20]
 8009830:	b002      	add	sp, #8
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	ab01      	add	r3, sp, #4
 8009836:	466a      	mov	r2, sp
 8009838:	f7ff ffc8 	bl	80097cc <__swhatbuf_r>
 800983c:	9900      	ldr	r1, [sp, #0]
 800983e:	4605      	mov	r5, r0
 8009840:	4630      	mov	r0, r6
 8009842:	f000 f895 	bl	8009970 <_malloc_r>
 8009846:	b948      	cbnz	r0, 800985c <__smakebuf_r+0x44>
 8009848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800984c:	059a      	lsls	r2, r3, #22
 800984e:	d4ef      	bmi.n	8009830 <__smakebuf_r+0x18>
 8009850:	f023 0303 	bic.w	r3, r3, #3
 8009854:	f043 0302 	orr.w	r3, r3, #2
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	e7e3      	b.n	8009824 <__smakebuf_r+0xc>
 800985c:	4b0d      	ldr	r3, [pc, #52]	; (8009894 <__smakebuf_r+0x7c>)
 800985e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	6020      	str	r0, [r4, #0]
 8009864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	9b00      	ldr	r3, [sp, #0]
 800986c:	6163      	str	r3, [r4, #20]
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	6120      	str	r0, [r4, #16]
 8009872:	b15b      	cbz	r3, 800988c <__smakebuf_r+0x74>
 8009874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009878:	4630      	mov	r0, r6
 800987a:	f000 fc63 	bl	800a144 <_isatty_r>
 800987e:	b128      	cbz	r0, 800988c <__smakebuf_r+0x74>
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	f023 0303 	bic.w	r3, r3, #3
 8009886:	f043 0301 	orr.w	r3, r3, #1
 800988a:	81a3      	strh	r3, [r4, #12]
 800988c:	89a0      	ldrh	r0, [r4, #12]
 800988e:	4305      	orrs	r5, r0
 8009890:	81a5      	strh	r5, [r4, #12]
 8009892:	e7cd      	b.n	8009830 <__smakebuf_r+0x18>
 8009894:	08009625 	.word	0x08009625

08009898 <_free_r>:
 8009898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800989a:	2900      	cmp	r1, #0
 800989c:	d044      	beq.n	8009928 <_free_r+0x90>
 800989e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a2:	9001      	str	r0, [sp, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f1a1 0404 	sub.w	r4, r1, #4
 80098aa:	bfb8      	it	lt
 80098ac:	18e4      	addlt	r4, r4, r3
 80098ae:	f000 fc6b 	bl	800a188 <__malloc_lock>
 80098b2:	4a1e      	ldr	r2, [pc, #120]	; (800992c <_free_r+0x94>)
 80098b4:	9801      	ldr	r0, [sp, #4]
 80098b6:	6813      	ldr	r3, [r2, #0]
 80098b8:	b933      	cbnz	r3, 80098c8 <_free_r+0x30>
 80098ba:	6063      	str	r3, [r4, #4]
 80098bc:	6014      	str	r4, [r2, #0]
 80098be:	b003      	add	sp, #12
 80098c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098c4:	f000 bc66 	b.w	800a194 <__malloc_unlock>
 80098c8:	42a3      	cmp	r3, r4
 80098ca:	d908      	bls.n	80098de <_free_r+0x46>
 80098cc:	6825      	ldr	r5, [r4, #0]
 80098ce:	1961      	adds	r1, r4, r5
 80098d0:	428b      	cmp	r3, r1
 80098d2:	bf01      	itttt	eq
 80098d4:	6819      	ldreq	r1, [r3, #0]
 80098d6:	685b      	ldreq	r3, [r3, #4]
 80098d8:	1949      	addeq	r1, r1, r5
 80098da:	6021      	streq	r1, [r4, #0]
 80098dc:	e7ed      	b.n	80098ba <_free_r+0x22>
 80098de:	461a      	mov	r2, r3
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	b10b      	cbz	r3, 80098e8 <_free_r+0x50>
 80098e4:	42a3      	cmp	r3, r4
 80098e6:	d9fa      	bls.n	80098de <_free_r+0x46>
 80098e8:	6811      	ldr	r1, [r2, #0]
 80098ea:	1855      	adds	r5, r2, r1
 80098ec:	42a5      	cmp	r5, r4
 80098ee:	d10b      	bne.n	8009908 <_free_r+0x70>
 80098f0:	6824      	ldr	r4, [r4, #0]
 80098f2:	4421      	add	r1, r4
 80098f4:	1854      	adds	r4, r2, r1
 80098f6:	42a3      	cmp	r3, r4
 80098f8:	6011      	str	r1, [r2, #0]
 80098fa:	d1e0      	bne.n	80098be <_free_r+0x26>
 80098fc:	681c      	ldr	r4, [r3, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	6053      	str	r3, [r2, #4]
 8009902:	4421      	add	r1, r4
 8009904:	6011      	str	r1, [r2, #0]
 8009906:	e7da      	b.n	80098be <_free_r+0x26>
 8009908:	d902      	bls.n	8009910 <_free_r+0x78>
 800990a:	230c      	movs	r3, #12
 800990c:	6003      	str	r3, [r0, #0]
 800990e:	e7d6      	b.n	80098be <_free_r+0x26>
 8009910:	6825      	ldr	r5, [r4, #0]
 8009912:	1961      	adds	r1, r4, r5
 8009914:	428b      	cmp	r3, r1
 8009916:	bf04      	itt	eq
 8009918:	6819      	ldreq	r1, [r3, #0]
 800991a:	685b      	ldreq	r3, [r3, #4]
 800991c:	6063      	str	r3, [r4, #4]
 800991e:	bf04      	itt	eq
 8009920:	1949      	addeq	r1, r1, r5
 8009922:	6021      	streq	r1, [r4, #0]
 8009924:	6054      	str	r4, [r2, #4]
 8009926:	e7ca      	b.n	80098be <_free_r+0x26>
 8009928:	b003      	add	sp, #12
 800992a:	bd30      	pop	{r4, r5, pc}
 800992c:	20004540 	.word	0x20004540

08009930 <sbrk_aligned>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	4e0e      	ldr	r6, [pc, #56]	; (800996c <sbrk_aligned+0x3c>)
 8009934:	460c      	mov	r4, r1
 8009936:	6831      	ldr	r1, [r6, #0]
 8009938:	4605      	mov	r5, r0
 800993a:	b911      	cbnz	r1, 8009942 <sbrk_aligned+0x12>
 800993c:	f000 fb7a 	bl	800a034 <_sbrk_r>
 8009940:	6030      	str	r0, [r6, #0]
 8009942:	4621      	mov	r1, r4
 8009944:	4628      	mov	r0, r5
 8009946:	f000 fb75 	bl	800a034 <_sbrk_r>
 800994a:	1c43      	adds	r3, r0, #1
 800994c:	d00a      	beq.n	8009964 <sbrk_aligned+0x34>
 800994e:	1cc4      	adds	r4, r0, #3
 8009950:	f024 0403 	bic.w	r4, r4, #3
 8009954:	42a0      	cmp	r0, r4
 8009956:	d007      	beq.n	8009968 <sbrk_aligned+0x38>
 8009958:	1a21      	subs	r1, r4, r0
 800995a:	4628      	mov	r0, r5
 800995c:	f000 fb6a 	bl	800a034 <_sbrk_r>
 8009960:	3001      	adds	r0, #1
 8009962:	d101      	bne.n	8009968 <sbrk_aligned+0x38>
 8009964:	f04f 34ff 	mov.w	r4, #4294967295
 8009968:	4620      	mov	r0, r4
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	20004544 	.word	0x20004544

08009970 <_malloc_r>:
 8009970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009974:	1ccd      	adds	r5, r1, #3
 8009976:	f025 0503 	bic.w	r5, r5, #3
 800997a:	3508      	adds	r5, #8
 800997c:	2d0c      	cmp	r5, #12
 800997e:	bf38      	it	cc
 8009980:	250c      	movcc	r5, #12
 8009982:	2d00      	cmp	r5, #0
 8009984:	4607      	mov	r7, r0
 8009986:	db01      	blt.n	800998c <_malloc_r+0x1c>
 8009988:	42a9      	cmp	r1, r5
 800998a:	d905      	bls.n	8009998 <_malloc_r+0x28>
 800998c:	230c      	movs	r3, #12
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	2600      	movs	r6, #0
 8009992:	4630      	mov	r0, r6
 8009994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009998:	4e2e      	ldr	r6, [pc, #184]	; (8009a54 <_malloc_r+0xe4>)
 800999a:	f000 fbf5 	bl	800a188 <__malloc_lock>
 800999e:	6833      	ldr	r3, [r6, #0]
 80099a0:	461c      	mov	r4, r3
 80099a2:	bb34      	cbnz	r4, 80099f2 <_malloc_r+0x82>
 80099a4:	4629      	mov	r1, r5
 80099a6:	4638      	mov	r0, r7
 80099a8:	f7ff ffc2 	bl	8009930 <sbrk_aligned>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	4604      	mov	r4, r0
 80099b0:	d14d      	bne.n	8009a4e <_malloc_r+0xde>
 80099b2:	6834      	ldr	r4, [r6, #0]
 80099b4:	4626      	mov	r6, r4
 80099b6:	2e00      	cmp	r6, #0
 80099b8:	d140      	bne.n	8009a3c <_malloc_r+0xcc>
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	4631      	mov	r1, r6
 80099be:	4638      	mov	r0, r7
 80099c0:	eb04 0803 	add.w	r8, r4, r3
 80099c4:	f000 fb36 	bl	800a034 <_sbrk_r>
 80099c8:	4580      	cmp	r8, r0
 80099ca:	d13a      	bne.n	8009a42 <_malloc_r+0xd2>
 80099cc:	6821      	ldr	r1, [r4, #0]
 80099ce:	3503      	adds	r5, #3
 80099d0:	1a6d      	subs	r5, r5, r1
 80099d2:	f025 0503 	bic.w	r5, r5, #3
 80099d6:	3508      	adds	r5, #8
 80099d8:	2d0c      	cmp	r5, #12
 80099da:	bf38      	it	cc
 80099dc:	250c      	movcc	r5, #12
 80099de:	4629      	mov	r1, r5
 80099e0:	4638      	mov	r0, r7
 80099e2:	f7ff ffa5 	bl	8009930 <sbrk_aligned>
 80099e6:	3001      	adds	r0, #1
 80099e8:	d02b      	beq.n	8009a42 <_malloc_r+0xd2>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	442b      	add	r3, r5
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	e00e      	b.n	8009a10 <_malloc_r+0xa0>
 80099f2:	6822      	ldr	r2, [r4, #0]
 80099f4:	1b52      	subs	r2, r2, r5
 80099f6:	d41e      	bmi.n	8009a36 <_malloc_r+0xc6>
 80099f8:	2a0b      	cmp	r2, #11
 80099fa:	d916      	bls.n	8009a2a <_malloc_r+0xba>
 80099fc:	1961      	adds	r1, r4, r5
 80099fe:	42a3      	cmp	r3, r4
 8009a00:	6025      	str	r5, [r4, #0]
 8009a02:	bf18      	it	ne
 8009a04:	6059      	strne	r1, [r3, #4]
 8009a06:	6863      	ldr	r3, [r4, #4]
 8009a08:	bf08      	it	eq
 8009a0a:	6031      	streq	r1, [r6, #0]
 8009a0c:	5162      	str	r2, [r4, r5]
 8009a0e:	604b      	str	r3, [r1, #4]
 8009a10:	4638      	mov	r0, r7
 8009a12:	f104 060b 	add.w	r6, r4, #11
 8009a16:	f000 fbbd 	bl	800a194 <__malloc_unlock>
 8009a1a:	f026 0607 	bic.w	r6, r6, #7
 8009a1e:	1d23      	adds	r3, r4, #4
 8009a20:	1af2      	subs	r2, r6, r3
 8009a22:	d0b6      	beq.n	8009992 <_malloc_r+0x22>
 8009a24:	1b9b      	subs	r3, r3, r6
 8009a26:	50a3      	str	r3, [r4, r2]
 8009a28:	e7b3      	b.n	8009992 <_malloc_r+0x22>
 8009a2a:	6862      	ldr	r2, [r4, #4]
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	bf0c      	ite	eq
 8009a30:	6032      	streq	r2, [r6, #0]
 8009a32:	605a      	strne	r2, [r3, #4]
 8009a34:	e7ec      	b.n	8009a10 <_malloc_r+0xa0>
 8009a36:	4623      	mov	r3, r4
 8009a38:	6864      	ldr	r4, [r4, #4]
 8009a3a:	e7b2      	b.n	80099a2 <_malloc_r+0x32>
 8009a3c:	4634      	mov	r4, r6
 8009a3e:	6876      	ldr	r6, [r6, #4]
 8009a40:	e7b9      	b.n	80099b6 <_malloc_r+0x46>
 8009a42:	230c      	movs	r3, #12
 8009a44:	603b      	str	r3, [r7, #0]
 8009a46:	4638      	mov	r0, r7
 8009a48:	f000 fba4 	bl	800a194 <__malloc_unlock>
 8009a4c:	e7a1      	b.n	8009992 <_malloc_r+0x22>
 8009a4e:	6025      	str	r5, [r4, #0]
 8009a50:	e7de      	b.n	8009a10 <_malloc_r+0xa0>
 8009a52:	bf00      	nop
 8009a54:	20004540 	.word	0x20004540

08009a58 <__sfputc_r>:
 8009a58:	6893      	ldr	r3, [r2, #8]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	b410      	push	{r4}
 8009a60:	6093      	str	r3, [r2, #8]
 8009a62:	da08      	bge.n	8009a76 <__sfputc_r+0x1e>
 8009a64:	6994      	ldr	r4, [r2, #24]
 8009a66:	42a3      	cmp	r3, r4
 8009a68:	db01      	blt.n	8009a6e <__sfputc_r+0x16>
 8009a6a:	290a      	cmp	r1, #10
 8009a6c:	d103      	bne.n	8009a76 <__sfputc_r+0x1e>
 8009a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a72:	f7ff bc31 	b.w	80092d8 <__swbuf_r>
 8009a76:	6813      	ldr	r3, [r2, #0]
 8009a78:	1c58      	adds	r0, r3, #1
 8009a7a:	6010      	str	r0, [r2, #0]
 8009a7c:	7019      	strb	r1, [r3, #0]
 8009a7e:	4608      	mov	r0, r1
 8009a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <__sfputs_r>:
 8009a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a88:	4606      	mov	r6, r0
 8009a8a:	460f      	mov	r7, r1
 8009a8c:	4614      	mov	r4, r2
 8009a8e:	18d5      	adds	r5, r2, r3
 8009a90:	42ac      	cmp	r4, r5
 8009a92:	d101      	bne.n	8009a98 <__sfputs_r+0x12>
 8009a94:	2000      	movs	r0, #0
 8009a96:	e007      	b.n	8009aa8 <__sfputs_r+0x22>
 8009a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9c:	463a      	mov	r2, r7
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7ff ffda 	bl	8009a58 <__sfputc_r>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d1f3      	bne.n	8009a90 <__sfputs_r+0xa>
 8009aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009aac <_vfiprintf_r>:
 8009aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab0:	460d      	mov	r5, r1
 8009ab2:	b09d      	sub	sp, #116	; 0x74
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	4698      	mov	r8, r3
 8009ab8:	4606      	mov	r6, r0
 8009aba:	b118      	cbz	r0, 8009ac4 <_vfiprintf_r+0x18>
 8009abc:	6983      	ldr	r3, [r0, #24]
 8009abe:	b90b      	cbnz	r3, 8009ac4 <_vfiprintf_r+0x18>
 8009ac0:	f7ff fde4 	bl	800968c <__sinit>
 8009ac4:	4b89      	ldr	r3, [pc, #548]	; (8009cec <_vfiprintf_r+0x240>)
 8009ac6:	429d      	cmp	r5, r3
 8009ac8:	d11b      	bne.n	8009b02 <_vfiprintf_r+0x56>
 8009aca:	6875      	ldr	r5, [r6, #4]
 8009acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ace:	07d9      	lsls	r1, r3, #31
 8009ad0:	d405      	bmi.n	8009ade <_vfiprintf_r+0x32>
 8009ad2:	89ab      	ldrh	r3, [r5, #12]
 8009ad4:	059a      	lsls	r2, r3, #22
 8009ad6:	d402      	bmi.n	8009ade <_vfiprintf_r+0x32>
 8009ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ada:	f7ff fe75 	bl	80097c8 <__retarget_lock_acquire_recursive>
 8009ade:	89ab      	ldrh	r3, [r5, #12]
 8009ae0:	071b      	lsls	r3, r3, #28
 8009ae2:	d501      	bpl.n	8009ae8 <_vfiprintf_r+0x3c>
 8009ae4:	692b      	ldr	r3, [r5, #16]
 8009ae6:	b9eb      	cbnz	r3, 8009b24 <_vfiprintf_r+0x78>
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff fc46 	bl	800937c <__swsetup_r>
 8009af0:	b1c0      	cbz	r0, 8009b24 <_vfiprintf_r+0x78>
 8009af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af4:	07dc      	lsls	r4, r3, #31
 8009af6:	d50e      	bpl.n	8009b16 <_vfiprintf_r+0x6a>
 8009af8:	f04f 30ff 	mov.w	r0, #4294967295
 8009afc:	b01d      	add	sp, #116	; 0x74
 8009afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b02:	4b7b      	ldr	r3, [pc, #492]	; (8009cf0 <_vfiprintf_r+0x244>)
 8009b04:	429d      	cmp	r5, r3
 8009b06:	d101      	bne.n	8009b0c <_vfiprintf_r+0x60>
 8009b08:	68b5      	ldr	r5, [r6, #8]
 8009b0a:	e7df      	b.n	8009acc <_vfiprintf_r+0x20>
 8009b0c:	4b79      	ldr	r3, [pc, #484]	; (8009cf4 <_vfiprintf_r+0x248>)
 8009b0e:	429d      	cmp	r5, r3
 8009b10:	bf08      	it	eq
 8009b12:	68f5      	ldreq	r5, [r6, #12]
 8009b14:	e7da      	b.n	8009acc <_vfiprintf_r+0x20>
 8009b16:	89ab      	ldrh	r3, [r5, #12]
 8009b18:	0598      	lsls	r0, r3, #22
 8009b1a:	d4ed      	bmi.n	8009af8 <_vfiprintf_r+0x4c>
 8009b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b1e:	f7ff fe54 	bl	80097ca <__retarget_lock_release_recursive>
 8009b22:	e7e9      	b.n	8009af8 <_vfiprintf_r+0x4c>
 8009b24:	2300      	movs	r3, #0
 8009b26:	9309      	str	r3, [sp, #36]	; 0x24
 8009b28:	2320      	movs	r3, #32
 8009b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b32:	2330      	movs	r3, #48	; 0x30
 8009b34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009cf8 <_vfiprintf_r+0x24c>
 8009b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b3c:	f04f 0901 	mov.w	r9, #1
 8009b40:	4623      	mov	r3, r4
 8009b42:	469a      	mov	sl, r3
 8009b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b48:	b10a      	cbz	r2, 8009b4e <_vfiprintf_r+0xa2>
 8009b4a:	2a25      	cmp	r2, #37	; 0x25
 8009b4c:	d1f9      	bne.n	8009b42 <_vfiprintf_r+0x96>
 8009b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b52:	d00b      	beq.n	8009b6c <_vfiprintf_r+0xc0>
 8009b54:	465b      	mov	r3, fp
 8009b56:	4622      	mov	r2, r4
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f7ff ff93 	bl	8009a86 <__sfputs_r>
 8009b60:	3001      	adds	r0, #1
 8009b62:	f000 80aa 	beq.w	8009cba <_vfiprintf_r+0x20e>
 8009b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b68:	445a      	add	r2, fp
 8009b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 80a2 	beq.w	8009cba <_vfiprintf_r+0x20e>
 8009b76:	2300      	movs	r3, #0
 8009b78:	f04f 32ff 	mov.w	r2, #4294967295
 8009b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b80:	f10a 0a01 	add.w	sl, sl, #1
 8009b84:	9304      	str	r3, [sp, #16]
 8009b86:	9307      	str	r3, [sp, #28]
 8009b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b8e:	4654      	mov	r4, sl
 8009b90:	2205      	movs	r2, #5
 8009b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b96:	4858      	ldr	r0, [pc, #352]	; (8009cf8 <_vfiprintf_r+0x24c>)
 8009b98:	f7f6 fb42 	bl	8000220 <memchr>
 8009b9c:	9a04      	ldr	r2, [sp, #16]
 8009b9e:	b9d8      	cbnz	r0, 8009bd8 <_vfiprintf_r+0x12c>
 8009ba0:	06d1      	lsls	r1, r2, #27
 8009ba2:	bf44      	itt	mi
 8009ba4:	2320      	movmi	r3, #32
 8009ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009baa:	0713      	lsls	r3, r2, #28
 8009bac:	bf44      	itt	mi
 8009bae:	232b      	movmi	r3, #43	; 0x2b
 8009bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bba:	d015      	beq.n	8009be8 <_vfiprintf_r+0x13c>
 8009bbc:	9a07      	ldr	r2, [sp, #28]
 8009bbe:	4654      	mov	r4, sl
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	f04f 0c0a 	mov.w	ip, #10
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bcc:	3b30      	subs	r3, #48	; 0x30
 8009bce:	2b09      	cmp	r3, #9
 8009bd0:	d94e      	bls.n	8009c70 <_vfiprintf_r+0x1c4>
 8009bd2:	b1b0      	cbz	r0, 8009c02 <_vfiprintf_r+0x156>
 8009bd4:	9207      	str	r2, [sp, #28]
 8009bd6:	e014      	b.n	8009c02 <_vfiprintf_r+0x156>
 8009bd8:	eba0 0308 	sub.w	r3, r0, r8
 8009bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009be0:	4313      	orrs	r3, r2
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	46a2      	mov	sl, r4
 8009be6:	e7d2      	b.n	8009b8e <_vfiprintf_r+0xe2>
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	1d19      	adds	r1, r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	9103      	str	r1, [sp, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	bfbb      	ittet	lt
 8009bf4:	425b      	neglt	r3, r3
 8009bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8009bfa:	9307      	strge	r3, [sp, #28]
 8009bfc:	9307      	strlt	r3, [sp, #28]
 8009bfe:	bfb8      	it	lt
 8009c00:	9204      	strlt	r2, [sp, #16]
 8009c02:	7823      	ldrb	r3, [r4, #0]
 8009c04:	2b2e      	cmp	r3, #46	; 0x2e
 8009c06:	d10c      	bne.n	8009c22 <_vfiprintf_r+0x176>
 8009c08:	7863      	ldrb	r3, [r4, #1]
 8009c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c0c:	d135      	bne.n	8009c7a <_vfiprintf_r+0x1ce>
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	1d1a      	adds	r2, r3, #4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	9203      	str	r2, [sp, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bfb8      	it	lt
 8009c1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c1e:	3402      	adds	r4, #2
 8009c20:	9305      	str	r3, [sp, #20]
 8009c22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d08 <_vfiprintf_r+0x25c>
 8009c26:	7821      	ldrb	r1, [r4, #0]
 8009c28:	2203      	movs	r2, #3
 8009c2a:	4650      	mov	r0, sl
 8009c2c:	f7f6 faf8 	bl	8000220 <memchr>
 8009c30:	b140      	cbz	r0, 8009c44 <_vfiprintf_r+0x198>
 8009c32:	2340      	movs	r3, #64	; 0x40
 8009c34:	eba0 000a 	sub.w	r0, r0, sl
 8009c38:	fa03 f000 	lsl.w	r0, r3, r0
 8009c3c:	9b04      	ldr	r3, [sp, #16]
 8009c3e:	4303      	orrs	r3, r0
 8009c40:	3401      	adds	r4, #1
 8009c42:	9304      	str	r3, [sp, #16]
 8009c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c48:	482c      	ldr	r0, [pc, #176]	; (8009cfc <_vfiprintf_r+0x250>)
 8009c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c4e:	2206      	movs	r2, #6
 8009c50:	f7f6 fae6 	bl	8000220 <memchr>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d03f      	beq.n	8009cd8 <_vfiprintf_r+0x22c>
 8009c58:	4b29      	ldr	r3, [pc, #164]	; (8009d00 <_vfiprintf_r+0x254>)
 8009c5a:	bb1b      	cbnz	r3, 8009ca4 <_vfiprintf_r+0x1f8>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	3307      	adds	r3, #7
 8009c60:	f023 0307 	bic.w	r3, r3, #7
 8009c64:	3308      	adds	r3, #8
 8009c66:	9303      	str	r3, [sp, #12]
 8009c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6a:	443b      	add	r3, r7
 8009c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6e:	e767      	b.n	8009b40 <_vfiprintf_r+0x94>
 8009c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c74:	460c      	mov	r4, r1
 8009c76:	2001      	movs	r0, #1
 8009c78:	e7a5      	b.n	8009bc6 <_vfiprintf_r+0x11a>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	3401      	adds	r4, #1
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	4619      	mov	r1, r3
 8009c82:	f04f 0c0a 	mov.w	ip, #10
 8009c86:	4620      	mov	r0, r4
 8009c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c8c:	3a30      	subs	r2, #48	; 0x30
 8009c8e:	2a09      	cmp	r2, #9
 8009c90:	d903      	bls.n	8009c9a <_vfiprintf_r+0x1ee>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0c5      	beq.n	8009c22 <_vfiprintf_r+0x176>
 8009c96:	9105      	str	r1, [sp, #20]
 8009c98:	e7c3      	b.n	8009c22 <_vfiprintf_r+0x176>
 8009c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e7f0      	b.n	8009c86 <_vfiprintf_r+0x1da>
 8009ca4:	ab03      	add	r3, sp, #12
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	462a      	mov	r2, r5
 8009caa:	4b16      	ldr	r3, [pc, #88]	; (8009d04 <_vfiprintf_r+0x258>)
 8009cac:	a904      	add	r1, sp, #16
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f3af 8000 	nop.w
 8009cb4:	4607      	mov	r7, r0
 8009cb6:	1c78      	adds	r0, r7, #1
 8009cb8:	d1d6      	bne.n	8009c68 <_vfiprintf_r+0x1bc>
 8009cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cbc:	07d9      	lsls	r1, r3, #31
 8009cbe:	d405      	bmi.n	8009ccc <_vfiprintf_r+0x220>
 8009cc0:	89ab      	ldrh	r3, [r5, #12]
 8009cc2:	059a      	lsls	r2, r3, #22
 8009cc4:	d402      	bmi.n	8009ccc <_vfiprintf_r+0x220>
 8009cc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cc8:	f7ff fd7f 	bl	80097ca <__retarget_lock_release_recursive>
 8009ccc:	89ab      	ldrh	r3, [r5, #12]
 8009cce:	065b      	lsls	r3, r3, #25
 8009cd0:	f53f af12 	bmi.w	8009af8 <_vfiprintf_r+0x4c>
 8009cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cd6:	e711      	b.n	8009afc <_vfiprintf_r+0x50>
 8009cd8:	ab03      	add	r3, sp, #12
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	462a      	mov	r2, r5
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <_vfiprintf_r+0x258>)
 8009ce0:	a904      	add	r1, sp, #16
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f000 f880 	bl	8009de8 <_printf_i>
 8009ce8:	e7e4      	b.n	8009cb4 <_vfiprintf_r+0x208>
 8009cea:	bf00      	nop
 8009cec:	0800a33c 	.word	0x0800a33c
 8009cf0:	0800a35c 	.word	0x0800a35c
 8009cf4:	0800a31c 	.word	0x0800a31c
 8009cf8:	0800a37c 	.word	0x0800a37c
 8009cfc:	0800a386 	.word	0x0800a386
 8009d00:	00000000 	.word	0x00000000
 8009d04:	08009a87 	.word	0x08009a87
 8009d08:	0800a382 	.word	0x0800a382

08009d0c <_printf_common>:
 8009d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d10:	4616      	mov	r6, r2
 8009d12:	4699      	mov	r9, r3
 8009d14:	688a      	ldr	r2, [r1, #8]
 8009d16:	690b      	ldr	r3, [r1, #16]
 8009d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	bfb8      	it	lt
 8009d20:	4613      	movlt	r3, r2
 8009d22:	6033      	str	r3, [r6, #0]
 8009d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d28:	4607      	mov	r7, r0
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	b10a      	cbz	r2, 8009d32 <_printf_common+0x26>
 8009d2e:	3301      	adds	r3, #1
 8009d30:	6033      	str	r3, [r6, #0]
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	0699      	lsls	r1, r3, #26
 8009d36:	bf42      	ittt	mi
 8009d38:	6833      	ldrmi	r3, [r6, #0]
 8009d3a:	3302      	addmi	r3, #2
 8009d3c:	6033      	strmi	r3, [r6, #0]
 8009d3e:	6825      	ldr	r5, [r4, #0]
 8009d40:	f015 0506 	ands.w	r5, r5, #6
 8009d44:	d106      	bne.n	8009d54 <_printf_common+0x48>
 8009d46:	f104 0a19 	add.w	sl, r4, #25
 8009d4a:	68e3      	ldr	r3, [r4, #12]
 8009d4c:	6832      	ldr	r2, [r6, #0]
 8009d4e:	1a9b      	subs	r3, r3, r2
 8009d50:	42ab      	cmp	r3, r5
 8009d52:	dc26      	bgt.n	8009da2 <_printf_common+0x96>
 8009d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d58:	1e13      	subs	r3, r2, #0
 8009d5a:	6822      	ldr	r2, [r4, #0]
 8009d5c:	bf18      	it	ne
 8009d5e:	2301      	movne	r3, #1
 8009d60:	0692      	lsls	r2, r2, #26
 8009d62:	d42b      	bmi.n	8009dbc <_printf_common+0xb0>
 8009d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d68:	4649      	mov	r1, r9
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	47c0      	blx	r8
 8009d6e:	3001      	adds	r0, #1
 8009d70:	d01e      	beq.n	8009db0 <_printf_common+0xa4>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	68e5      	ldr	r5, [r4, #12]
 8009d76:	6832      	ldr	r2, [r6, #0]
 8009d78:	f003 0306 	and.w	r3, r3, #6
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	bf08      	it	eq
 8009d80:	1aad      	subeq	r5, r5, r2
 8009d82:	68a3      	ldr	r3, [r4, #8]
 8009d84:	6922      	ldr	r2, [r4, #16]
 8009d86:	bf0c      	ite	eq
 8009d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d8c:	2500      	movne	r5, #0
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	bfc4      	itt	gt
 8009d92:	1a9b      	subgt	r3, r3, r2
 8009d94:	18ed      	addgt	r5, r5, r3
 8009d96:	2600      	movs	r6, #0
 8009d98:	341a      	adds	r4, #26
 8009d9a:	42b5      	cmp	r5, r6
 8009d9c:	d11a      	bne.n	8009dd4 <_printf_common+0xc8>
 8009d9e:	2000      	movs	r0, #0
 8009da0:	e008      	b.n	8009db4 <_printf_common+0xa8>
 8009da2:	2301      	movs	r3, #1
 8009da4:	4652      	mov	r2, sl
 8009da6:	4649      	mov	r1, r9
 8009da8:	4638      	mov	r0, r7
 8009daa:	47c0      	blx	r8
 8009dac:	3001      	adds	r0, #1
 8009dae:	d103      	bne.n	8009db8 <_printf_common+0xac>
 8009db0:	f04f 30ff 	mov.w	r0, #4294967295
 8009db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db8:	3501      	adds	r5, #1
 8009dba:	e7c6      	b.n	8009d4a <_printf_common+0x3e>
 8009dbc:	18e1      	adds	r1, r4, r3
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	2030      	movs	r0, #48	; 0x30
 8009dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dc6:	4422      	add	r2, r4
 8009dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dd0:	3302      	adds	r3, #2
 8009dd2:	e7c7      	b.n	8009d64 <_printf_common+0x58>
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	4649      	mov	r1, r9
 8009dda:	4638      	mov	r0, r7
 8009ddc:	47c0      	blx	r8
 8009dde:	3001      	adds	r0, #1
 8009de0:	d0e6      	beq.n	8009db0 <_printf_common+0xa4>
 8009de2:	3601      	adds	r6, #1
 8009de4:	e7d9      	b.n	8009d9a <_printf_common+0x8e>
	...

08009de8 <_printf_i>:
 8009de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dec:	7e0f      	ldrb	r7, [r1, #24]
 8009dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009df0:	2f78      	cmp	r7, #120	; 0x78
 8009df2:	4691      	mov	r9, r2
 8009df4:	4680      	mov	r8, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	469a      	mov	sl, r3
 8009dfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009dfe:	d807      	bhi.n	8009e10 <_printf_i+0x28>
 8009e00:	2f62      	cmp	r7, #98	; 0x62
 8009e02:	d80a      	bhi.n	8009e1a <_printf_i+0x32>
 8009e04:	2f00      	cmp	r7, #0
 8009e06:	f000 80d8 	beq.w	8009fba <_printf_i+0x1d2>
 8009e0a:	2f58      	cmp	r7, #88	; 0x58
 8009e0c:	f000 80a3 	beq.w	8009f56 <_printf_i+0x16e>
 8009e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e18:	e03a      	b.n	8009e90 <_printf_i+0xa8>
 8009e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e1e:	2b15      	cmp	r3, #21
 8009e20:	d8f6      	bhi.n	8009e10 <_printf_i+0x28>
 8009e22:	a101      	add	r1, pc, #4	; (adr r1, 8009e28 <_printf_i+0x40>)
 8009e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e28:	08009e81 	.word	0x08009e81
 8009e2c:	08009e95 	.word	0x08009e95
 8009e30:	08009e11 	.word	0x08009e11
 8009e34:	08009e11 	.word	0x08009e11
 8009e38:	08009e11 	.word	0x08009e11
 8009e3c:	08009e11 	.word	0x08009e11
 8009e40:	08009e95 	.word	0x08009e95
 8009e44:	08009e11 	.word	0x08009e11
 8009e48:	08009e11 	.word	0x08009e11
 8009e4c:	08009e11 	.word	0x08009e11
 8009e50:	08009e11 	.word	0x08009e11
 8009e54:	08009fa1 	.word	0x08009fa1
 8009e58:	08009ec5 	.word	0x08009ec5
 8009e5c:	08009f83 	.word	0x08009f83
 8009e60:	08009e11 	.word	0x08009e11
 8009e64:	08009e11 	.word	0x08009e11
 8009e68:	08009fc3 	.word	0x08009fc3
 8009e6c:	08009e11 	.word	0x08009e11
 8009e70:	08009ec5 	.word	0x08009ec5
 8009e74:	08009e11 	.word	0x08009e11
 8009e78:	08009e11 	.word	0x08009e11
 8009e7c:	08009f8b 	.word	0x08009f8b
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	1d1a      	adds	r2, r3, #4
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	602a      	str	r2, [r5, #0]
 8009e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e90:	2301      	movs	r3, #1
 8009e92:	e0a3      	b.n	8009fdc <_printf_i+0x1f4>
 8009e94:	6820      	ldr	r0, [r4, #0]
 8009e96:	6829      	ldr	r1, [r5, #0]
 8009e98:	0606      	lsls	r6, r0, #24
 8009e9a:	f101 0304 	add.w	r3, r1, #4
 8009e9e:	d50a      	bpl.n	8009eb6 <_printf_i+0xce>
 8009ea0:	680e      	ldr	r6, [r1, #0]
 8009ea2:	602b      	str	r3, [r5, #0]
 8009ea4:	2e00      	cmp	r6, #0
 8009ea6:	da03      	bge.n	8009eb0 <_printf_i+0xc8>
 8009ea8:	232d      	movs	r3, #45	; 0x2d
 8009eaa:	4276      	negs	r6, r6
 8009eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb0:	485e      	ldr	r0, [pc, #376]	; (800a02c <_printf_i+0x244>)
 8009eb2:	230a      	movs	r3, #10
 8009eb4:	e019      	b.n	8009eea <_printf_i+0x102>
 8009eb6:	680e      	ldr	r6, [r1, #0]
 8009eb8:	602b      	str	r3, [r5, #0]
 8009eba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ebe:	bf18      	it	ne
 8009ec0:	b236      	sxthne	r6, r6
 8009ec2:	e7ef      	b.n	8009ea4 <_printf_i+0xbc>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	6820      	ldr	r0, [r4, #0]
 8009ec8:	1d19      	adds	r1, r3, #4
 8009eca:	6029      	str	r1, [r5, #0]
 8009ecc:	0601      	lsls	r1, r0, #24
 8009ece:	d501      	bpl.n	8009ed4 <_printf_i+0xec>
 8009ed0:	681e      	ldr	r6, [r3, #0]
 8009ed2:	e002      	b.n	8009eda <_printf_i+0xf2>
 8009ed4:	0646      	lsls	r6, r0, #25
 8009ed6:	d5fb      	bpl.n	8009ed0 <_printf_i+0xe8>
 8009ed8:	881e      	ldrh	r6, [r3, #0]
 8009eda:	4854      	ldr	r0, [pc, #336]	; (800a02c <_printf_i+0x244>)
 8009edc:	2f6f      	cmp	r7, #111	; 0x6f
 8009ede:	bf0c      	ite	eq
 8009ee0:	2308      	moveq	r3, #8
 8009ee2:	230a      	movne	r3, #10
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009eea:	6865      	ldr	r5, [r4, #4]
 8009eec:	60a5      	str	r5, [r4, #8]
 8009eee:	2d00      	cmp	r5, #0
 8009ef0:	bfa2      	ittt	ge
 8009ef2:	6821      	ldrge	r1, [r4, #0]
 8009ef4:	f021 0104 	bicge.w	r1, r1, #4
 8009ef8:	6021      	strge	r1, [r4, #0]
 8009efa:	b90e      	cbnz	r6, 8009f00 <_printf_i+0x118>
 8009efc:	2d00      	cmp	r5, #0
 8009efe:	d04d      	beq.n	8009f9c <_printf_i+0x1b4>
 8009f00:	4615      	mov	r5, r2
 8009f02:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f06:	fb03 6711 	mls	r7, r3, r1, r6
 8009f0a:	5dc7      	ldrb	r7, [r0, r7]
 8009f0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f10:	4637      	mov	r7, r6
 8009f12:	42bb      	cmp	r3, r7
 8009f14:	460e      	mov	r6, r1
 8009f16:	d9f4      	bls.n	8009f02 <_printf_i+0x11a>
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	d10b      	bne.n	8009f34 <_printf_i+0x14c>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	07de      	lsls	r6, r3, #31
 8009f20:	d508      	bpl.n	8009f34 <_printf_i+0x14c>
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	6861      	ldr	r1, [r4, #4]
 8009f26:	4299      	cmp	r1, r3
 8009f28:	bfde      	ittt	le
 8009f2a:	2330      	movle	r3, #48	; 0x30
 8009f2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f34:	1b52      	subs	r2, r2, r5
 8009f36:	6122      	str	r2, [r4, #16]
 8009f38:	f8cd a000 	str.w	sl, [sp]
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	aa03      	add	r2, sp, #12
 8009f40:	4621      	mov	r1, r4
 8009f42:	4640      	mov	r0, r8
 8009f44:	f7ff fee2 	bl	8009d0c <_printf_common>
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d14c      	bne.n	8009fe6 <_printf_i+0x1fe>
 8009f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f50:	b004      	add	sp, #16
 8009f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f56:	4835      	ldr	r0, [pc, #212]	; (800a02c <_printf_i+0x244>)
 8009f58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f5c:	6829      	ldr	r1, [r5, #0]
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f64:	6029      	str	r1, [r5, #0]
 8009f66:	061d      	lsls	r5, r3, #24
 8009f68:	d514      	bpl.n	8009f94 <_printf_i+0x1ac>
 8009f6a:	07df      	lsls	r7, r3, #31
 8009f6c:	bf44      	itt	mi
 8009f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8009f72:	6023      	strmi	r3, [r4, #0]
 8009f74:	b91e      	cbnz	r6, 8009f7e <_printf_i+0x196>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	f023 0320 	bic.w	r3, r3, #32
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	2310      	movs	r3, #16
 8009f80:	e7b0      	b.n	8009ee4 <_printf_i+0xfc>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	f043 0320 	orr.w	r3, r3, #32
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	2378      	movs	r3, #120	; 0x78
 8009f8c:	4828      	ldr	r0, [pc, #160]	; (800a030 <_printf_i+0x248>)
 8009f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f92:	e7e3      	b.n	8009f5c <_printf_i+0x174>
 8009f94:	0659      	lsls	r1, r3, #25
 8009f96:	bf48      	it	mi
 8009f98:	b2b6      	uxthmi	r6, r6
 8009f9a:	e7e6      	b.n	8009f6a <_printf_i+0x182>
 8009f9c:	4615      	mov	r5, r2
 8009f9e:	e7bb      	b.n	8009f18 <_printf_i+0x130>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	6826      	ldr	r6, [r4, #0]
 8009fa4:	6961      	ldr	r1, [r4, #20]
 8009fa6:	1d18      	adds	r0, r3, #4
 8009fa8:	6028      	str	r0, [r5, #0]
 8009faa:	0635      	lsls	r5, r6, #24
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	d501      	bpl.n	8009fb4 <_printf_i+0x1cc>
 8009fb0:	6019      	str	r1, [r3, #0]
 8009fb2:	e002      	b.n	8009fba <_printf_i+0x1d2>
 8009fb4:	0670      	lsls	r0, r6, #25
 8009fb6:	d5fb      	bpl.n	8009fb0 <_printf_i+0x1c8>
 8009fb8:	8019      	strh	r1, [r3, #0]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	6123      	str	r3, [r4, #16]
 8009fbe:	4615      	mov	r5, r2
 8009fc0:	e7ba      	b.n	8009f38 <_printf_i+0x150>
 8009fc2:	682b      	ldr	r3, [r5, #0]
 8009fc4:	1d1a      	adds	r2, r3, #4
 8009fc6:	602a      	str	r2, [r5, #0]
 8009fc8:	681d      	ldr	r5, [r3, #0]
 8009fca:	6862      	ldr	r2, [r4, #4]
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f7f6 f926 	bl	8000220 <memchr>
 8009fd4:	b108      	cbz	r0, 8009fda <_printf_i+0x1f2>
 8009fd6:	1b40      	subs	r0, r0, r5
 8009fd8:	6060      	str	r0, [r4, #4]
 8009fda:	6863      	ldr	r3, [r4, #4]
 8009fdc:	6123      	str	r3, [r4, #16]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe4:	e7a8      	b.n	8009f38 <_printf_i+0x150>
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	462a      	mov	r2, r5
 8009fea:	4649      	mov	r1, r9
 8009fec:	4640      	mov	r0, r8
 8009fee:	47d0      	blx	sl
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	d0ab      	beq.n	8009f4c <_printf_i+0x164>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	079b      	lsls	r3, r3, #30
 8009ff8:	d413      	bmi.n	800a022 <_printf_i+0x23a>
 8009ffa:	68e0      	ldr	r0, [r4, #12]
 8009ffc:	9b03      	ldr	r3, [sp, #12]
 8009ffe:	4298      	cmp	r0, r3
 800a000:	bfb8      	it	lt
 800a002:	4618      	movlt	r0, r3
 800a004:	e7a4      	b.n	8009f50 <_printf_i+0x168>
 800a006:	2301      	movs	r3, #1
 800a008:	4632      	mov	r2, r6
 800a00a:	4649      	mov	r1, r9
 800a00c:	4640      	mov	r0, r8
 800a00e:	47d0      	blx	sl
 800a010:	3001      	adds	r0, #1
 800a012:	d09b      	beq.n	8009f4c <_printf_i+0x164>
 800a014:	3501      	adds	r5, #1
 800a016:	68e3      	ldr	r3, [r4, #12]
 800a018:	9903      	ldr	r1, [sp, #12]
 800a01a:	1a5b      	subs	r3, r3, r1
 800a01c:	42ab      	cmp	r3, r5
 800a01e:	dcf2      	bgt.n	800a006 <_printf_i+0x21e>
 800a020:	e7eb      	b.n	8009ffa <_printf_i+0x212>
 800a022:	2500      	movs	r5, #0
 800a024:	f104 0619 	add.w	r6, r4, #25
 800a028:	e7f5      	b.n	800a016 <_printf_i+0x22e>
 800a02a:	bf00      	nop
 800a02c:	0800a38d 	.word	0x0800a38d
 800a030:	0800a39e 	.word	0x0800a39e

0800a034 <_sbrk_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d06      	ldr	r5, [pc, #24]	; (800a050 <_sbrk_r+0x1c>)
 800a038:	2300      	movs	r3, #0
 800a03a:	4604      	mov	r4, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	602b      	str	r3, [r5, #0]
 800a040:	f7f7 fca2 	bl	8001988 <_sbrk>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d102      	bne.n	800a04e <_sbrk_r+0x1a>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	b103      	cbz	r3, 800a04e <_sbrk_r+0x1a>
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	20004548 	.word	0x20004548

0800a054 <__sread>:
 800a054:	b510      	push	{r4, lr}
 800a056:	460c      	mov	r4, r1
 800a058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a05c:	f000 f8a0 	bl	800a1a0 <_read_r>
 800a060:	2800      	cmp	r0, #0
 800a062:	bfab      	itete	ge
 800a064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a066:	89a3      	ldrhlt	r3, [r4, #12]
 800a068:	181b      	addge	r3, r3, r0
 800a06a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a06e:	bfac      	ite	ge
 800a070:	6563      	strge	r3, [r4, #84]	; 0x54
 800a072:	81a3      	strhlt	r3, [r4, #12]
 800a074:	bd10      	pop	{r4, pc}

0800a076 <__swrite>:
 800a076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a07a:	461f      	mov	r7, r3
 800a07c:	898b      	ldrh	r3, [r1, #12]
 800a07e:	05db      	lsls	r3, r3, #23
 800a080:	4605      	mov	r5, r0
 800a082:	460c      	mov	r4, r1
 800a084:	4616      	mov	r6, r2
 800a086:	d505      	bpl.n	800a094 <__swrite+0x1e>
 800a088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a08c:	2302      	movs	r3, #2
 800a08e:	2200      	movs	r2, #0
 800a090:	f000 f868 	bl	800a164 <_lseek_r>
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a09a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a09e:	81a3      	strh	r3, [r4, #12]
 800a0a0:	4632      	mov	r2, r6
 800a0a2:	463b      	mov	r3, r7
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0aa:	f000 b817 	b.w	800a0dc <_write_r>

0800a0ae <__sseek>:
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b6:	f000 f855 	bl	800a164 <_lseek_r>
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	bf15      	itete	ne
 800a0c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0ca:	81a3      	strheq	r3, [r4, #12]
 800a0cc:	bf18      	it	ne
 800a0ce:	81a3      	strhne	r3, [r4, #12]
 800a0d0:	bd10      	pop	{r4, pc}

0800a0d2 <__sclose>:
 800a0d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d6:	f000 b813 	b.w	800a100 <_close_r>
	...

0800a0dc <_write_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d07      	ldr	r5, [pc, #28]	; (800a0fc <_write_r+0x20>)
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	4608      	mov	r0, r1
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	602a      	str	r2, [r5, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f7f7 fbfb 	bl	80018e6 <_write>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_write_r+0x1e>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_write_r+0x1e>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	20004548 	.word	0x20004548

0800a100 <_close_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d06      	ldr	r5, [pc, #24]	; (800a11c <_close_r+0x1c>)
 800a104:	2300      	movs	r3, #0
 800a106:	4604      	mov	r4, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	f7f7 fc07 	bl	800191e <_close>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d102      	bne.n	800a11a <_close_r+0x1a>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b103      	cbz	r3, 800a11a <_close_r+0x1a>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	20004548 	.word	0x20004548

0800a120 <_fstat_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d07      	ldr	r5, [pc, #28]	; (800a140 <_fstat_r+0x20>)
 800a124:	2300      	movs	r3, #0
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	4611      	mov	r1, r2
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	f7f7 fc02 	bl	8001936 <_fstat>
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	d102      	bne.n	800a13c <_fstat_r+0x1c>
 800a136:	682b      	ldr	r3, [r5, #0]
 800a138:	b103      	cbz	r3, 800a13c <_fstat_r+0x1c>
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	bd38      	pop	{r3, r4, r5, pc}
 800a13e:	bf00      	nop
 800a140:	20004548 	.word	0x20004548

0800a144 <_isatty_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4d06      	ldr	r5, [pc, #24]	; (800a160 <_isatty_r+0x1c>)
 800a148:	2300      	movs	r3, #0
 800a14a:	4604      	mov	r4, r0
 800a14c:	4608      	mov	r0, r1
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	f7f7 fc01 	bl	8001956 <_isatty>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_isatty_r+0x1a>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_isatty_r+0x1a>
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	20004548 	.word	0x20004548

0800a164 <_lseek_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4d07      	ldr	r5, [pc, #28]	; (800a184 <_lseek_r+0x20>)
 800a168:	4604      	mov	r4, r0
 800a16a:	4608      	mov	r0, r1
 800a16c:	4611      	mov	r1, r2
 800a16e:	2200      	movs	r2, #0
 800a170:	602a      	str	r2, [r5, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	f7f7 fbfa 	bl	800196c <_lseek>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d102      	bne.n	800a182 <_lseek_r+0x1e>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	b103      	cbz	r3, 800a182 <_lseek_r+0x1e>
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	20004548 	.word	0x20004548

0800a188 <__malloc_lock>:
 800a188:	4801      	ldr	r0, [pc, #4]	; (800a190 <__malloc_lock+0x8>)
 800a18a:	f7ff bb1d 	b.w	80097c8 <__retarget_lock_acquire_recursive>
 800a18e:	bf00      	nop
 800a190:	2000453c 	.word	0x2000453c

0800a194 <__malloc_unlock>:
 800a194:	4801      	ldr	r0, [pc, #4]	; (800a19c <__malloc_unlock+0x8>)
 800a196:	f7ff bb18 	b.w	80097ca <__retarget_lock_release_recursive>
 800a19a:	bf00      	nop
 800a19c:	2000453c 	.word	0x2000453c

0800a1a0 <_read_r>:
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4d07      	ldr	r5, [pc, #28]	; (800a1c0 <_read_r+0x20>)
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	4608      	mov	r0, r1
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	602a      	str	r2, [r5, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f7f7 fb7c 	bl	80018ac <_read>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_read_r+0x1e>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_read_r+0x1e>
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	20004548 	.word	0x20004548

0800a1c4 <_init>:
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c6:	bf00      	nop
 800a1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ca:	bc08      	pop	{r3}
 800a1cc:	469e      	mov	lr, r3
 800a1ce:	4770      	bx	lr

0800a1d0 <_fini>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr
